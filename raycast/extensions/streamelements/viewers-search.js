"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/@streamelements/crm-api-axios-sdk/lib/core/BaseHttpRequest.js
var require_BaseHttpRequest = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/core/BaseHttpRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BaseHttpRequest = void 0;
    var BaseHttpRequest = class {
      constructor(config) {
        this.config = config;
      }
    };
    exports2.BaseHttpRequest = BaseHttpRequest;
  }
});

// node_modules/axios/lib/helpers/bind.js
var require_bind = __commonJS({
  "node_modules/axios/lib/helpers/bind.js"(exports2, module2) {
    "use strict";
    module2.exports = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };
  }
});

// node_modules/axios/lib/utils.js
var require_utils = __commonJS({
  "node_modules/axios/lib/utils.js"(exports2, module2) {
    "use strict";
    var bind = require_bind();
    var toString = Object.prototype.toString;
    function isArray(val) {
      return Array.isArray(val);
    }
    function isUndefined(val) {
      return typeof val === "undefined";
    }
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
    }
    function isArrayBuffer(val) {
      return toString.call(val) === "[object ArrayBuffer]";
    }
    function isFormData(val) {
      return toString.call(val) === "[object FormData]";
    }
    function isArrayBufferView(val) {
      var result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && isArrayBuffer(val.buffer);
      }
      return result;
    }
    function isString(val) {
      return typeof val === "string";
    }
    function isNumber(val) {
      return typeof val === "number";
    }
    function isObject(val) {
      return val !== null && typeof val === "object";
    }
    function isPlainObject(val) {
      if (toString.call(val) !== "[object Object]") {
        return false;
      }
      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }
    function isDate(val) {
      return toString.call(val) === "[object Date]";
    }
    function isFile(val) {
      return toString.call(val) === "[object File]";
    }
    function isBlob(val) {
      return toString.call(val) === "[object Blob]";
    }
    function isFunction(val) {
      return toString.call(val) === "[object Function]";
    }
    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }
    function isURLSearchParams(val) {
      return toString.call(val) === "[object URLSearchParams]";
    }
    function trim(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
    }
    function isStandardBrowserEnv() {
      if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    }
    function forEach(obj, fn) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }
    function merge() {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }
      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }
    function extend(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === "function") {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }
    function stripBOM(content) {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    }
    module2.exports = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isObject,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isFunction,
      isStream,
      isURLSearchParams,
      isStandardBrowserEnv,
      forEach,
      merge,
      extend,
      trim,
      stripBOM
    };
  }
});

// node_modules/axios/lib/helpers/buildURL.js
var require_buildURL = __commonJS({
  "node_modules/axios/lib/helpers/buildURL.js"(exports2, module2) {
    "use strict";
    var utils = require_utils();
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    module2.exports = function buildURL(url, params, paramsSerializer) {
      if (!params) {
        return url;
      }
      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === "undefined") {
            return;
          }
          if (utils.isArray(val)) {
            key = key + "[]";
          } else {
            val = [val];
          }
          utils.forEach(val, function parseValue(v) {
            if (utils.isDate(v)) {
              v = v.toISOString();
            } else if (utils.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode(key) + "=" + encode(v));
          });
        });
        serializedParams = parts.join("&");
      }
      if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    };
  }
});

// node_modules/axios/lib/core/InterceptorManager.js
var require_InterceptorManager = __commonJS({
  "node_modules/axios/lib/core/InterceptorManager.js"(exports2, module2) {
    "use strict";
    var utils = require_utils();
    function InterceptorManager() {
      this.handlers = [];
    }
    InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };
    module2.exports = InterceptorManager;
  }
});

// node_modules/axios/lib/helpers/normalizeHeaderName.js
var require_normalizeHeaderName = __commonJS({
  "node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports2, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };
  }
});

// node_modules/axios/lib/core/enhanceError.js
var require_enhanceError = __commonJS({
  "node_modules/axios/lib/core/enhanceError.js"(exports2, module2) {
    "use strict";
    module2.exports = function enhanceError(error, config, code, request, response) {
      error.config = config;
      if (code) {
        error.code = code;
      }
      error.request = request;
      error.response = response;
      error.isAxiosError = true;
      error.toJSON = function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: this.config,
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      };
      return error;
    };
  }
});

// node_modules/axios/lib/defaults/transitional.js
var require_transitional = __commonJS({
  "node_modules/axios/lib/defaults/transitional.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
  }
});

// node_modules/axios/lib/core/createError.js
var require_createError = __commonJS({
  "node_modules/axios/lib/core/createError.js"(exports2, module2) {
    "use strict";
    var enhanceError = require_enhanceError();
    module2.exports = function createError(message, config, code, request, response) {
      var error = new Error(message);
      return enhanceError(error, config, code, request, response);
    };
  }
});

// node_modules/axios/lib/core/settle.js
var require_settle = __commonJS({
  "node_modules/axios/lib/core/settle.js"(exports2, module2) {
    "use strict";
    var createError = require_createError();
    module2.exports = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(createError(
          "Request failed with status code " + response.status,
          response.config,
          null,
          response.request,
          response
        ));
      }
    };
  }
});

// node_modules/axios/lib/helpers/cookies.js
var require_cookies = __commonJS({
  "node_modules/axios/lib/helpers/cookies.js"(exports2, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = utils.isStandardBrowserEnv() ? (
      // Standard browser envs support document.cookie
      /* @__PURE__ */ function standardBrowserEnv() {
        return {
          write: function write(name, value, expires, path, domain, secure) {
            var cookie = [];
            cookie.push(name + "=" + encodeURIComponent(value));
            if (utils.isNumber(expires)) {
              cookie.push("expires=" + new Date(expires).toGMTString());
            }
            if (utils.isString(path)) {
              cookie.push("path=" + path);
            }
            if (utils.isString(domain)) {
              cookie.push("domain=" + domain);
            }
            if (secure === true) {
              cookie.push("secure");
            }
            document.cookie = cookie.join("; ");
          },
          read: function read(name) {
            var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
            return match ? decodeURIComponent(match[3]) : null;
          },
          remove: function remove(name) {
            this.write(name, "", Date.now() - 864e5);
          }
        };
      }()
    ) : (
      // Non standard browser env (web workers, react-native) lack needed support.
      /* @__PURE__ */ function nonStandardBrowserEnv() {
        return {
          write: function write() {
          },
          read: function read() {
            return null;
          },
          remove: function remove() {
          }
        };
      }()
    );
  }
});

// node_modules/axios/lib/helpers/isAbsoluteURL.js
var require_isAbsoluteURL = __commonJS({
  "node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports2, module2) {
    "use strict";
    module2.exports = function isAbsoluteURL(url) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    };
  }
});

// node_modules/axios/lib/helpers/combineURLs.js
var require_combineURLs = __commonJS({
  "node_modules/axios/lib/helpers/combineURLs.js"(exports2, module2) {
    "use strict";
    module2.exports = function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    };
  }
});

// node_modules/axios/lib/core/buildFullPath.js
var require_buildFullPath = __commonJS({
  "node_modules/axios/lib/core/buildFullPath.js"(exports2, module2) {
    "use strict";
    var isAbsoluteURL = require_isAbsoluteURL();
    var combineURLs = require_combineURLs();
    module2.exports = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };
  }
});

// node_modules/axios/lib/helpers/parseHeaders.js
var require_parseHeaders = __commonJS({
  "node_modules/axios/lib/helpers/parseHeaders.js"(exports2, module2) {
    "use strict";
    var utils = require_utils();
    var ignoreDuplicateOf = [
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ];
    module2.exports = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;
      if (!headers) {
        return parsed;
      }
      utils.forEach(headers.split("\n"), function parser(line) {
        i = line.indexOf(":");
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === "set-cookie") {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
          }
        }
      });
      return parsed;
    };
  }
});

// node_modules/axios/lib/helpers/isURLSameOrigin.js
var require_isURLSameOrigin = __commonJS({
  "node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports2, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = utils.isStandardBrowserEnv() ? (
      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
      function standardBrowserEnv() {
        var msie = /(msie|trident)/i.test(navigator.userAgent);
        var urlParsingNode = document.createElement("a");
        var originURL;
        function resolveURL(url) {
          var href = url;
          if (msie) {
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
          }
          urlParsingNode.setAttribute("href", href);
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
          };
        }
        originURL = resolveURL(window.location.href);
        return function isURLSameOrigin(requestURL) {
          var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
          return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
        };
      }()
    ) : (
      // Non standard browser envs (web workers, react-native) lack needed support.
      /* @__PURE__ */ function nonStandardBrowserEnv() {
        return function isURLSameOrigin() {
          return true;
        };
      }()
    );
  }
});

// node_modules/axios/lib/cancel/Cancel.js
var require_Cancel = __commonJS({
  "node_modules/axios/lib/cancel/Cancel.js"(exports2, module2) {
    "use strict";
    function Cancel(message) {
      this.message = message;
    }
    Cancel.prototype.toString = function toString() {
      return "Cancel" + (this.message ? ": " + this.message : "");
    };
    Cancel.prototype.__CANCEL__ = true;
    module2.exports = Cancel;
  }
});

// node_modules/axios/lib/adapters/xhr.js
var require_xhr = __commonJS({
  "node_modules/axios/lib/adapters/xhr.js"(exports2, module2) {
    "use strict";
    var utils = require_utils();
    var settle = require_settle();
    var cookies = require_cookies();
    var buildURL = require_buildURL();
    var buildFullPath = require_buildFullPath();
    var parseHeaders = require_parseHeaders();
    var isURLSameOrigin = require_isURLSameOrigin();
    var createError = require_createError();
    var transitionalDefaults = require_transitional();
    var Cancel = require_Cancel();
    module2.exports = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }
          if (config.signal) {
            config.signal.removeEventListener("abort", onCanceled);
          }
        }
        if (utils.isFormData(requestData)) {
          delete requestHeaders["Content-Type"];
        }
        var request = new XMLHttpRequest();
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(createError("Request aborted", config, "ECONNABORTED", request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(createError("Network Error", config, null, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
          var transitional = config.transitional || transitionalDefaults;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(createError(
            timeoutErrorMessage,
            config,
            transitional.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED",
            request
          ));
          request = null;
        };
        if (utils.isStandardBrowserEnv()) {
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }
        if ("setRequestHeader" in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
              delete requestHeaders[key];
            } else {
              request.setRequestHeader(key, val);
            }
          });
        }
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = config.responseType;
        }
        if (typeof config.onDownloadProgress === "function") {
          request.addEventListener("progress", config.onDownloadProgress);
        }
        if (typeof config.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", config.onUploadProgress);
        }
        if (config.cancelToken || config.signal) {
          onCanceled = function(cancel) {
            if (!request) {
              return;
            }
            reject(!cancel || cancel && cancel.type ? new Cancel("canceled") : cancel);
            request.abort();
            request = null;
          };
          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
          }
        }
        if (!requestData) {
          requestData = null;
        }
        request.send(requestData);
      });
    };
  }
});

// node_modules/ms/index.js
var require_ms = __commonJS({
  "node_modules/ms/index.js"(exports2, module2) {
    var s = 1e3;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    module2.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse(val);
      } else if (type === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + "d";
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + "h";
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + "m";
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, "hour");
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, "minute");
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// node_modules/debug/src/common.js
var require_common = __commonJS({
  "node_modules/debug/src/common.js"(exports2, module2) {
    function setup(env) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = require_ms();
      createDebug.destroy = destroy;
      Object.keys(env).forEach((key) => {
        createDebug[key] = env[key];
      });
      createDebug.names = [];
      createDebug.skips = [];
      createDebug.formatters = {};
      function selectColor(namespace) {
        let hash = 0;
        for (let i = 0; i < namespace.length; i++) {
          hash = (hash << 5) - hash + namespace.charCodeAt(i);
          hash |= 0;
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug(...args) {
          if (!debug.enabled) {
            return;
          }
          const self = debug;
          const curr = Number(/* @__PURE__ */ new Date());
          const ms = curr - (prevTime || curr);
          self.diff = ms;
          self.prev = prevTime;
          self.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);
          if (typeof args[0] !== "string") {
            args.unshift("%O");
          }
          let index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
            if (match === "%%") {
              return "%";
            }
            index++;
            const formatter = createDebug.formatters[format];
            if (typeof formatter === "function") {
              const val = args[index];
              match = formatter.call(self, val);
              args.splice(index, 1);
              index--;
            }
            return match;
          });
          createDebug.formatArgs.call(self, args);
          const logFn = self.log || createDebug.log;
          logFn.apply(self, args);
        }
        debug.namespace = namespace;
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(namespace);
        debug.extend = extend;
        debug.destroy = createDebug.destroy;
        Object.defineProperty(debug, "enabled", {
          enumerable: true,
          configurable: false,
          get: () => {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug.namespaces) {
              namespacesCache = createDebug.namespaces;
              enabledCache = createDebug.enabled(namespace);
            }
            return enabledCache;
          },
          set: (v) => {
            enableOverride = v;
          }
        });
        if (typeof createDebug.init === "function") {
          createDebug.init(debug);
        }
        return debug;
      }
      function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        let i;
        const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
        const len = split.length;
        for (i = 0; i < len; i++) {
          if (!split[i]) {
            continue;
          }
          namespaces = split[i].replace(/\*/g, ".*?");
          if (namespaces[0] === "-") {
            createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
          } else {
            createDebug.names.push(new RegExp("^" + namespaces + "$"));
          }
        }
      }
      function disable() {
        const namespaces = [
          ...createDebug.names.map(toNamespace),
          ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
      }
      function enabled(name) {
        if (name[name.length - 1] === "*") {
          return true;
        }
        let i;
        let len;
        for (i = 0, len = createDebug.skips.length; i < len; i++) {
          if (createDebug.skips[i].test(name)) {
            return false;
          }
        }
        for (i = 0, len = createDebug.names.length; i < len; i++) {
          if (createDebug.names[i].test(name)) {
            return true;
          }
        }
        return false;
      }
      function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function coerce(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }
      function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      createDebug.enable(createDebug.load());
      return createDebug;
    }
    module2.exports = setup;
  }
});

// node_modules/debug/src/browser.js
var require_browser = __commonJS({
  "node_modules/debug/src/browser.js"(exports2, module2) {
    exports2.formatArgs = formatArgs;
    exports2.save = save;
    exports2.load = load;
    exports2.useColors = useColors;
    exports2.storage = localstorage();
    exports2.destroy = /* @__PURE__ */ (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports2.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      let m;
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m[1], 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module2.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      let index = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        if (match === "%%") {
          return;
        }
        index++;
        if (match === "%c") {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    exports2.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports2.storage.setItem("debug", namespaces);
        } else {
          exports2.storage.removeItem("debug");
        }
      } catch (error) {
      }
    }
    function load() {
      let r;
      try {
        r = exports2.storage.getItem("debug");
      } catch (error) {
      }
      if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error) {
      }
    }
    module2.exports = require_common()(exports2);
    var { formatters } = module2.exports;
    formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
      }
    };
  }
});

// node_modules/has-flag/index.js
var require_has_flag = __commonJS({
  "node_modules/has-flag/index.js"(exports2, module2) {
    "use strict";
    module2.exports = (flag, argv = process.argv) => {
      const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
      const position = argv.indexOf(prefix + flag);
      const terminatorPosition = argv.indexOf("--");
      return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
    };
  }
});

// node_modules/supports-color/index.js
var require_supports_color = __commonJS({
  "node_modules/supports-color/index.js"(exports2, module2) {
    "use strict";
    var os = require("os");
    var tty = require("tty");
    var hasFlag = require_has_flag();
    var { env } = process;
    var flagForceColor;
    if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never")) {
      flagForceColor = 0;
    } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
      flagForceColor = 1;
    }
    function envForceColor() {
      if ("FORCE_COLOR" in env) {
        if (env.FORCE_COLOR === "true") {
          return 1;
        }
        if (env.FORCE_COLOR === "false") {
          return 0;
        }
        return env.FORCE_COLOR.length === 0 ? 1 : Math.min(Number.parseInt(env.FORCE_COLOR, 10), 3);
      }
    }
    function translateLevel(level) {
      if (level === 0) {
        return false;
      }
      return {
        level,
        hasBasic: true,
        has256: level >= 2,
        has16m: level >= 3
      };
    }
    function supportsColor(haveStream, { streamIsTTY, sniffFlags = true } = {}) {
      const noFlagForceColor = envForceColor();
      if (noFlagForceColor !== void 0) {
        flagForceColor = noFlagForceColor;
      }
      const forceColor = sniffFlags ? flagForceColor : noFlagForceColor;
      if (forceColor === 0) {
        return 0;
      }
      if (sniffFlags) {
        if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
          return 3;
        }
        if (hasFlag("color=256")) {
          return 2;
        }
      }
      if (haveStream && !streamIsTTY && forceColor === void 0) {
        return 0;
      }
      const min = forceColor || 0;
      if (env.TERM === "dumb") {
        return min;
      }
      if (process.platform === "win32") {
        const osRelease = os.release().split(".");
        if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
          return Number(osRelease[2]) >= 14931 ? 3 : 2;
        }
        return 1;
      }
      if ("CI" in env) {
        if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE", "DRONE"].some((sign) => sign in env) || env.CI_NAME === "codeship") {
          return 1;
        }
        return min;
      }
      if ("TEAMCITY_VERSION" in env) {
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
      }
      if (env.COLORTERM === "truecolor") {
        return 3;
      }
      if ("TERM_PROGRAM" in env) {
        const version = Number.parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (env.TERM_PROGRAM) {
          case "iTerm.app":
            return version >= 3 ? 3 : 2;
          case "Apple_Terminal":
            return 2;
        }
      }
      if (/-256(color)?$/i.test(env.TERM)) {
        return 2;
      }
      if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
        return 1;
      }
      if ("COLORTERM" in env) {
        return 1;
      }
      return min;
    }
    function getSupportLevel(stream, options = {}) {
      const level = supportsColor(stream, {
        streamIsTTY: stream && stream.isTTY,
        ...options
      });
      return translateLevel(level);
    }
    module2.exports = {
      supportsColor: getSupportLevel,
      stdout: getSupportLevel({ isTTY: tty.isatty(1) }),
      stderr: getSupportLevel({ isTTY: tty.isatty(2) })
    };
  }
});

// node_modules/debug/src/node.js
var require_node = __commonJS({
  "node_modules/debug/src/node.js"(exports2, module2) {
    var tty = require("tty");
    var util = require("util");
    exports2.init = init;
    exports2.log = log;
    exports2.formatArgs = formatArgs;
    exports2.save = save;
    exports2.load = load;
    exports2.useColors = useColors;
    exports2.destroy = util.deprecate(
      () => {
      },
      "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
    );
    exports2.colors = [6, 2, 3, 4, 5, 1];
    try {
      const supportsColor = require_supports_color();
      if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
        exports2.colors = [
          20,
          21,
          26,
          27,
          32,
          33,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          56,
          57,
          62,
          63,
          68,
          69,
          74,
          75,
          76,
          77,
          78,
          79,
          80,
          81,
          92,
          93,
          98,
          99,
          112,
          113,
          128,
          129,
          134,
          135,
          148,
          149,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          178,
          179,
          184,
          185,
          196,
          197,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          209,
          214,
          215,
          220,
          221
        ];
      }
    } catch (error) {
    }
    exports2.inspectOpts = Object.keys(process.env).filter((key) => {
      return /^debug_/i.test(key);
    }).reduce((obj, key) => {
      const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => {
        return k.toUpperCase();
      });
      let val = process.env[key];
      if (/^(yes|on|true|enabled)$/i.test(val)) {
        val = true;
      } else if (/^(no|off|false|disabled)$/i.test(val)) {
        val = false;
      } else if (val === "null") {
        val = null;
      } else {
        val = Number(val);
      }
      obj[prop] = val;
      return obj;
    }, {});
    function useColors() {
      return "colors" in exports2.inspectOpts ? Boolean(exports2.inspectOpts.colors) : tty.isatty(process.stderr.fd);
    }
    function formatArgs(args) {
      const { namespace: name, useColors: useColors2 } = this;
      if (useColors2) {
        const c = this.color;
        const colorCode = "\x1B[3" + (c < 8 ? c : "8;5;" + c);
        const prefix = `  ${colorCode};1m${name} \x1B[0m`;
        args[0] = prefix + args[0].split("\n").join("\n" + prefix);
        args.push(colorCode + "m+" + module2.exports.humanize(this.diff) + "\x1B[0m");
      } else {
        args[0] = getDate() + name + " " + args[0];
      }
    }
    function getDate() {
      if (exports2.inspectOpts.hideDate) {
        return "";
      }
      return (/* @__PURE__ */ new Date()).toISOString() + " ";
    }
    function log(...args) {
      return process.stderr.write(util.formatWithOptions(exports2.inspectOpts, ...args) + "\n");
    }
    function save(namespaces) {
      if (namespaces) {
        process.env.DEBUG = namespaces;
      } else {
        delete process.env.DEBUG;
      }
    }
    function load() {
      return process.env.DEBUG;
    }
    function init(debug) {
      debug.inspectOpts = {};
      const keys = Object.keys(exports2.inspectOpts);
      for (let i = 0; i < keys.length; i++) {
        debug.inspectOpts[keys[i]] = exports2.inspectOpts[keys[i]];
      }
    }
    module2.exports = require_common()(exports2);
    var { formatters } = module2.exports;
    formatters.o = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts).split("\n").map((str) => str.trim()).join(" ");
    };
    formatters.O = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts);
    };
  }
});

// node_modules/debug/src/index.js
var require_src = __commonJS({
  "node_modules/debug/src/index.js"(exports2, module2) {
    if (typeof process === "undefined" || process.type === "renderer" || process.browser === true || process.__nwjs) {
      module2.exports = require_browser();
    } else {
      module2.exports = require_node();
    }
  }
});

// node_modules/follow-redirects/debug.js
var require_debug = __commonJS({
  "node_modules/follow-redirects/debug.js"(exports2, module2) {
    var debug;
    module2.exports = function() {
      if (!debug) {
        try {
          debug = require_src()("follow-redirects");
        } catch (error) {
        }
        if (typeof debug !== "function") {
          debug = function() {
          };
        }
      }
      debug.apply(null, arguments);
    };
  }
});

// node_modules/follow-redirects/index.js
var require_follow_redirects = __commonJS({
  "node_modules/follow-redirects/index.js"(exports2, module2) {
    var url = require("url");
    var URL = url.URL;
    var http = require("http");
    var https = require("https");
    var Writable = require("stream").Writable;
    var assert = require("assert");
    var debug = require_debug();
    (function detectUnsupportedEnvironment() {
      var looksLikeNode = typeof process !== "undefined";
      var looksLikeBrowser = typeof window !== "undefined" && typeof document !== "undefined";
      var looksLikeV8 = isFunction(Error.captureStackTrace);
      if (!looksLikeNode && (looksLikeBrowser || !looksLikeV8)) {
        console.warn("The follow-redirects package should be excluded from browser builds.");
      }
    })();
    var useNativeURL = false;
    try {
      assert(new URL(""));
    } catch (error) {
      useNativeURL = error.code === "ERR_INVALID_URL";
    }
    var preservedUrlFields = [
      "auth",
      "host",
      "hostname",
      "href",
      "path",
      "pathname",
      "port",
      "protocol",
      "query",
      "search",
      "hash"
    ];
    var events = ["abort", "aborted", "connect", "error", "socket", "timeout"];
    var eventHandlers = /* @__PURE__ */ Object.create(null);
    events.forEach(function(event) {
      eventHandlers[event] = function(arg1, arg2, arg3) {
        this._redirectable.emit(event, arg1, arg2, arg3);
      };
    });
    var InvalidUrlError = createErrorType(
      "ERR_INVALID_URL",
      "Invalid URL",
      TypeError
    );
    var RedirectionError = createErrorType(
      "ERR_FR_REDIRECTION_FAILURE",
      "Redirected request failed"
    );
    var TooManyRedirectsError = createErrorType(
      "ERR_FR_TOO_MANY_REDIRECTS",
      "Maximum number of redirects exceeded",
      RedirectionError
    );
    var MaxBodyLengthExceededError = createErrorType(
      "ERR_FR_MAX_BODY_LENGTH_EXCEEDED",
      "Request body larger than maxBodyLength limit"
    );
    var WriteAfterEndError = createErrorType(
      "ERR_STREAM_WRITE_AFTER_END",
      "write after end"
    );
    var destroy = Writable.prototype.destroy || noop;
    function RedirectableRequest(options, responseCallback) {
      Writable.call(this);
      this._sanitizeOptions(options);
      this._options = options;
      this._ended = false;
      this._ending = false;
      this._redirectCount = 0;
      this._redirects = [];
      this._requestBodyLength = 0;
      this._requestBodyBuffers = [];
      if (responseCallback) {
        this.on("response", responseCallback);
      }
      var self = this;
      this._onNativeResponse = function(response) {
        try {
          self._processResponse(response);
        } catch (cause) {
          self.emit("error", cause instanceof RedirectionError ? cause : new RedirectionError({ cause }));
        }
      };
      this._performRequest();
    }
    RedirectableRequest.prototype = Object.create(Writable.prototype);
    RedirectableRequest.prototype.abort = function() {
      destroyRequest(this._currentRequest);
      this._currentRequest.abort();
      this.emit("abort");
    };
    RedirectableRequest.prototype.destroy = function(error) {
      destroyRequest(this._currentRequest, error);
      destroy.call(this, error);
      return this;
    };
    RedirectableRequest.prototype.write = function(data, encoding, callback) {
      if (this._ending) {
        throw new WriteAfterEndError();
      }
      if (!isString(data) && !isBuffer(data)) {
        throw new TypeError("data should be a string, Buffer or Uint8Array");
      }
      if (isFunction(encoding)) {
        callback = encoding;
        encoding = null;
      }
      if (data.length === 0) {
        if (callback) {
          callback();
        }
        return;
      }
      if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
        this._requestBodyLength += data.length;
        this._requestBodyBuffers.push({ data, encoding });
        this._currentRequest.write(data, encoding, callback);
      } else {
        this.emit("error", new MaxBodyLengthExceededError());
        this.abort();
      }
    };
    RedirectableRequest.prototype.end = function(data, encoding, callback) {
      if (isFunction(data)) {
        callback = data;
        data = encoding = null;
      } else if (isFunction(encoding)) {
        callback = encoding;
        encoding = null;
      }
      if (!data) {
        this._ended = this._ending = true;
        this._currentRequest.end(null, null, callback);
      } else {
        var self = this;
        var currentRequest = this._currentRequest;
        this.write(data, encoding, function() {
          self._ended = true;
          currentRequest.end(null, null, callback);
        });
        this._ending = true;
      }
    };
    RedirectableRequest.prototype.setHeader = function(name, value) {
      this._options.headers[name] = value;
      this._currentRequest.setHeader(name, value);
    };
    RedirectableRequest.prototype.removeHeader = function(name) {
      delete this._options.headers[name];
      this._currentRequest.removeHeader(name);
    };
    RedirectableRequest.prototype.setTimeout = function(msecs, callback) {
      var self = this;
      function destroyOnTimeout(socket) {
        socket.setTimeout(msecs);
        socket.removeListener("timeout", socket.destroy);
        socket.addListener("timeout", socket.destroy);
      }
      function startTimer(socket) {
        if (self._timeout) {
          clearTimeout(self._timeout);
        }
        self._timeout = setTimeout(function() {
          self.emit("timeout");
          clearTimer();
        }, msecs);
        destroyOnTimeout(socket);
      }
      function clearTimer() {
        if (self._timeout) {
          clearTimeout(self._timeout);
          self._timeout = null;
        }
        self.removeListener("abort", clearTimer);
        self.removeListener("error", clearTimer);
        self.removeListener("response", clearTimer);
        self.removeListener("close", clearTimer);
        if (callback) {
          self.removeListener("timeout", callback);
        }
        if (!self.socket) {
          self._currentRequest.removeListener("socket", startTimer);
        }
      }
      if (callback) {
        this.on("timeout", callback);
      }
      if (this.socket) {
        startTimer(this.socket);
      } else {
        this._currentRequest.once("socket", startTimer);
      }
      this.on("socket", destroyOnTimeout);
      this.on("abort", clearTimer);
      this.on("error", clearTimer);
      this.on("response", clearTimer);
      this.on("close", clearTimer);
      return this;
    };
    [
      "flushHeaders",
      "getHeader",
      "setNoDelay",
      "setSocketKeepAlive"
    ].forEach(function(method) {
      RedirectableRequest.prototype[method] = function(a, b) {
        return this._currentRequest[method](a, b);
      };
    });
    ["aborted", "connection", "socket"].forEach(function(property) {
      Object.defineProperty(RedirectableRequest.prototype, property, {
        get: function() {
          return this._currentRequest[property];
        }
      });
    });
    RedirectableRequest.prototype._sanitizeOptions = function(options) {
      if (!options.headers) {
        options.headers = {};
      }
      if (options.host) {
        if (!options.hostname) {
          options.hostname = options.host;
        }
        delete options.host;
      }
      if (!options.pathname && options.path) {
        var searchPos = options.path.indexOf("?");
        if (searchPos < 0) {
          options.pathname = options.path;
        } else {
          options.pathname = options.path.substring(0, searchPos);
          options.search = options.path.substring(searchPos);
        }
      }
    };
    RedirectableRequest.prototype._performRequest = function() {
      var protocol = this._options.protocol;
      var nativeProtocol = this._options.nativeProtocols[protocol];
      if (!nativeProtocol) {
        throw new TypeError("Unsupported protocol " + protocol);
      }
      if (this._options.agents) {
        var scheme = protocol.slice(0, -1);
        this._options.agent = this._options.agents[scheme];
      }
      var request = this._currentRequest = nativeProtocol.request(this._options, this._onNativeResponse);
      request._redirectable = this;
      for (var event of events) {
        request.on(event, eventHandlers[event]);
      }
      this._currentUrl = /^\//.test(this._options.path) ? url.format(this._options) : (
        // When making a request to a proxy, […]
        // a client MUST send the target URI in absolute-form […].
        this._options.path
      );
      if (this._isRedirect) {
        var i = 0;
        var self = this;
        var buffers = this._requestBodyBuffers;
        (function writeNext(error) {
          if (request === self._currentRequest) {
            if (error) {
              self.emit("error", error);
            } else if (i < buffers.length) {
              var buffer = buffers[i++];
              if (!request.finished) {
                request.write(buffer.data, buffer.encoding, writeNext);
              }
            } else if (self._ended) {
              request.end();
            }
          }
        })();
      }
    };
    RedirectableRequest.prototype._processResponse = function(response) {
      var statusCode = response.statusCode;
      if (this._options.trackRedirects) {
        this._redirects.push({
          url: this._currentUrl,
          headers: response.headers,
          statusCode
        });
      }
      var location = response.headers.location;
      if (!location || this._options.followRedirects === false || statusCode < 300 || statusCode >= 400) {
        response.responseUrl = this._currentUrl;
        response.redirects = this._redirects;
        this.emit("response", response);
        this._requestBodyBuffers = [];
        return;
      }
      destroyRequest(this._currentRequest);
      response.destroy();
      if (++this._redirectCount > this._options.maxRedirects) {
        throw new TooManyRedirectsError();
      }
      var requestHeaders;
      var beforeRedirect = this._options.beforeRedirect;
      if (beforeRedirect) {
        requestHeaders = Object.assign({
          // The Host header was set by nativeProtocol.request
          Host: response.req.getHeader("host")
        }, this._options.headers);
      }
      var method = this._options.method;
      if ((statusCode === 301 || statusCode === 302) && this._options.method === "POST" || // RFC7231§6.4.4: The 303 (See Other) status code indicates that
      // the server is redirecting the user agent to a different resource […]
      // A user agent can perform a retrieval request targeting that URI
      // (a GET or HEAD request if using HTTP) […]
      statusCode === 303 && !/^(?:GET|HEAD)$/.test(this._options.method)) {
        this._options.method = "GET";
        this._requestBodyBuffers = [];
        removeMatchingHeaders(/^content-/i, this._options.headers);
      }
      var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);
      var currentUrlParts = parseUrl(this._currentUrl);
      var currentHost = currentHostHeader || currentUrlParts.host;
      var currentUrl = /^\w+:/.test(location) ? this._currentUrl : url.format(Object.assign(currentUrlParts, { host: currentHost }));
      var redirectUrl = resolveUrl(location, currentUrl);
      debug("redirecting to", redirectUrl.href);
      this._isRedirect = true;
      spreadUrlObject(redirectUrl, this._options);
      if (redirectUrl.protocol !== currentUrlParts.protocol && redirectUrl.protocol !== "https:" || redirectUrl.host !== currentHost && !isSubdomain(redirectUrl.host, currentHost)) {
        removeMatchingHeaders(/^(?:(?:proxy-)?authorization|cookie)$/i, this._options.headers);
      }
      if (isFunction(beforeRedirect)) {
        var responseDetails = {
          headers: response.headers,
          statusCode
        };
        var requestDetails = {
          url: currentUrl,
          method,
          headers: requestHeaders
        };
        beforeRedirect(this._options, responseDetails, requestDetails);
        this._sanitizeOptions(this._options);
      }
      this._performRequest();
    };
    function wrap(protocols) {
      var exports3 = {
        maxRedirects: 21,
        maxBodyLength: 10 * 1024 * 1024
      };
      var nativeProtocols = {};
      Object.keys(protocols).forEach(function(scheme) {
        var protocol = scheme + ":";
        var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
        var wrappedProtocol = exports3[scheme] = Object.create(nativeProtocol);
        function request(input, options, callback) {
          if (isURL(input)) {
            input = spreadUrlObject(input);
          } else if (isString(input)) {
            input = spreadUrlObject(parseUrl(input));
          } else {
            callback = options;
            options = validateUrl(input);
            input = { protocol };
          }
          if (isFunction(options)) {
            callback = options;
            options = null;
          }
          options = Object.assign({
            maxRedirects: exports3.maxRedirects,
            maxBodyLength: exports3.maxBodyLength
          }, input, options);
          options.nativeProtocols = nativeProtocols;
          if (!isString(options.host) && !isString(options.hostname)) {
            options.hostname = "::1";
          }
          assert.equal(options.protocol, protocol, "protocol mismatch");
          debug("options", options);
          return new RedirectableRequest(options, callback);
        }
        function get(input, options, callback) {
          var wrappedRequest = wrappedProtocol.request(input, options, callback);
          wrappedRequest.end();
          return wrappedRequest;
        }
        Object.defineProperties(wrappedProtocol, {
          request: { value: request, configurable: true, enumerable: true, writable: true },
          get: { value: get, configurable: true, enumerable: true, writable: true }
        });
      });
      return exports3;
    }
    function noop() {
    }
    function parseUrl(input) {
      var parsed;
      if (useNativeURL) {
        parsed = new URL(input);
      } else {
        parsed = validateUrl(url.parse(input));
        if (!isString(parsed.protocol)) {
          throw new InvalidUrlError({ input });
        }
      }
      return parsed;
    }
    function resolveUrl(relative, base) {
      return useNativeURL ? new URL(relative, base) : parseUrl(url.resolve(base, relative));
    }
    function validateUrl(input) {
      if (/^\[/.test(input.hostname) && !/^\[[:0-9a-f]+\]$/i.test(input.hostname)) {
        throw new InvalidUrlError({ input: input.href || input });
      }
      if (/^\[/.test(input.host) && !/^\[[:0-9a-f]+\](:\d+)?$/i.test(input.host)) {
        throw new InvalidUrlError({ input: input.href || input });
      }
      return input;
    }
    function spreadUrlObject(urlObject, target) {
      var spread = target || {};
      for (var key of preservedUrlFields) {
        spread[key] = urlObject[key];
      }
      if (spread.hostname.startsWith("[")) {
        spread.hostname = spread.hostname.slice(1, -1);
      }
      if (spread.port !== "") {
        spread.port = Number(spread.port);
      }
      spread.path = spread.search ? spread.pathname + spread.search : spread.pathname;
      return spread;
    }
    function removeMatchingHeaders(regex, headers) {
      var lastValue;
      for (var header in headers) {
        if (regex.test(header)) {
          lastValue = headers[header];
          delete headers[header];
        }
      }
      return lastValue === null || typeof lastValue === "undefined" ? void 0 : String(lastValue).trim();
    }
    function createErrorType(code, message, baseClass) {
      function CustomError(properties) {
        if (isFunction(Error.captureStackTrace)) {
          Error.captureStackTrace(this, this.constructor);
        }
        Object.assign(this, properties || {});
        this.code = code;
        this.message = this.cause ? message + ": " + this.cause.message : message;
      }
      CustomError.prototype = new (baseClass || Error)();
      Object.defineProperties(CustomError.prototype, {
        constructor: {
          value: CustomError,
          enumerable: false
        },
        name: {
          value: "Error [" + code + "]",
          enumerable: false
        }
      });
      return CustomError;
    }
    function destroyRequest(request, error) {
      for (var event of events) {
        request.removeListener(event, eventHandlers[event]);
      }
      request.on("error", noop);
      request.destroy(error);
    }
    function isSubdomain(subdomain, domain) {
      assert(isString(subdomain) && isString(domain));
      var dot = subdomain.length - domain.length - 1;
      return dot > 0 && subdomain[dot] === "." && subdomain.endsWith(domain);
    }
    function isString(value) {
      return typeof value === "string" || value instanceof String;
    }
    function isFunction(value) {
      return typeof value === "function";
    }
    function isBuffer(value) {
      return typeof value === "object" && "length" in value;
    }
    function isURL(value) {
      return URL && value instanceof URL;
    }
    module2.exports = wrap({ http, https });
    module2.exports.wrap = wrap;
  }
});

// node_modules/axios/lib/env/data.js
var require_data = __commonJS({
  "node_modules/axios/lib/env/data.js"(exports2, module2) {
    module2.exports = {
      "version": "0.26.1"
    };
  }
});

// node_modules/axios/lib/adapters/http.js
var require_http = __commonJS({
  "node_modules/axios/lib/adapters/http.js"(exports2, module2) {
    "use strict";
    var utils = require_utils();
    var settle = require_settle();
    var buildFullPath = require_buildFullPath();
    var buildURL = require_buildURL();
    var http = require("http");
    var https = require("https");
    var httpFollow = require_follow_redirects().http;
    var httpsFollow = require_follow_redirects().https;
    var url = require("url");
    var zlib = require("zlib");
    var VERSION = require_data().version;
    var createError = require_createError();
    var enhanceError = require_enhanceError();
    var transitionalDefaults = require_transitional();
    var Cancel = require_Cancel();
    var isHttps = /https:?/;
    function setProxy(options, proxy, location) {
      options.hostname = proxy.host;
      options.host = proxy.host;
      options.port = proxy.port;
      options.path = location;
      if (proxy.auth) {
        var base64 = Buffer.from(proxy.auth.username + ":" + proxy.auth.password, "utf8").toString("base64");
        options.headers["Proxy-Authorization"] = "Basic " + base64;
      }
      options.beforeRedirect = function beforeRedirect(redirection) {
        redirection.headers.host = redirection.host;
        setProxy(redirection, proxy, redirection.href);
      };
    }
    module2.exports = function httpAdapter(config) {
      return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {
        var onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }
          if (config.signal) {
            config.signal.removeEventListener("abort", onCanceled);
          }
        }
        var resolve = function resolve2(value) {
          done();
          resolvePromise(value);
        };
        var rejected = false;
        var reject = function reject2(value) {
          done();
          rejected = true;
          rejectPromise(value);
        };
        var data = config.data;
        var headers = config.headers;
        var headerNames = {};
        Object.keys(headers).forEach(function storeLowerName(name) {
          headerNames[name.toLowerCase()] = name;
        });
        if ("user-agent" in headerNames) {
          if (!headers[headerNames["user-agent"]]) {
            delete headers[headerNames["user-agent"]];
          }
        } else {
          headers["User-Agent"] = "axios/" + VERSION;
        }
        if (data && !utils.isStream(data)) {
          if (Buffer.isBuffer(data)) {
          } else if (utils.isArrayBuffer(data)) {
            data = Buffer.from(new Uint8Array(data));
          } else if (utils.isString(data)) {
            data = Buffer.from(data, "utf-8");
          } else {
            return reject(createError(
              "Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream",
              config
            ));
          }
          if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {
            return reject(createError("Request body larger than maxBodyLength limit", config));
          }
          if (!headerNames["content-length"]) {
            headers["Content-Length"] = data.length;
          }
        }
        var auth = void 0;
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password || "";
          auth = username + ":" + password;
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        var parsed = url.parse(fullPath);
        var protocol = parsed.protocol || "http:";
        if (!auth && parsed.auth) {
          var urlAuth = parsed.auth.split(":");
          var urlUsername = urlAuth[0] || "";
          var urlPassword = urlAuth[1] || "";
          auth = urlUsername + ":" + urlPassword;
        }
        if (auth && headerNames.authorization) {
          delete headers[headerNames.authorization];
        }
        var isHttpsRequest = isHttps.test(protocol);
        var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;
        try {
          buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\?/, "");
        } catch (err) {
          var customErr = new Error(err.message);
          customErr.config = config;
          customErr.url = config.url;
          customErr.exists = true;
          reject(customErr);
        }
        var options = {
          path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\?/, ""),
          method: config.method.toUpperCase(),
          headers,
          agent,
          agents: { http: config.httpAgent, https: config.httpsAgent },
          auth
        };
        if (config.socketPath) {
          options.socketPath = config.socketPath;
        } else {
          options.hostname = parsed.hostname;
          options.port = parsed.port;
        }
        var proxy = config.proxy;
        if (!proxy && proxy !== false) {
          var proxyEnv = protocol.slice(0, -1) + "_proxy";
          var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];
          if (proxyUrl) {
            var parsedProxyUrl = url.parse(proxyUrl);
            var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;
            var shouldProxy = true;
            if (noProxyEnv) {
              var noProxy = noProxyEnv.split(",").map(function trim(s) {
                return s.trim();
              });
              shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {
                if (!proxyElement) {
                  return false;
                }
                if (proxyElement === "*") {
                  return true;
                }
                if (proxyElement[0] === "." && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {
                  return true;
                }
                return parsed.hostname === proxyElement;
              });
            }
            if (shouldProxy) {
              proxy = {
                host: parsedProxyUrl.hostname,
                port: parsedProxyUrl.port,
                protocol: parsedProxyUrl.protocol
              };
              if (parsedProxyUrl.auth) {
                var proxyUrlAuth = parsedProxyUrl.auth.split(":");
                proxy.auth = {
                  username: proxyUrlAuth[0],
                  password: proxyUrlAuth[1]
                };
              }
            }
          }
        }
        if (proxy) {
          options.headers.host = parsed.hostname + (parsed.port ? ":" + parsed.port : "");
          setProxy(options, proxy, protocol + "//" + parsed.hostname + (parsed.port ? ":" + parsed.port : "") + options.path);
        }
        var transport;
        var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);
        if (config.transport) {
          transport = config.transport;
        } else if (config.maxRedirects === 0) {
          transport = isHttpsProxy ? https : http;
        } else {
          if (config.maxRedirects) {
            options.maxRedirects = config.maxRedirects;
          }
          transport = isHttpsProxy ? httpsFollow : httpFollow;
        }
        if (config.maxBodyLength > -1) {
          options.maxBodyLength = config.maxBodyLength;
        }
        if (config.insecureHTTPParser) {
          options.insecureHTTPParser = config.insecureHTTPParser;
        }
        var req = transport.request(options, function handleResponse(res) {
          if (req.aborted) return;
          var stream = res;
          var lastRequest = res.req || req;
          if (res.statusCode !== 204 && lastRequest.method !== "HEAD" && config.decompress !== false) {
            switch (res.headers["content-encoding"]) {
              /*eslint default-case:0*/
              case "gzip":
              case "compress":
              case "deflate":
                stream = stream.pipe(zlib.createUnzip());
                delete res.headers["content-encoding"];
                break;
            }
          }
          var response = {
            status: res.statusCode,
            statusText: res.statusMessage,
            headers: res.headers,
            config,
            request: lastRequest
          };
          if (config.responseType === "stream") {
            response.data = stream;
            settle(resolve, reject, response);
          } else {
            var responseBuffer = [];
            var totalResponseBytes = 0;
            stream.on("data", function handleStreamData(chunk) {
              responseBuffer.push(chunk);
              totalResponseBytes += chunk.length;
              if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {
                rejected = true;
                stream.destroy();
                reject(createError(
                  "maxContentLength size of " + config.maxContentLength + " exceeded",
                  config,
                  null,
                  lastRequest
                ));
              }
            });
            stream.on("aborted", function handlerStreamAborted() {
              if (rejected) {
                return;
              }
              stream.destroy();
              reject(createError("error request aborted", config, "ERR_REQUEST_ABORTED", lastRequest));
            });
            stream.on("error", function handleStreamError(err) {
              if (req.aborted) return;
              reject(enhanceError(err, config, null, lastRequest));
            });
            stream.on("end", function handleStreamEnd() {
              try {
                var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);
                if (config.responseType !== "arraybuffer") {
                  responseData = responseData.toString(config.responseEncoding);
                  if (!config.responseEncoding || config.responseEncoding === "utf8") {
                    responseData = utils.stripBOM(responseData);
                  }
                }
                response.data = responseData;
              } catch (err) {
                reject(enhanceError(err, config, err.code, response.request, response));
              }
              settle(resolve, reject, response);
            });
          }
        });
        req.on("error", function handleRequestError(err) {
          if (req.aborted && err.code !== "ERR_FR_TOO_MANY_REDIRECTS") return;
          reject(enhanceError(err, config, null, req));
        });
        req.on("socket", function handleRequestSocket(socket) {
          socket.setKeepAlive(true, 1e3 * 60);
        });
        if (config.timeout) {
          var timeout = parseInt(config.timeout, 10);
          if (isNaN(timeout)) {
            reject(createError(
              "error trying to parse `config.timeout` to int",
              config,
              "ERR_PARSE_TIMEOUT",
              req
            ));
            return;
          }
          req.setTimeout(timeout, function handleRequestTimeout() {
            req.abort();
            var timeoutErrorMessage = "";
            if (config.timeoutErrorMessage) {
              timeoutErrorMessage = config.timeoutErrorMessage;
            } else {
              timeoutErrorMessage = "timeout of " + config.timeout + "ms exceeded";
            }
            var transitional = config.transitional || transitionalDefaults;
            reject(createError(
              timeoutErrorMessage,
              config,
              transitional.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED",
              req
            ));
          });
        }
        if (config.cancelToken || config.signal) {
          onCanceled = function(cancel) {
            if (req.aborted) return;
            req.abort();
            reject(!cancel || cancel && cancel.type ? new Cancel("canceled") : cancel);
          };
          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
          }
        }
        if (utils.isStream(data)) {
          data.on("error", function handleStreamError(err) {
            reject(enhanceError(err, config, null, req));
          }).pipe(req);
        } else {
          req.end(data);
        }
      });
    };
  }
});

// node_modules/axios/lib/defaults/index.js
var require_defaults = __commonJS({
  "node_modules/axios/lib/defaults/index.js"(exports2, module2) {
    "use strict";
    var utils = require_utils();
    var normalizeHeaderName = require_normalizeHeaderName();
    var enhanceError = require_enhanceError();
    var transitionalDefaults = require_transitional();
    var DEFAULT_CONTENT_TYPE = {
      "Content-Type": "application/x-www-form-urlencoded"
    };
    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
        headers["Content-Type"] = value;
      }
    }
    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== "undefined") {
        adapter = require_xhr();
      } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
        adapter = require_http();
      }
      return adapter;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: transitionalDefaults,
      adapter: getDefaultAdapter(),
      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, "Accept");
        normalizeHeaderName(headers, "Content-Type");
        if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
          return data.toString();
        }
        if (utils.isObject(data) || headers && headers["Content-Type"] === "application/json") {
          setContentTypeIfUnset(headers, "application/json");
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        var transitional = this.transitional || defaults.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
        if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw enhanceError(e, this, "E_JSON_PARSE");
              }
              throw e;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*"
        }
      }
    };
    utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });
    module2.exports = defaults;
  }
});

// node_modules/axios/lib/core/transformData.js
var require_transformData = __commonJS({
  "node_modules/axios/lib/core/transformData.js"(exports2, module2) {
    "use strict";
    var utils = require_utils();
    var defaults = require_defaults();
    module2.exports = function transformData(data, headers, fns) {
      var context = this || defaults;
      utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
      });
      return data;
    };
  }
});

// node_modules/axios/lib/cancel/isCancel.js
var require_isCancel = __commonJS({
  "node_modules/axios/lib/cancel/isCancel.js"(exports2, module2) {
    "use strict";
    module2.exports = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };
  }
});

// node_modules/axios/lib/core/dispatchRequest.js
var require_dispatchRequest = __commonJS({
  "node_modules/axios/lib/core/dispatchRequest.js"(exports2, module2) {
    "use strict";
    var utils = require_utils();
    var transformData = require_transformData();
    var isCancel = require_isCancel();
    var defaults = require_defaults();
    var Cancel = require_Cancel();
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new Cancel("canceled");
      }
    }
    module2.exports = function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = config.headers || {};
      config.data = transformData.call(
        config,
        config.data,
        config.headers,
        config.transformRequest
      );
      config.headers = utils.merge(
        config.headers.common || {},
        config.headers[config.method] || {},
        config.headers
      );
      utils.forEach(
        ["delete", "get", "head", "post", "put", "patch", "common"],
        function cleanHeaderConfig(method) {
          delete config.headers[method];
        }
      );
      var adapter = config.adapter || defaults.adapter;
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(
          config,
          response.data,
          response.headers,
          config.transformResponse
        );
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              reason.response.data,
              reason.response.headers,
              config.transformResponse
            );
          }
        }
        return Promise.reject(reason);
      });
    };
  }
});

// node_modules/axios/lib/core/mergeConfig.js
var require_mergeConfig = __commonJS({
  "node_modules/axios/lib/core/mergeConfig.js"(exports2, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = function mergeConfig(config1, config2) {
      config2 = config2 || {};
      var config = {};
      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        }
      }
      function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function mergeDirectKeys(prop) {
        if (prop in config2) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      var mergeMap = {
        "url": valueFromConfig2,
        "method": valueFromConfig2,
        "data": valueFromConfig2,
        "baseURL": defaultToConfig2,
        "transformRequest": defaultToConfig2,
        "transformResponse": defaultToConfig2,
        "paramsSerializer": defaultToConfig2,
        "timeout": defaultToConfig2,
        "timeoutMessage": defaultToConfig2,
        "withCredentials": defaultToConfig2,
        "adapter": defaultToConfig2,
        "responseType": defaultToConfig2,
        "xsrfCookieName": defaultToConfig2,
        "xsrfHeaderName": defaultToConfig2,
        "onUploadProgress": defaultToConfig2,
        "onDownloadProgress": defaultToConfig2,
        "decompress": defaultToConfig2,
        "maxContentLength": defaultToConfig2,
        "maxBodyLength": defaultToConfig2,
        "transport": defaultToConfig2,
        "httpAgent": defaultToConfig2,
        "httpsAgent": defaultToConfig2,
        "cancelToken": defaultToConfig2,
        "socketPath": defaultToConfig2,
        "responseEncoding": defaultToConfig2,
        "validateStatus": mergeDirectKeys
      };
      utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    };
  }
});

// node_modules/axios/lib/helpers/validator.js
var require_validator = __commonJS({
  "node_modules/axios/lib/helpers/validator.js"(exports2, module2) {
    "use strict";
    var VERSION = require_data().version;
    var validators = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type, i) {
      validators[type] = function validator(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    validators.transitional = function transitional(validator, version, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return function(value, opt, opts) {
        if (validator === false) {
          throw new Error(formatMessage(opt, " has been removed" + (version ? " in " + version : "")));
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version + " and will be removed in the near future"
            )
          );
        }
        return validator ? validator(value, opt, opts) : true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new TypeError("options must be an object");
      }
      var keys = Object.keys(options);
      var i = keys.length;
      while (i-- > 0) {
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
          var value = options[opt];
          var result = value === void 0 || validator(value, opt, options);
          if (result !== true) {
            throw new TypeError("option " + opt + " must be " + result);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw Error("Unknown option " + opt);
        }
      }
    }
    module2.exports = {
      assertOptions,
      validators
    };
  }
});

// node_modules/axios/lib/core/Axios.js
var require_Axios = __commonJS({
  "node_modules/axios/lib/core/Axios.js"(exports2, module2) {
    "use strict";
    var utils = require_utils();
    var buildURL = require_buildURL();
    var InterceptorManager = require_InterceptorManager();
    var dispatchRequest = require_dispatchRequest();
    var mergeConfig = require_mergeConfig();
    var validator = require_validator();
    var validators = validator.validators;
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    Axios.prototype.request = function request(configOrUrl, config) {
      if (typeof configOrUrl === "string") {
        config = config || {};
        config.url = configOrUrl;
      } else {
        config = configOrUrl || {};
      }
      config = mergeConfig(this.defaults, config);
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = "get";
      }
      var transitional = config.transitional;
      if (transitional !== void 0) {
        validator.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean),
          forcedJSONParsing: validators.transitional(validators.boolean),
          clarifyTimeoutError: validators.transitional(validators.boolean)
        }, false);
      }
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
          return;
        }
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      var promise;
      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest, void 0];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }
        return promise;
      }
      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }
      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }
      return promise;
    };
    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
    };
    utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      Axios.prototype[method] = function(url, data, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data
        }));
      };
    });
    module2.exports = Axios;
  }
});

// node_modules/axios/lib/cancel/CancelToken.js
var require_CancelToken = __commonJS({
  "node_modules/axios/lib/cancel/CancelToken.js"(exports2, module2) {
    "use strict";
    var Cancel = require_Cancel();
    function CancelToken(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token = this;
      this.promise.then(function(cancel) {
        if (!token._listeners) return;
        var i;
        var l = token._listeners.length;
        for (i = 0; i < l; i++) {
          token._listeners[i](cancel);
        }
        token._listeners = null;
      });
      this.promise.then = function(onfulfilled) {
        var _resolve;
        var promise = new Promise(function(resolve) {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };
        return promise;
      };
      executor(function cancel(message) {
        if (token.reason) {
          return;
        }
        token.reason = new Cancel(message);
        resolvePromise(token.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    CancelToken.prototype.subscribe = function subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    };
    CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      var index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    };
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token,
        cancel
      };
    };
    module2.exports = CancelToken;
  }
});

// node_modules/axios/lib/helpers/spread.js
var require_spread = __commonJS({
  "node_modules/axios/lib/helpers/spread.js"(exports2, module2) {
    "use strict";
    module2.exports = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };
  }
});

// node_modules/axios/lib/helpers/isAxiosError.js
var require_isAxiosError = __commonJS({
  "node_modules/axios/lib/helpers/isAxiosError.js"(exports2, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = function isAxiosError(payload) {
      return utils.isObject(payload) && payload.isAxiosError === true;
    };
  }
});

// node_modules/axios/lib/axios.js
var require_axios = __commonJS({
  "node_modules/axios/lib/axios.js"(exports2, module2) {
    "use strict";
    var utils = require_utils();
    var bind = require_bind();
    var Axios = require_Axios();
    var mergeConfig = require_mergeConfig();
    var defaults = require_defaults();
    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context);
      utils.extend(instance, Axios.prototype, context);
      utils.extend(instance, context);
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios = createInstance(defaults);
    axios.Axios = Axios;
    axios.Cancel = require_Cancel();
    axios.CancelToken = require_CancelToken();
    axios.isCancel = require_isCancel();
    axios.VERSION = require_data().version;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = require_spread();
    axios.isAxiosError = require_isAxiosError();
    module2.exports = axios;
    module2.exports.default = axios;
  }
});

// node_modules/axios/index.js
var require_axios2 = __commonJS({
  "node_modules/axios/index.js"(exports2, module2) {
    module2.exports = require_axios();
  }
});

// node_modules/delayed-stream/lib/delayed_stream.js
var require_delayed_stream = __commonJS({
  "node_modules/delayed-stream/lib/delayed_stream.js"(exports2, module2) {
    var Stream = require("stream").Stream;
    var util = require("util");
    module2.exports = DelayedStream;
    function DelayedStream() {
      this.source = null;
      this.dataSize = 0;
      this.maxDataSize = 1024 * 1024;
      this.pauseStream = true;
      this._maxDataSizeExceeded = false;
      this._released = false;
      this._bufferedEvents = [];
    }
    util.inherits(DelayedStream, Stream);
    DelayedStream.create = function(source, options) {
      var delayedStream = new this();
      options = options || {};
      for (var option in options) {
        delayedStream[option] = options[option];
      }
      delayedStream.source = source;
      var realEmit = source.emit;
      source.emit = function() {
        delayedStream._handleEmit(arguments);
        return realEmit.apply(source, arguments);
      };
      source.on("error", function() {
      });
      if (delayedStream.pauseStream) {
        source.pause();
      }
      return delayedStream;
    };
    Object.defineProperty(DelayedStream.prototype, "readable", {
      configurable: true,
      enumerable: true,
      get: function() {
        return this.source.readable;
      }
    });
    DelayedStream.prototype.setEncoding = function() {
      return this.source.setEncoding.apply(this.source, arguments);
    };
    DelayedStream.prototype.resume = function() {
      if (!this._released) {
        this.release();
      }
      this.source.resume();
    };
    DelayedStream.prototype.pause = function() {
      this.source.pause();
    };
    DelayedStream.prototype.release = function() {
      this._released = true;
      this._bufferedEvents.forEach(function(args) {
        this.emit.apply(this, args);
      }.bind(this));
      this._bufferedEvents = [];
    };
    DelayedStream.prototype.pipe = function() {
      var r = Stream.prototype.pipe.apply(this, arguments);
      this.resume();
      return r;
    };
    DelayedStream.prototype._handleEmit = function(args) {
      if (this._released) {
        this.emit.apply(this, args);
        return;
      }
      if (args[0] === "data") {
        this.dataSize += args[1].length;
        this._checkIfMaxDataSizeExceeded();
      }
      this._bufferedEvents.push(args);
    };
    DelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {
      if (this._maxDataSizeExceeded) {
        return;
      }
      if (this.dataSize <= this.maxDataSize) {
        return;
      }
      this._maxDataSizeExceeded = true;
      var message = "DelayedStream#maxDataSize of " + this.maxDataSize + " bytes exceeded.";
      this.emit("error", new Error(message));
    };
  }
});

// node_modules/combined-stream/lib/combined_stream.js
var require_combined_stream = __commonJS({
  "node_modules/combined-stream/lib/combined_stream.js"(exports2, module2) {
    var util = require("util");
    var Stream = require("stream").Stream;
    var DelayedStream = require_delayed_stream();
    module2.exports = CombinedStream;
    function CombinedStream() {
      this.writable = false;
      this.readable = true;
      this.dataSize = 0;
      this.maxDataSize = 2 * 1024 * 1024;
      this.pauseStreams = true;
      this._released = false;
      this._streams = [];
      this._currentStream = null;
      this._insideLoop = false;
      this._pendingNext = false;
    }
    util.inherits(CombinedStream, Stream);
    CombinedStream.create = function(options) {
      var combinedStream = new this();
      options = options || {};
      for (var option in options) {
        combinedStream[option] = options[option];
      }
      return combinedStream;
    };
    CombinedStream.isStreamLike = function(stream) {
      return typeof stream !== "function" && typeof stream !== "string" && typeof stream !== "boolean" && typeof stream !== "number" && !Buffer.isBuffer(stream);
    };
    CombinedStream.prototype.append = function(stream) {
      var isStreamLike = CombinedStream.isStreamLike(stream);
      if (isStreamLike) {
        if (!(stream instanceof DelayedStream)) {
          var newStream = DelayedStream.create(stream, {
            maxDataSize: Infinity,
            pauseStream: this.pauseStreams
          });
          stream.on("data", this._checkDataSize.bind(this));
          stream = newStream;
        }
        this._handleErrors(stream);
        if (this.pauseStreams) {
          stream.pause();
        }
      }
      this._streams.push(stream);
      return this;
    };
    CombinedStream.prototype.pipe = function(dest, options) {
      Stream.prototype.pipe.call(this, dest, options);
      this.resume();
      return dest;
    };
    CombinedStream.prototype._getNext = function() {
      this._currentStream = null;
      if (this._insideLoop) {
        this._pendingNext = true;
        return;
      }
      this._insideLoop = true;
      try {
        do {
          this._pendingNext = false;
          this._realGetNext();
        } while (this._pendingNext);
      } finally {
        this._insideLoop = false;
      }
    };
    CombinedStream.prototype._realGetNext = function() {
      var stream = this._streams.shift();
      if (typeof stream == "undefined") {
        this.end();
        return;
      }
      if (typeof stream !== "function") {
        this._pipeNext(stream);
        return;
      }
      var getStream = stream;
      getStream(function(stream2) {
        var isStreamLike = CombinedStream.isStreamLike(stream2);
        if (isStreamLike) {
          stream2.on("data", this._checkDataSize.bind(this));
          this._handleErrors(stream2);
        }
        this._pipeNext(stream2);
      }.bind(this));
    };
    CombinedStream.prototype._pipeNext = function(stream) {
      this._currentStream = stream;
      var isStreamLike = CombinedStream.isStreamLike(stream);
      if (isStreamLike) {
        stream.on("end", this._getNext.bind(this));
        stream.pipe(this, { end: false });
        return;
      }
      var value = stream;
      this.write(value);
      this._getNext();
    };
    CombinedStream.prototype._handleErrors = function(stream) {
      var self = this;
      stream.on("error", function(err) {
        self._emitError(err);
      });
    };
    CombinedStream.prototype.write = function(data) {
      this.emit("data", data);
    };
    CombinedStream.prototype.pause = function() {
      if (!this.pauseStreams) {
        return;
      }
      if (this.pauseStreams && this._currentStream && typeof this._currentStream.pause == "function") this._currentStream.pause();
      this.emit("pause");
    };
    CombinedStream.prototype.resume = function() {
      if (!this._released) {
        this._released = true;
        this.writable = true;
        this._getNext();
      }
      if (this.pauseStreams && this._currentStream && typeof this._currentStream.resume == "function") this._currentStream.resume();
      this.emit("resume");
    };
    CombinedStream.prototype.end = function() {
      this._reset();
      this.emit("end");
    };
    CombinedStream.prototype.destroy = function() {
      this._reset();
      this.emit("close");
    };
    CombinedStream.prototype._reset = function() {
      this.writable = false;
      this._streams = [];
      this._currentStream = null;
    };
    CombinedStream.prototype._checkDataSize = function() {
      this._updateDataSize();
      if (this.dataSize <= this.maxDataSize) {
        return;
      }
      var message = "DelayedStream#maxDataSize of " + this.maxDataSize + " bytes exceeded.";
      this._emitError(new Error(message));
    };
    CombinedStream.prototype._updateDataSize = function() {
      this.dataSize = 0;
      var self = this;
      this._streams.forEach(function(stream) {
        if (!stream.dataSize) {
          return;
        }
        self.dataSize += stream.dataSize;
      });
      if (this._currentStream && this._currentStream.dataSize) {
        this.dataSize += this._currentStream.dataSize;
      }
    };
    CombinedStream.prototype._emitError = function(err) {
      this._reset();
      this.emit("error", err);
    };
  }
});

// node_modules/mime-db/db.json
var require_db = __commonJS({
  "node_modules/mime-db/db.json"(exports2, module2) {
    module2.exports = {
      "application/1d-interleaved-parityfec": {
        source: "iana"
      },
      "application/3gpdash-qoe-report+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/3gpp-ims+xml": {
        source: "iana",
        compressible: true
      },
      "application/3gpphal+json": {
        source: "iana",
        compressible: true
      },
      "application/3gpphalforms+json": {
        source: "iana",
        compressible: true
      },
      "application/a2l": {
        source: "iana"
      },
      "application/ace+cbor": {
        source: "iana"
      },
      "application/activemessage": {
        source: "iana"
      },
      "application/activity+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-costmap+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-costmapfilter+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-directory+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointcost+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointcostparams+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointprop+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointpropparams+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-error+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-networkmap+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-networkmapfilter+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-updatestreamcontrol+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-updatestreamparams+json": {
        source: "iana",
        compressible: true
      },
      "application/aml": {
        source: "iana"
      },
      "application/andrew-inset": {
        source: "iana",
        extensions: ["ez"]
      },
      "application/applefile": {
        source: "iana"
      },
      "application/applixware": {
        source: "apache",
        extensions: ["aw"]
      },
      "application/at+jwt": {
        source: "iana"
      },
      "application/atf": {
        source: "iana"
      },
      "application/atfx": {
        source: "iana"
      },
      "application/atom+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atom"]
      },
      "application/atomcat+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atomcat"]
      },
      "application/atomdeleted+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atomdeleted"]
      },
      "application/atomicmail": {
        source: "iana"
      },
      "application/atomsvc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atomsvc"]
      },
      "application/atsc-dwd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["dwd"]
      },
      "application/atsc-dynamic-event-message": {
        source: "iana"
      },
      "application/atsc-held+xml": {
        source: "iana",
        compressible: true,
        extensions: ["held"]
      },
      "application/atsc-rdt+json": {
        source: "iana",
        compressible: true
      },
      "application/atsc-rsat+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rsat"]
      },
      "application/atxml": {
        source: "iana"
      },
      "application/auth-policy+xml": {
        source: "iana",
        compressible: true
      },
      "application/bacnet-xdd+zip": {
        source: "iana",
        compressible: false
      },
      "application/batch-smtp": {
        source: "iana"
      },
      "application/bdoc": {
        compressible: false,
        extensions: ["bdoc"]
      },
      "application/beep+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/calendar+json": {
        source: "iana",
        compressible: true
      },
      "application/calendar+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xcs"]
      },
      "application/call-completion": {
        source: "iana"
      },
      "application/cals-1840": {
        source: "iana"
      },
      "application/captive+json": {
        source: "iana",
        compressible: true
      },
      "application/cbor": {
        source: "iana"
      },
      "application/cbor-seq": {
        source: "iana"
      },
      "application/cccex": {
        source: "iana"
      },
      "application/ccmp+xml": {
        source: "iana",
        compressible: true
      },
      "application/ccxml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ccxml"]
      },
      "application/cdfx+xml": {
        source: "iana",
        compressible: true,
        extensions: ["cdfx"]
      },
      "application/cdmi-capability": {
        source: "iana",
        extensions: ["cdmia"]
      },
      "application/cdmi-container": {
        source: "iana",
        extensions: ["cdmic"]
      },
      "application/cdmi-domain": {
        source: "iana",
        extensions: ["cdmid"]
      },
      "application/cdmi-object": {
        source: "iana",
        extensions: ["cdmio"]
      },
      "application/cdmi-queue": {
        source: "iana",
        extensions: ["cdmiq"]
      },
      "application/cdni": {
        source: "iana"
      },
      "application/cea": {
        source: "iana"
      },
      "application/cea-2018+xml": {
        source: "iana",
        compressible: true
      },
      "application/cellml+xml": {
        source: "iana",
        compressible: true
      },
      "application/cfw": {
        source: "iana"
      },
      "application/city+json": {
        source: "iana",
        compressible: true
      },
      "application/clr": {
        source: "iana"
      },
      "application/clue+xml": {
        source: "iana",
        compressible: true
      },
      "application/clue_info+xml": {
        source: "iana",
        compressible: true
      },
      "application/cms": {
        source: "iana"
      },
      "application/cnrp+xml": {
        source: "iana",
        compressible: true
      },
      "application/coap-group+json": {
        source: "iana",
        compressible: true
      },
      "application/coap-payload": {
        source: "iana"
      },
      "application/commonground": {
        source: "iana"
      },
      "application/conference-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/cose": {
        source: "iana"
      },
      "application/cose-key": {
        source: "iana"
      },
      "application/cose-key-set": {
        source: "iana"
      },
      "application/cpl+xml": {
        source: "iana",
        compressible: true,
        extensions: ["cpl"]
      },
      "application/csrattrs": {
        source: "iana"
      },
      "application/csta+xml": {
        source: "iana",
        compressible: true
      },
      "application/cstadata+xml": {
        source: "iana",
        compressible: true
      },
      "application/csvm+json": {
        source: "iana",
        compressible: true
      },
      "application/cu-seeme": {
        source: "apache",
        extensions: ["cu"]
      },
      "application/cwt": {
        source: "iana"
      },
      "application/cybercash": {
        source: "iana"
      },
      "application/dart": {
        compressible: true
      },
      "application/dash+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpd"]
      },
      "application/dash-patch+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpp"]
      },
      "application/dashdelta": {
        source: "iana"
      },
      "application/davmount+xml": {
        source: "iana",
        compressible: true,
        extensions: ["davmount"]
      },
      "application/dca-rft": {
        source: "iana"
      },
      "application/dcd": {
        source: "iana"
      },
      "application/dec-dx": {
        source: "iana"
      },
      "application/dialog-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/dicom": {
        source: "iana"
      },
      "application/dicom+json": {
        source: "iana",
        compressible: true
      },
      "application/dicom+xml": {
        source: "iana",
        compressible: true
      },
      "application/dii": {
        source: "iana"
      },
      "application/dit": {
        source: "iana"
      },
      "application/dns": {
        source: "iana"
      },
      "application/dns+json": {
        source: "iana",
        compressible: true
      },
      "application/dns-message": {
        source: "iana"
      },
      "application/docbook+xml": {
        source: "apache",
        compressible: true,
        extensions: ["dbk"]
      },
      "application/dots+cbor": {
        source: "iana"
      },
      "application/dskpp+xml": {
        source: "iana",
        compressible: true
      },
      "application/dssc+der": {
        source: "iana",
        extensions: ["dssc"]
      },
      "application/dssc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xdssc"]
      },
      "application/dvcs": {
        source: "iana"
      },
      "application/ecmascript": {
        source: "iana",
        compressible: true,
        extensions: ["es", "ecma"]
      },
      "application/edi-consent": {
        source: "iana"
      },
      "application/edi-x12": {
        source: "iana",
        compressible: false
      },
      "application/edifact": {
        source: "iana",
        compressible: false
      },
      "application/efi": {
        source: "iana"
      },
      "application/elm+json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/elm+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.cap+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/emergencycalldata.comment+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.control+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.deviceinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.ecall.msd": {
        source: "iana"
      },
      "application/emergencycalldata.providerinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.serviceinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.subscriberinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.veds+xml": {
        source: "iana",
        compressible: true
      },
      "application/emma+xml": {
        source: "iana",
        compressible: true,
        extensions: ["emma"]
      },
      "application/emotionml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["emotionml"]
      },
      "application/encaprtp": {
        source: "iana"
      },
      "application/epp+xml": {
        source: "iana",
        compressible: true
      },
      "application/epub+zip": {
        source: "iana",
        compressible: false,
        extensions: ["epub"]
      },
      "application/eshop": {
        source: "iana"
      },
      "application/exi": {
        source: "iana",
        extensions: ["exi"]
      },
      "application/expect-ct-report+json": {
        source: "iana",
        compressible: true
      },
      "application/express": {
        source: "iana",
        extensions: ["exp"]
      },
      "application/fastinfoset": {
        source: "iana"
      },
      "application/fastsoap": {
        source: "iana"
      },
      "application/fdt+xml": {
        source: "iana",
        compressible: true,
        extensions: ["fdt"]
      },
      "application/fhir+json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/fhir+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/fido.trusted-apps+json": {
        compressible: true
      },
      "application/fits": {
        source: "iana"
      },
      "application/flexfec": {
        source: "iana"
      },
      "application/font-sfnt": {
        source: "iana"
      },
      "application/font-tdpfr": {
        source: "iana",
        extensions: ["pfr"]
      },
      "application/font-woff": {
        source: "iana",
        compressible: false
      },
      "application/framework-attributes+xml": {
        source: "iana",
        compressible: true
      },
      "application/geo+json": {
        source: "iana",
        compressible: true,
        extensions: ["geojson"]
      },
      "application/geo+json-seq": {
        source: "iana"
      },
      "application/geopackage+sqlite3": {
        source: "iana"
      },
      "application/geoxacml+xml": {
        source: "iana",
        compressible: true
      },
      "application/gltf-buffer": {
        source: "iana"
      },
      "application/gml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["gml"]
      },
      "application/gpx+xml": {
        source: "apache",
        compressible: true,
        extensions: ["gpx"]
      },
      "application/gxf": {
        source: "apache",
        extensions: ["gxf"]
      },
      "application/gzip": {
        source: "iana",
        compressible: false,
        extensions: ["gz"]
      },
      "application/h224": {
        source: "iana"
      },
      "application/held+xml": {
        source: "iana",
        compressible: true
      },
      "application/hjson": {
        extensions: ["hjson"]
      },
      "application/http": {
        source: "iana"
      },
      "application/hyperstudio": {
        source: "iana",
        extensions: ["stk"]
      },
      "application/ibe-key-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/ibe-pkg-reply+xml": {
        source: "iana",
        compressible: true
      },
      "application/ibe-pp-data": {
        source: "iana"
      },
      "application/iges": {
        source: "iana"
      },
      "application/im-iscomposing+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/index": {
        source: "iana"
      },
      "application/index.cmd": {
        source: "iana"
      },
      "application/index.obj": {
        source: "iana"
      },
      "application/index.response": {
        source: "iana"
      },
      "application/index.vnd": {
        source: "iana"
      },
      "application/inkml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ink", "inkml"]
      },
      "application/iotp": {
        source: "iana"
      },
      "application/ipfix": {
        source: "iana",
        extensions: ["ipfix"]
      },
      "application/ipp": {
        source: "iana"
      },
      "application/isup": {
        source: "iana"
      },
      "application/its+xml": {
        source: "iana",
        compressible: true,
        extensions: ["its"]
      },
      "application/java-archive": {
        source: "apache",
        compressible: false,
        extensions: ["jar", "war", "ear"]
      },
      "application/java-serialized-object": {
        source: "apache",
        compressible: false,
        extensions: ["ser"]
      },
      "application/java-vm": {
        source: "apache",
        compressible: false,
        extensions: ["class"]
      },
      "application/javascript": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["js", "mjs"]
      },
      "application/jf2feed+json": {
        source: "iana",
        compressible: true
      },
      "application/jose": {
        source: "iana"
      },
      "application/jose+json": {
        source: "iana",
        compressible: true
      },
      "application/jrd+json": {
        source: "iana",
        compressible: true
      },
      "application/jscalendar+json": {
        source: "iana",
        compressible: true
      },
      "application/json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["json", "map"]
      },
      "application/json-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/json-seq": {
        source: "iana"
      },
      "application/json5": {
        extensions: ["json5"]
      },
      "application/jsonml+json": {
        source: "apache",
        compressible: true,
        extensions: ["jsonml"]
      },
      "application/jwk+json": {
        source: "iana",
        compressible: true
      },
      "application/jwk-set+json": {
        source: "iana",
        compressible: true
      },
      "application/jwt": {
        source: "iana"
      },
      "application/kpml-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/kpml-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/ld+json": {
        source: "iana",
        compressible: true,
        extensions: ["jsonld"]
      },
      "application/lgr+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lgr"]
      },
      "application/link-format": {
        source: "iana"
      },
      "application/load-control+xml": {
        source: "iana",
        compressible: true
      },
      "application/lost+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lostxml"]
      },
      "application/lostsync+xml": {
        source: "iana",
        compressible: true
      },
      "application/lpf+zip": {
        source: "iana",
        compressible: false
      },
      "application/lxf": {
        source: "iana"
      },
      "application/mac-binhex40": {
        source: "iana",
        extensions: ["hqx"]
      },
      "application/mac-compactpro": {
        source: "apache",
        extensions: ["cpt"]
      },
      "application/macwriteii": {
        source: "iana"
      },
      "application/mads+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mads"]
      },
      "application/manifest+json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["webmanifest"]
      },
      "application/marc": {
        source: "iana",
        extensions: ["mrc"]
      },
      "application/marcxml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mrcx"]
      },
      "application/mathematica": {
        source: "iana",
        extensions: ["ma", "nb", "mb"]
      },
      "application/mathml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mathml"]
      },
      "application/mathml-content+xml": {
        source: "iana",
        compressible: true
      },
      "application/mathml-presentation+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-associated-procedure-description+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-deregister+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-envelope+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-msk+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-msk-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-protection-description+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-reception-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-register+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-register-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-schedule+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-user-service-description+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbox": {
        source: "iana",
        extensions: ["mbox"]
      },
      "application/media-policy-dataset+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpf"]
      },
      "application/media_control+xml": {
        source: "iana",
        compressible: true
      },
      "application/mediaservercontrol+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mscml"]
      },
      "application/merge-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/metalink+xml": {
        source: "apache",
        compressible: true,
        extensions: ["metalink"]
      },
      "application/metalink4+xml": {
        source: "iana",
        compressible: true,
        extensions: ["meta4"]
      },
      "application/mets+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mets"]
      },
      "application/mf4": {
        source: "iana"
      },
      "application/mikey": {
        source: "iana"
      },
      "application/mipc": {
        source: "iana"
      },
      "application/missing-blocks+cbor-seq": {
        source: "iana"
      },
      "application/mmt-aei+xml": {
        source: "iana",
        compressible: true,
        extensions: ["maei"]
      },
      "application/mmt-usd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["musd"]
      },
      "application/mods+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mods"]
      },
      "application/moss-keys": {
        source: "iana"
      },
      "application/moss-signature": {
        source: "iana"
      },
      "application/mosskey-data": {
        source: "iana"
      },
      "application/mosskey-request": {
        source: "iana"
      },
      "application/mp21": {
        source: "iana",
        extensions: ["m21", "mp21"]
      },
      "application/mp4": {
        source: "iana",
        extensions: ["mp4s", "m4p"]
      },
      "application/mpeg4-generic": {
        source: "iana"
      },
      "application/mpeg4-iod": {
        source: "iana"
      },
      "application/mpeg4-iod-xmt": {
        source: "iana"
      },
      "application/mrb-consumer+xml": {
        source: "iana",
        compressible: true
      },
      "application/mrb-publish+xml": {
        source: "iana",
        compressible: true
      },
      "application/msc-ivr+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/msc-mixer+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/msword": {
        source: "iana",
        compressible: false,
        extensions: ["doc", "dot"]
      },
      "application/mud+json": {
        source: "iana",
        compressible: true
      },
      "application/multipart-core": {
        source: "iana"
      },
      "application/mxf": {
        source: "iana",
        extensions: ["mxf"]
      },
      "application/n-quads": {
        source: "iana",
        extensions: ["nq"]
      },
      "application/n-triples": {
        source: "iana",
        extensions: ["nt"]
      },
      "application/nasdata": {
        source: "iana"
      },
      "application/news-checkgroups": {
        source: "iana",
        charset: "US-ASCII"
      },
      "application/news-groupinfo": {
        source: "iana",
        charset: "US-ASCII"
      },
      "application/news-transmission": {
        source: "iana"
      },
      "application/nlsml+xml": {
        source: "iana",
        compressible: true
      },
      "application/node": {
        source: "iana",
        extensions: ["cjs"]
      },
      "application/nss": {
        source: "iana"
      },
      "application/oauth-authz-req+jwt": {
        source: "iana"
      },
      "application/oblivious-dns-message": {
        source: "iana"
      },
      "application/ocsp-request": {
        source: "iana"
      },
      "application/ocsp-response": {
        source: "iana"
      },
      "application/octet-stream": {
        source: "iana",
        compressible: false,
        extensions: ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"]
      },
      "application/oda": {
        source: "iana",
        extensions: ["oda"]
      },
      "application/odm+xml": {
        source: "iana",
        compressible: true
      },
      "application/odx": {
        source: "iana"
      },
      "application/oebps-package+xml": {
        source: "iana",
        compressible: true,
        extensions: ["opf"]
      },
      "application/ogg": {
        source: "iana",
        compressible: false,
        extensions: ["ogx"]
      },
      "application/omdoc+xml": {
        source: "apache",
        compressible: true,
        extensions: ["omdoc"]
      },
      "application/onenote": {
        source: "apache",
        extensions: ["onetoc", "onetoc2", "onetmp", "onepkg"]
      },
      "application/opc-nodeset+xml": {
        source: "iana",
        compressible: true
      },
      "application/oscore": {
        source: "iana"
      },
      "application/oxps": {
        source: "iana",
        extensions: ["oxps"]
      },
      "application/p21": {
        source: "iana"
      },
      "application/p21+zip": {
        source: "iana",
        compressible: false
      },
      "application/p2p-overlay+xml": {
        source: "iana",
        compressible: true,
        extensions: ["relo"]
      },
      "application/parityfec": {
        source: "iana"
      },
      "application/passport": {
        source: "iana"
      },
      "application/patch-ops-error+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xer"]
      },
      "application/pdf": {
        source: "iana",
        compressible: false,
        extensions: ["pdf"]
      },
      "application/pdx": {
        source: "iana"
      },
      "application/pem-certificate-chain": {
        source: "iana"
      },
      "application/pgp-encrypted": {
        source: "iana",
        compressible: false,
        extensions: ["pgp"]
      },
      "application/pgp-keys": {
        source: "iana",
        extensions: ["asc"]
      },
      "application/pgp-signature": {
        source: "iana",
        extensions: ["asc", "sig"]
      },
      "application/pics-rules": {
        source: "apache",
        extensions: ["prf"]
      },
      "application/pidf+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/pidf-diff+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/pkcs10": {
        source: "iana",
        extensions: ["p10"]
      },
      "application/pkcs12": {
        source: "iana"
      },
      "application/pkcs7-mime": {
        source: "iana",
        extensions: ["p7m", "p7c"]
      },
      "application/pkcs7-signature": {
        source: "iana",
        extensions: ["p7s"]
      },
      "application/pkcs8": {
        source: "iana",
        extensions: ["p8"]
      },
      "application/pkcs8-encrypted": {
        source: "iana"
      },
      "application/pkix-attr-cert": {
        source: "iana",
        extensions: ["ac"]
      },
      "application/pkix-cert": {
        source: "iana",
        extensions: ["cer"]
      },
      "application/pkix-crl": {
        source: "iana",
        extensions: ["crl"]
      },
      "application/pkix-pkipath": {
        source: "iana",
        extensions: ["pkipath"]
      },
      "application/pkixcmp": {
        source: "iana",
        extensions: ["pki"]
      },
      "application/pls+xml": {
        source: "iana",
        compressible: true,
        extensions: ["pls"]
      },
      "application/poc-settings+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/postscript": {
        source: "iana",
        compressible: true,
        extensions: ["ai", "eps", "ps"]
      },
      "application/ppsp-tracker+json": {
        source: "iana",
        compressible: true
      },
      "application/problem+json": {
        source: "iana",
        compressible: true
      },
      "application/problem+xml": {
        source: "iana",
        compressible: true
      },
      "application/provenance+xml": {
        source: "iana",
        compressible: true,
        extensions: ["provx"]
      },
      "application/prs.alvestrand.titrax-sheet": {
        source: "iana"
      },
      "application/prs.cww": {
        source: "iana",
        extensions: ["cww"]
      },
      "application/prs.cyn": {
        source: "iana",
        charset: "7-BIT"
      },
      "application/prs.hpub+zip": {
        source: "iana",
        compressible: false
      },
      "application/prs.nprend": {
        source: "iana"
      },
      "application/prs.plucker": {
        source: "iana"
      },
      "application/prs.rdf-xml-crypt": {
        source: "iana"
      },
      "application/prs.xsf+xml": {
        source: "iana",
        compressible: true
      },
      "application/pskc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["pskcxml"]
      },
      "application/pvd+json": {
        source: "iana",
        compressible: true
      },
      "application/qsig": {
        source: "iana"
      },
      "application/raml+yaml": {
        compressible: true,
        extensions: ["raml"]
      },
      "application/raptorfec": {
        source: "iana"
      },
      "application/rdap+json": {
        source: "iana",
        compressible: true
      },
      "application/rdf+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rdf", "owl"]
      },
      "application/reginfo+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rif"]
      },
      "application/relax-ng-compact-syntax": {
        source: "iana",
        extensions: ["rnc"]
      },
      "application/remote-printing": {
        source: "iana"
      },
      "application/reputon+json": {
        source: "iana",
        compressible: true
      },
      "application/resource-lists+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rl"]
      },
      "application/resource-lists-diff+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rld"]
      },
      "application/rfc+xml": {
        source: "iana",
        compressible: true
      },
      "application/riscos": {
        source: "iana"
      },
      "application/rlmi+xml": {
        source: "iana",
        compressible: true
      },
      "application/rls-services+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rs"]
      },
      "application/route-apd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rapd"]
      },
      "application/route-s-tsid+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sls"]
      },
      "application/route-usd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rusd"]
      },
      "application/rpki-ghostbusters": {
        source: "iana",
        extensions: ["gbr"]
      },
      "application/rpki-manifest": {
        source: "iana",
        extensions: ["mft"]
      },
      "application/rpki-publication": {
        source: "iana"
      },
      "application/rpki-roa": {
        source: "iana",
        extensions: ["roa"]
      },
      "application/rpki-updown": {
        source: "iana"
      },
      "application/rsd+xml": {
        source: "apache",
        compressible: true,
        extensions: ["rsd"]
      },
      "application/rss+xml": {
        source: "apache",
        compressible: true,
        extensions: ["rss"]
      },
      "application/rtf": {
        source: "iana",
        compressible: true,
        extensions: ["rtf"]
      },
      "application/rtploopback": {
        source: "iana"
      },
      "application/rtx": {
        source: "iana"
      },
      "application/samlassertion+xml": {
        source: "iana",
        compressible: true
      },
      "application/samlmetadata+xml": {
        source: "iana",
        compressible: true
      },
      "application/sarif+json": {
        source: "iana",
        compressible: true
      },
      "application/sarif-external-properties+json": {
        source: "iana",
        compressible: true
      },
      "application/sbe": {
        source: "iana"
      },
      "application/sbml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sbml"]
      },
      "application/scaip+xml": {
        source: "iana",
        compressible: true
      },
      "application/scim+json": {
        source: "iana",
        compressible: true
      },
      "application/scvp-cv-request": {
        source: "iana",
        extensions: ["scq"]
      },
      "application/scvp-cv-response": {
        source: "iana",
        extensions: ["scs"]
      },
      "application/scvp-vp-request": {
        source: "iana",
        extensions: ["spq"]
      },
      "application/scvp-vp-response": {
        source: "iana",
        extensions: ["spp"]
      },
      "application/sdp": {
        source: "iana",
        extensions: ["sdp"]
      },
      "application/secevent+jwt": {
        source: "iana"
      },
      "application/senml+cbor": {
        source: "iana"
      },
      "application/senml+json": {
        source: "iana",
        compressible: true
      },
      "application/senml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["senmlx"]
      },
      "application/senml-etch+cbor": {
        source: "iana"
      },
      "application/senml-etch+json": {
        source: "iana",
        compressible: true
      },
      "application/senml-exi": {
        source: "iana"
      },
      "application/sensml+cbor": {
        source: "iana"
      },
      "application/sensml+json": {
        source: "iana",
        compressible: true
      },
      "application/sensml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sensmlx"]
      },
      "application/sensml-exi": {
        source: "iana"
      },
      "application/sep+xml": {
        source: "iana",
        compressible: true
      },
      "application/sep-exi": {
        source: "iana"
      },
      "application/session-info": {
        source: "iana"
      },
      "application/set-payment": {
        source: "iana"
      },
      "application/set-payment-initiation": {
        source: "iana",
        extensions: ["setpay"]
      },
      "application/set-registration": {
        source: "iana"
      },
      "application/set-registration-initiation": {
        source: "iana",
        extensions: ["setreg"]
      },
      "application/sgml": {
        source: "iana"
      },
      "application/sgml-open-catalog": {
        source: "iana"
      },
      "application/shf+xml": {
        source: "iana",
        compressible: true,
        extensions: ["shf"]
      },
      "application/sieve": {
        source: "iana",
        extensions: ["siv", "sieve"]
      },
      "application/simple-filter+xml": {
        source: "iana",
        compressible: true
      },
      "application/simple-message-summary": {
        source: "iana"
      },
      "application/simplesymbolcontainer": {
        source: "iana"
      },
      "application/sipc": {
        source: "iana"
      },
      "application/slate": {
        source: "iana"
      },
      "application/smil": {
        source: "iana"
      },
      "application/smil+xml": {
        source: "iana",
        compressible: true,
        extensions: ["smi", "smil"]
      },
      "application/smpte336m": {
        source: "iana"
      },
      "application/soap+fastinfoset": {
        source: "iana"
      },
      "application/soap+xml": {
        source: "iana",
        compressible: true
      },
      "application/sparql-query": {
        source: "iana",
        extensions: ["rq"]
      },
      "application/sparql-results+xml": {
        source: "iana",
        compressible: true,
        extensions: ["srx"]
      },
      "application/spdx+json": {
        source: "iana",
        compressible: true
      },
      "application/spirits-event+xml": {
        source: "iana",
        compressible: true
      },
      "application/sql": {
        source: "iana"
      },
      "application/srgs": {
        source: "iana",
        extensions: ["gram"]
      },
      "application/srgs+xml": {
        source: "iana",
        compressible: true,
        extensions: ["grxml"]
      },
      "application/sru+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sru"]
      },
      "application/ssdl+xml": {
        source: "apache",
        compressible: true,
        extensions: ["ssdl"]
      },
      "application/ssml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ssml"]
      },
      "application/stix+json": {
        source: "iana",
        compressible: true
      },
      "application/swid+xml": {
        source: "iana",
        compressible: true,
        extensions: ["swidtag"]
      },
      "application/tamp-apex-update": {
        source: "iana"
      },
      "application/tamp-apex-update-confirm": {
        source: "iana"
      },
      "application/tamp-community-update": {
        source: "iana"
      },
      "application/tamp-community-update-confirm": {
        source: "iana"
      },
      "application/tamp-error": {
        source: "iana"
      },
      "application/tamp-sequence-adjust": {
        source: "iana"
      },
      "application/tamp-sequence-adjust-confirm": {
        source: "iana"
      },
      "application/tamp-status-query": {
        source: "iana"
      },
      "application/tamp-status-response": {
        source: "iana"
      },
      "application/tamp-update": {
        source: "iana"
      },
      "application/tamp-update-confirm": {
        source: "iana"
      },
      "application/tar": {
        compressible: true
      },
      "application/taxii+json": {
        source: "iana",
        compressible: true
      },
      "application/td+json": {
        source: "iana",
        compressible: true
      },
      "application/tei+xml": {
        source: "iana",
        compressible: true,
        extensions: ["tei", "teicorpus"]
      },
      "application/tetra_isi": {
        source: "iana"
      },
      "application/thraud+xml": {
        source: "iana",
        compressible: true,
        extensions: ["tfi"]
      },
      "application/timestamp-query": {
        source: "iana"
      },
      "application/timestamp-reply": {
        source: "iana"
      },
      "application/timestamped-data": {
        source: "iana",
        extensions: ["tsd"]
      },
      "application/tlsrpt+gzip": {
        source: "iana"
      },
      "application/tlsrpt+json": {
        source: "iana",
        compressible: true
      },
      "application/tnauthlist": {
        source: "iana"
      },
      "application/token-introspection+jwt": {
        source: "iana"
      },
      "application/toml": {
        compressible: true,
        extensions: ["toml"]
      },
      "application/trickle-ice-sdpfrag": {
        source: "iana"
      },
      "application/trig": {
        source: "iana",
        extensions: ["trig"]
      },
      "application/ttml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ttml"]
      },
      "application/tve-trigger": {
        source: "iana"
      },
      "application/tzif": {
        source: "iana"
      },
      "application/tzif-leap": {
        source: "iana"
      },
      "application/ubjson": {
        compressible: false,
        extensions: ["ubj"]
      },
      "application/ulpfec": {
        source: "iana"
      },
      "application/urc-grpsheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/urc-ressheet+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rsheet"]
      },
      "application/urc-targetdesc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["td"]
      },
      "application/urc-uisocketdesc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vcard+json": {
        source: "iana",
        compressible: true
      },
      "application/vcard+xml": {
        source: "iana",
        compressible: true
      },
      "application/vemmi": {
        source: "iana"
      },
      "application/vividence.scriptfile": {
        source: "apache"
      },
      "application/vnd.1000minds.decision-model+xml": {
        source: "iana",
        compressible: true,
        extensions: ["1km"]
      },
      "application/vnd.3gpp-prose+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp-prose-pc3ch+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp-v2x-local-service-information": {
        source: "iana"
      },
      "application/vnd.3gpp.5gnas": {
        source: "iana"
      },
      "application/vnd.3gpp.access-transfer-events+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.bsf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.gmop+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.gtpc": {
        source: "iana"
      },
      "application/vnd.3gpp.interworking-data": {
        source: "iana"
      },
      "application/vnd.3gpp.lpp": {
        source: "iana"
      },
      "application/vnd.3gpp.mc-signalling-ear": {
        source: "iana"
      },
      "application/vnd.3gpp.mcdata-affiliation-command+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-payload": {
        source: "iana"
      },
      "application/vnd.3gpp.mcdata-service-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-signalling": {
        source: "iana"
      },
      "application/vnd.3gpp.mcdata-ue-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-user-profile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-affiliation-command+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-floor-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-location-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-mbms-usage-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-service-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-signed+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-ue-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-ue-init-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-user-profile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-affiliation-command+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-affiliation-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-location-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-mbms-usage-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-service-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-transmission-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-ue-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-user-profile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mid-call+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.ngap": {
        source: "iana"
      },
      "application/vnd.3gpp.pfcp": {
        source: "iana"
      },
      "application/vnd.3gpp.pic-bw-large": {
        source: "iana",
        extensions: ["plb"]
      },
      "application/vnd.3gpp.pic-bw-small": {
        source: "iana",
        extensions: ["psb"]
      },
      "application/vnd.3gpp.pic-bw-var": {
        source: "iana",
        extensions: ["pvb"]
      },
      "application/vnd.3gpp.s1ap": {
        source: "iana"
      },
      "application/vnd.3gpp.sms": {
        source: "iana"
      },
      "application/vnd.3gpp.sms+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.srvcc-ext+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.srvcc-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.state-and-event-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.ussd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp2.bcmcsinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp2.sms": {
        source: "iana"
      },
      "application/vnd.3gpp2.tcap": {
        source: "iana",
        extensions: ["tcap"]
      },
      "application/vnd.3lightssoftware.imagescal": {
        source: "iana"
      },
      "application/vnd.3m.post-it-notes": {
        source: "iana",
        extensions: ["pwn"]
      },
      "application/vnd.accpac.simply.aso": {
        source: "iana",
        extensions: ["aso"]
      },
      "application/vnd.accpac.simply.imp": {
        source: "iana",
        extensions: ["imp"]
      },
      "application/vnd.acucobol": {
        source: "iana",
        extensions: ["acu"]
      },
      "application/vnd.acucorp": {
        source: "iana",
        extensions: ["atc", "acutc"]
      },
      "application/vnd.adobe.air-application-installer-package+zip": {
        source: "apache",
        compressible: false,
        extensions: ["air"]
      },
      "application/vnd.adobe.flash.movie": {
        source: "iana"
      },
      "application/vnd.adobe.formscentral.fcdt": {
        source: "iana",
        extensions: ["fcdt"]
      },
      "application/vnd.adobe.fxp": {
        source: "iana",
        extensions: ["fxp", "fxpl"]
      },
      "application/vnd.adobe.partial-upload": {
        source: "iana"
      },
      "application/vnd.adobe.xdp+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xdp"]
      },
      "application/vnd.adobe.xfdf": {
        source: "iana",
        extensions: ["xfdf"]
      },
      "application/vnd.aether.imp": {
        source: "iana"
      },
      "application/vnd.afpc.afplinedata": {
        source: "iana"
      },
      "application/vnd.afpc.afplinedata-pagedef": {
        source: "iana"
      },
      "application/vnd.afpc.cmoca-cmresource": {
        source: "iana"
      },
      "application/vnd.afpc.foca-charset": {
        source: "iana"
      },
      "application/vnd.afpc.foca-codedfont": {
        source: "iana"
      },
      "application/vnd.afpc.foca-codepage": {
        source: "iana"
      },
      "application/vnd.afpc.modca": {
        source: "iana"
      },
      "application/vnd.afpc.modca-cmtable": {
        source: "iana"
      },
      "application/vnd.afpc.modca-formdef": {
        source: "iana"
      },
      "application/vnd.afpc.modca-mediummap": {
        source: "iana"
      },
      "application/vnd.afpc.modca-objectcontainer": {
        source: "iana"
      },
      "application/vnd.afpc.modca-overlay": {
        source: "iana"
      },
      "application/vnd.afpc.modca-pagesegment": {
        source: "iana"
      },
      "application/vnd.age": {
        source: "iana",
        extensions: ["age"]
      },
      "application/vnd.ah-barcode": {
        source: "iana"
      },
      "application/vnd.ahead.space": {
        source: "iana",
        extensions: ["ahead"]
      },
      "application/vnd.airzip.filesecure.azf": {
        source: "iana",
        extensions: ["azf"]
      },
      "application/vnd.airzip.filesecure.azs": {
        source: "iana",
        extensions: ["azs"]
      },
      "application/vnd.amadeus+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.amazon.ebook": {
        source: "apache",
        extensions: ["azw"]
      },
      "application/vnd.amazon.mobi8-ebook": {
        source: "iana"
      },
      "application/vnd.americandynamics.acc": {
        source: "iana",
        extensions: ["acc"]
      },
      "application/vnd.amiga.ami": {
        source: "iana",
        extensions: ["ami"]
      },
      "application/vnd.amundsen.maze+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.android.ota": {
        source: "iana"
      },
      "application/vnd.android.package-archive": {
        source: "apache",
        compressible: false,
        extensions: ["apk"]
      },
      "application/vnd.anki": {
        source: "iana"
      },
      "application/vnd.anser-web-certificate-issue-initiation": {
        source: "iana",
        extensions: ["cii"]
      },
      "application/vnd.anser-web-funds-transfer-initiation": {
        source: "apache",
        extensions: ["fti"]
      },
      "application/vnd.antix.game-component": {
        source: "iana",
        extensions: ["atx"]
      },
      "application/vnd.apache.arrow.file": {
        source: "iana"
      },
      "application/vnd.apache.arrow.stream": {
        source: "iana"
      },
      "application/vnd.apache.thrift.binary": {
        source: "iana"
      },
      "application/vnd.apache.thrift.compact": {
        source: "iana"
      },
      "application/vnd.apache.thrift.json": {
        source: "iana"
      },
      "application/vnd.api+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.aplextor.warrp+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.apothekende.reservation+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.apple.installer+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpkg"]
      },
      "application/vnd.apple.keynote": {
        source: "iana",
        extensions: ["key"]
      },
      "application/vnd.apple.mpegurl": {
        source: "iana",
        extensions: ["m3u8"]
      },
      "application/vnd.apple.numbers": {
        source: "iana",
        extensions: ["numbers"]
      },
      "application/vnd.apple.pages": {
        source: "iana",
        extensions: ["pages"]
      },
      "application/vnd.apple.pkpass": {
        compressible: false,
        extensions: ["pkpass"]
      },
      "application/vnd.arastra.swi": {
        source: "iana"
      },
      "application/vnd.aristanetworks.swi": {
        source: "iana",
        extensions: ["swi"]
      },
      "application/vnd.artisan+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.artsquare": {
        source: "iana"
      },
      "application/vnd.astraea-software.iota": {
        source: "iana",
        extensions: ["iota"]
      },
      "application/vnd.audiograph": {
        source: "iana",
        extensions: ["aep"]
      },
      "application/vnd.autopackage": {
        source: "iana"
      },
      "application/vnd.avalon+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.avistar+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.balsamiq.bmml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["bmml"]
      },
      "application/vnd.balsamiq.bmpr": {
        source: "iana"
      },
      "application/vnd.banana-accounting": {
        source: "iana"
      },
      "application/vnd.bbf.usp.error": {
        source: "iana"
      },
      "application/vnd.bbf.usp.msg": {
        source: "iana"
      },
      "application/vnd.bbf.usp.msg+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.bekitzur-stech+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.bint.med-content": {
        source: "iana"
      },
      "application/vnd.biopax.rdf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.blink-idb-value-wrapper": {
        source: "iana"
      },
      "application/vnd.blueice.multipass": {
        source: "iana",
        extensions: ["mpm"]
      },
      "application/vnd.bluetooth.ep.oob": {
        source: "iana"
      },
      "application/vnd.bluetooth.le.oob": {
        source: "iana"
      },
      "application/vnd.bmi": {
        source: "iana",
        extensions: ["bmi"]
      },
      "application/vnd.bpf": {
        source: "iana"
      },
      "application/vnd.bpf3": {
        source: "iana"
      },
      "application/vnd.businessobjects": {
        source: "iana",
        extensions: ["rep"]
      },
      "application/vnd.byu.uapi+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cab-jscript": {
        source: "iana"
      },
      "application/vnd.canon-cpdl": {
        source: "iana"
      },
      "application/vnd.canon-lips": {
        source: "iana"
      },
      "application/vnd.capasystems-pg+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cendio.thinlinc.clientconf": {
        source: "iana"
      },
      "application/vnd.century-systems.tcp_stream": {
        source: "iana"
      },
      "application/vnd.chemdraw+xml": {
        source: "iana",
        compressible: true,
        extensions: ["cdxml"]
      },
      "application/vnd.chess-pgn": {
        source: "iana"
      },
      "application/vnd.chipnuts.karaoke-mmd": {
        source: "iana",
        extensions: ["mmd"]
      },
      "application/vnd.ciedi": {
        source: "iana"
      },
      "application/vnd.cinderella": {
        source: "iana",
        extensions: ["cdy"]
      },
      "application/vnd.cirpack.isdn-ext": {
        source: "iana"
      },
      "application/vnd.citationstyles.style+xml": {
        source: "iana",
        compressible: true,
        extensions: ["csl"]
      },
      "application/vnd.claymore": {
        source: "iana",
        extensions: ["cla"]
      },
      "application/vnd.cloanto.rp9": {
        source: "iana",
        extensions: ["rp9"]
      },
      "application/vnd.clonk.c4group": {
        source: "iana",
        extensions: ["c4g", "c4d", "c4f", "c4p", "c4u"]
      },
      "application/vnd.cluetrust.cartomobile-config": {
        source: "iana",
        extensions: ["c11amc"]
      },
      "application/vnd.cluetrust.cartomobile-config-pkg": {
        source: "iana",
        extensions: ["c11amz"]
      },
      "application/vnd.coffeescript": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.document": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.document-template": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.presentation": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.presentation-template": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.spreadsheet": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.spreadsheet-template": {
        source: "iana"
      },
      "application/vnd.collection+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.collection.doc+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.collection.next+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.comicbook+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.comicbook-rar": {
        source: "iana"
      },
      "application/vnd.commerce-battelle": {
        source: "iana"
      },
      "application/vnd.commonspace": {
        source: "iana",
        extensions: ["csp"]
      },
      "application/vnd.contact.cmsg": {
        source: "iana",
        extensions: ["cdbcmsg"]
      },
      "application/vnd.coreos.ignition+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cosmocaller": {
        source: "iana",
        extensions: ["cmc"]
      },
      "application/vnd.crick.clicker": {
        source: "iana",
        extensions: ["clkx"]
      },
      "application/vnd.crick.clicker.keyboard": {
        source: "iana",
        extensions: ["clkk"]
      },
      "application/vnd.crick.clicker.palette": {
        source: "iana",
        extensions: ["clkp"]
      },
      "application/vnd.crick.clicker.template": {
        source: "iana",
        extensions: ["clkt"]
      },
      "application/vnd.crick.clicker.wordbank": {
        source: "iana",
        extensions: ["clkw"]
      },
      "application/vnd.criticaltools.wbs+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wbs"]
      },
      "application/vnd.cryptii.pipe+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.crypto-shade-file": {
        source: "iana"
      },
      "application/vnd.cryptomator.encrypted": {
        source: "iana"
      },
      "application/vnd.cryptomator.vault": {
        source: "iana"
      },
      "application/vnd.ctc-posml": {
        source: "iana",
        extensions: ["pml"]
      },
      "application/vnd.ctct.ws+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cups-pdf": {
        source: "iana"
      },
      "application/vnd.cups-postscript": {
        source: "iana"
      },
      "application/vnd.cups-ppd": {
        source: "iana",
        extensions: ["ppd"]
      },
      "application/vnd.cups-raster": {
        source: "iana"
      },
      "application/vnd.cups-raw": {
        source: "iana"
      },
      "application/vnd.curl": {
        source: "iana"
      },
      "application/vnd.curl.car": {
        source: "apache",
        extensions: ["car"]
      },
      "application/vnd.curl.pcurl": {
        source: "apache",
        extensions: ["pcurl"]
      },
      "application/vnd.cyan.dean.root+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cybank": {
        source: "iana"
      },
      "application/vnd.cyclonedx+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cyclonedx+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.d2l.coursepackage1p0+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.d3m-dataset": {
        source: "iana"
      },
      "application/vnd.d3m-problem": {
        source: "iana"
      },
      "application/vnd.dart": {
        source: "iana",
        compressible: true,
        extensions: ["dart"]
      },
      "application/vnd.data-vision.rdz": {
        source: "iana",
        extensions: ["rdz"]
      },
      "application/vnd.datapackage+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dataresource+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dbf": {
        source: "iana",
        extensions: ["dbf"]
      },
      "application/vnd.debian.binary-package": {
        source: "iana"
      },
      "application/vnd.dece.data": {
        source: "iana",
        extensions: ["uvf", "uvvf", "uvd", "uvvd"]
      },
      "application/vnd.dece.ttml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["uvt", "uvvt"]
      },
      "application/vnd.dece.unspecified": {
        source: "iana",
        extensions: ["uvx", "uvvx"]
      },
      "application/vnd.dece.zip": {
        source: "iana",
        extensions: ["uvz", "uvvz"]
      },
      "application/vnd.denovo.fcselayout-link": {
        source: "iana",
        extensions: ["fe_launch"]
      },
      "application/vnd.desmume.movie": {
        source: "iana"
      },
      "application/vnd.dir-bi.plate-dl-nosuffix": {
        source: "iana"
      },
      "application/vnd.dm.delegation+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dna": {
        source: "iana",
        extensions: ["dna"]
      },
      "application/vnd.document+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dolby.mlp": {
        source: "apache",
        extensions: ["mlp"]
      },
      "application/vnd.dolby.mobile.1": {
        source: "iana"
      },
      "application/vnd.dolby.mobile.2": {
        source: "iana"
      },
      "application/vnd.doremir.scorecloud-binary-document": {
        source: "iana"
      },
      "application/vnd.dpgraph": {
        source: "iana",
        extensions: ["dpg"]
      },
      "application/vnd.dreamfactory": {
        source: "iana",
        extensions: ["dfac"]
      },
      "application/vnd.drive+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ds-keypoint": {
        source: "apache",
        extensions: ["kpxx"]
      },
      "application/vnd.dtg.local": {
        source: "iana"
      },
      "application/vnd.dtg.local.flash": {
        source: "iana"
      },
      "application/vnd.dtg.local.html": {
        source: "iana"
      },
      "application/vnd.dvb.ait": {
        source: "iana",
        extensions: ["ait"]
      },
      "application/vnd.dvb.dvbisl+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.dvbj": {
        source: "iana"
      },
      "application/vnd.dvb.esgcontainer": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcdftnotifaccess": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgaccess": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgaccess2": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgpdd": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcroaming": {
        source: "iana"
      },
      "application/vnd.dvb.iptv.alfec-base": {
        source: "iana"
      },
      "application/vnd.dvb.iptv.alfec-enhancement": {
        source: "iana"
      },
      "application/vnd.dvb.notif-aggregate-root+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-container+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-generic+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-ia-msglist+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-ia-registration-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-ia-registration-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-init+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.pfr": {
        source: "iana"
      },
      "application/vnd.dvb.service": {
        source: "iana",
        extensions: ["svc"]
      },
      "application/vnd.dxr": {
        source: "iana"
      },
      "application/vnd.dynageo": {
        source: "iana",
        extensions: ["geo"]
      },
      "application/vnd.dzr": {
        source: "iana"
      },
      "application/vnd.easykaraoke.cdgdownload": {
        source: "iana"
      },
      "application/vnd.ecdis-update": {
        source: "iana"
      },
      "application/vnd.ecip.rlp": {
        source: "iana"
      },
      "application/vnd.eclipse.ditto+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ecowin.chart": {
        source: "iana",
        extensions: ["mag"]
      },
      "application/vnd.ecowin.filerequest": {
        source: "iana"
      },
      "application/vnd.ecowin.fileupdate": {
        source: "iana"
      },
      "application/vnd.ecowin.series": {
        source: "iana"
      },
      "application/vnd.ecowin.seriesrequest": {
        source: "iana"
      },
      "application/vnd.ecowin.seriesupdate": {
        source: "iana"
      },
      "application/vnd.efi.img": {
        source: "iana"
      },
      "application/vnd.efi.iso": {
        source: "iana"
      },
      "application/vnd.emclient.accessrequest+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.enliven": {
        source: "iana",
        extensions: ["nml"]
      },
      "application/vnd.enphase.envoy": {
        source: "iana"
      },
      "application/vnd.eprints.data+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.epson.esf": {
        source: "iana",
        extensions: ["esf"]
      },
      "application/vnd.epson.msf": {
        source: "iana",
        extensions: ["msf"]
      },
      "application/vnd.epson.quickanime": {
        source: "iana",
        extensions: ["qam"]
      },
      "application/vnd.epson.salt": {
        source: "iana",
        extensions: ["slt"]
      },
      "application/vnd.epson.ssf": {
        source: "iana",
        extensions: ["ssf"]
      },
      "application/vnd.ericsson.quickcall": {
        source: "iana"
      },
      "application/vnd.espass-espass+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.eszigno3+xml": {
        source: "iana",
        compressible: true,
        extensions: ["es3", "et3"]
      },
      "application/vnd.etsi.aoc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.asic-e+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.etsi.asic-s+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.etsi.cug+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvcommand+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvdiscovery+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsad-bc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsad-cod+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsad-npvr+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvservice+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsync+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvueprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.mcid+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.mheg5": {
        source: "iana"
      },
      "application/vnd.etsi.overload-control-policy-dataset+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.pstn+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.sci+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.simservs+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.timestamp-token": {
        source: "iana"
      },
      "application/vnd.etsi.tsl+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.tsl.der": {
        source: "iana"
      },
      "application/vnd.eu.kasparian.car+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.eudora.data": {
        source: "iana"
      },
      "application/vnd.evolv.ecig.profile": {
        source: "iana"
      },
      "application/vnd.evolv.ecig.settings": {
        source: "iana"
      },
      "application/vnd.evolv.ecig.theme": {
        source: "iana"
      },
      "application/vnd.exstream-empower+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.exstream-package": {
        source: "iana"
      },
      "application/vnd.ezpix-album": {
        source: "iana",
        extensions: ["ez2"]
      },
      "application/vnd.ezpix-package": {
        source: "iana",
        extensions: ["ez3"]
      },
      "application/vnd.f-secure.mobile": {
        source: "iana"
      },
      "application/vnd.familysearch.gedcom+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.fastcopy-disk-image": {
        source: "iana"
      },
      "application/vnd.fdf": {
        source: "iana",
        extensions: ["fdf"]
      },
      "application/vnd.fdsn.mseed": {
        source: "iana",
        extensions: ["mseed"]
      },
      "application/vnd.fdsn.seed": {
        source: "iana",
        extensions: ["seed", "dataless"]
      },
      "application/vnd.ffsns": {
        source: "iana"
      },
      "application/vnd.ficlab.flb+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.filmit.zfc": {
        source: "iana"
      },
      "application/vnd.fints": {
        source: "iana"
      },
      "application/vnd.firemonkeys.cloudcell": {
        source: "iana"
      },
      "application/vnd.flographit": {
        source: "iana",
        extensions: ["gph"]
      },
      "application/vnd.fluxtime.clip": {
        source: "iana",
        extensions: ["ftc"]
      },
      "application/vnd.font-fontforge-sfd": {
        source: "iana"
      },
      "application/vnd.framemaker": {
        source: "iana",
        extensions: ["fm", "frame", "maker", "book"]
      },
      "application/vnd.frogans.fnc": {
        source: "iana",
        extensions: ["fnc"]
      },
      "application/vnd.frogans.ltf": {
        source: "iana",
        extensions: ["ltf"]
      },
      "application/vnd.fsc.weblaunch": {
        source: "iana",
        extensions: ["fsc"]
      },
      "application/vnd.fujifilm.fb.docuworks": {
        source: "iana"
      },
      "application/vnd.fujifilm.fb.docuworks.binder": {
        source: "iana"
      },
      "application/vnd.fujifilm.fb.docuworks.container": {
        source: "iana"
      },
      "application/vnd.fujifilm.fb.jfi+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.fujitsu.oasys": {
        source: "iana",
        extensions: ["oas"]
      },
      "application/vnd.fujitsu.oasys2": {
        source: "iana",
        extensions: ["oa2"]
      },
      "application/vnd.fujitsu.oasys3": {
        source: "iana",
        extensions: ["oa3"]
      },
      "application/vnd.fujitsu.oasysgp": {
        source: "iana",
        extensions: ["fg5"]
      },
      "application/vnd.fujitsu.oasysprs": {
        source: "iana",
        extensions: ["bh2"]
      },
      "application/vnd.fujixerox.art-ex": {
        source: "iana"
      },
      "application/vnd.fujixerox.art4": {
        source: "iana"
      },
      "application/vnd.fujixerox.ddd": {
        source: "iana",
        extensions: ["ddd"]
      },
      "application/vnd.fujixerox.docuworks": {
        source: "iana",
        extensions: ["xdw"]
      },
      "application/vnd.fujixerox.docuworks.binder": {
        source: "iana",
        extensions: ["xbd"]
      },
      "application/vnd.fujixerox.docuworks.container": {
        source: "iana"
      },
      "application/vnd.fujixerox.hbpl": {
        source: "iana"
      },
      "application/vnd.fut-misnet": {
        source: "iana"
      },
      "application/vnd.futoin+cbor": {
        source: "iana"
      },
      "application/vnd.futoin+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.fuzzysheet": {
        source: "iana",
        extensions: ["fzs"]
      },
      "application/vnd.genomatix.tuxedo": {
        source: "iana",
        extensions: ["txd"]
      },
      "application/vnd.gentics.grd+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.geo+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.geocube+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.geogebra.file": {
        source: "iana",
        extensions: ["ggb"]
      },
      "application/vnd.geogebra.slides": {
        source: "iana"
      },
      "application/vnd.geogebra.tool": {
        source: "iana",
        extensions: ["ggt"]
      },
      "application/vnd.geometry-explorer": {
        source: "iana",
        extensions: ["gex", "gre"]
      },
      "application/vnd.geonext": {
        source: "iana",
        extensions: ["gxt"]
      },
      "application/vnd.geoplan": {
        source: "iana",
        extensions: ["g2w"]
      },
      "application/vnd.geospace": {
        source: "iana",
        extensions: ["g3w"]
      },
      "application/vnd.gerber": {
        source: "iana"
      },
      "application/vnd.globalplatform.card-content-mgt": {
        source: "iana"
      },
      "application/vnd.globalplatform.card-content-mgt-response": {
        source: "iana"
      },
      "application/vnd.gmx": {
        source: "iana",
        extensions: ["gmx"]
      },
      "application/vnd.google-apps.document": {
        compressible: false,
        extensions: ["gdoc"]
      },
      "application/vnd.google-apps.presentation": {
        compressible: false,
        extensions: ["gslides"]
      },
      "application/vnd.google-apps.spreadsheet": {
        compressible: false,
        extensions: ["gsheet"]
      },
      "application/vnd.google-earth.kml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["kml"]
      },
      "application/vnd.google-earth.kmz": {
        source: "iana",
        compressible: false,
        extensions: ["kmz"]
      },
      "application/vnd.gov.sk.e-form+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.gov.sk.e-form+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.gov.sk.xmldatacontainer+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.grafeq": {
        source: "iana",
        extensions: ["gqf", "gqs"]
      },
      "application/vnd.gridmp": {
        source: "iana"
      },
      "application/vnd.groove-account": {
        source: "iana",
        extensions: ["gac"]
      },
      "application/vnd.groove-help": {
        source: "iana",
        extensions: ["ghf"]
      },
      "application/vnd.groove-identity-message": {
        source: "iana",
        extensions: ["gim"]
      },
      "application/vnd.groove-injector": {
        source: "iana",
        extensions: ["grv"]
      },
      "application/vnd.groove-tool-message": {
        source: "iana",
        extensions: ["gtm"]
      },
      "application/vnd.groove-tool-template": {
        source: "iana",
        extensions: ["tpl"]
      },
      "application/vnd.groove-vcard": {
        source: "iana",
        extensions: ["vcg"]
      },
      "application/vnd.hal+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hal+xml": {
        source: "iana",
        compressible: true,
        extensions: ["hal"]
      },
      "application/vnd.handheld-entertainment+xml": {
        source: "iana",
        compressible: true,
        extensions: ["zmm"]
      },
      "application/vnd.hbci": {
        source: "iana",
        extensions: ["hbci"]
      },
      "application/vnd.hc+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hcl-bireports": {
        source: "iana"
      },
      "application/vnd.hdt": {
        source: "iana"
      },
      "application/vnd.heroku+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hhe.lesson-player": {
        source: "iana",
        extensions: ["les"]
      },
      "application/vnd.hl7cda+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.hl7v2+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.hp-hpgl": {
        source: "iana",
        extensions: ["hpgl"]
      },
      "application/vnd.hp-hpid": {
        source: "iana",
        extensions: ["hpid"]
      },
      "application/vnd.hp-hps": {
        source: "iana",
        extensions: ["hps"]
      },
      "application/vnd.hp-jlyt": {
        source: "iana",
        extensions: ["jlt"]
      },
      "application/vnd.hp-pcl": {
        source: "iana",
        extensions: ["pcl"]
      },
      "application/vnd.hp-pclxl": {
        source: "iana",
        extensions: ["pclxl"]
      },
      "application/vnd.httphone": {
        source: "iana"
      },
      "application/vnd.hydrostatix.sof-data": {
        source: "iana",
        extensions: ["sfd-hdstx"]
      },
      "application/vnd.hyper+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hyper-item+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hyperdrive+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hzn-3d-crossword": {
        source: "iana"
      },
      "application/vnd.ibm.afplinedata": {
        source: "iana"
      },
      "application/vnd.ibm.electronic-media": {
        source: "iana"
      },
      "application/vnd.ibm.minipay": {
        source: "iana",
        extensions: ["mpy"]
      },
      "application/vnd.ibm.modcap": {
        source: "iana",
        extensions: ["afp", "listafp", "list3820"]
      },
      "application/vnd.ibm.rights-management": {
        source: "iana",
        extensions: ["irm"]
      },
      "application/vnd.ibm.secure-container": {
        source: "iana",
        extensions: ["sc"]
      },
      "application/vnd.iccprofile": {
        source: "iana",
        extensions: ["icc", "icm"]
      },
      "application/vnd.ieee.1905": {
        source: "iana"
      },
      "application/vnd.igloader": {
        source: "iana",
        extensions: ["igl"]
      },
      "application/vnd.imagemeter.folder+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.imagemeter.image+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.immervision-ivp": {
        source: "iana",
        extensions: ["ivp"]
      },
      "application/vnd.immervision-ivu": {
        source: "iana",
        extensions: ["ivu"]
      },
      "application/vnd.ims.imsccv1p1": {
        source: "iana"
      },
      "application/vnd.ims.imsccv1p2": {
        source: "iana"
      },
      "application/vnd.ims.imsccv1p3": {
        source: "iana"
      },
      "application/vnd.ims.lis.v2.result+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolconsumerprofile+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolproxy+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolproxy.id+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolsettings+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolsettings.simple+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.informedcontrol.rms+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.informix-visionary": {
        source: "iana"
      },
      "application/vnd.infotech.project": {
        source: "iana"
      },
      "application/vnd.infotech.project+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.innopath.wamp.notification": {
        source: "iana"
      },
      "application/vnd.insors.igm": {
        source: "iana",
        extensions: ["igm"]
      },
      "application/vnd.intercon.formnet": {
        source: "iana",
        extensions: ["xpw", "xpx"]
      },
      "application/vnd.intergeo": {
        source: "iana",
        extensions: ["i2g"]
      },
      "application/vnd.intertrust.digibox": {
        source: "iana"
      },
      "application/vnd.intertrust.nncp": {
        source: "iana"
      },
      "application/vnd.intu.qbo": {
        source: "iana",
        extensions: ["qbo"]
      },
      "application/vnd.intu.qfx": {
        source: "iana",
        extensions: ["qfx"]
      },
      "application/vnd.iptc.g2.catalogitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.conceptitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.knowledgeitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.newsitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.newsmessage+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.packageitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.planningitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ipunplugged.rcprofile": {
        source: "iana",
        extensions: ["rcprofile"]
      },
      "application/vnd.irepository.package+xml": {
        source: "iana",
        compressible: true,
        extensions: ["irp"]
      },
      "application/vnd.is-xpr": {
        source: "iana",
        extensions: ["xpr"]
      },
      "application/vnd.isac.fcs": {
        source: "iana",
        extensions: ["fcs"]
      },
      "application/vnd.iso11783-10+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.jam": {
        source: "iana",
        extensions: ["jam"]
      },
      "application/vnd.japannet-directory-service": {
        source: "iana"
      },
      "application/vnd.japannet-jpnstore-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-payment-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-registration": {
        source: "iana"
      },
      "application/vnd.japannet-registration-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-setstore-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-verification": {
        source: "iana"
      },
      "application/vnd.japannet-verification-wakeup": {
        source: "iana"
      },
      "application/vnd.jcp.javame.midlet-rms": {
        source: "iana",
        extensions: ["rms"]
      },
      "application/vnd.jisp": {
        source: "iana",
        extensions: ["jisp"]
      },
      "application/vnd.joost.joda-archive": {
        source: "iana",
        extensions: ["joda"]
      },
      "application/vnd.jsk.isdn-ngn": {
        source: "iana"
      },
      "application/vnd.kahootz": {
        source: "iana",
        extensions: ["ktz", "ktr"]
      },
      "application/vnd.kde.karbon": {
        source: "iana",
        extensions: ["karbon"]
      },
      "application/vnd.kde.kchart": {
        source: "iana",
        extensions: ["chrt"]
      },
      "application/vnd.kde.kformula": {
        source: "iana",
        extensions: ["kfo"]
      },
      "application/vnd.kde.kivio": {
        source: "iana",
        extensions: ["flw"]
      },
      "application/vnd.kde.kontour": {
        source: "iana",
        extensions: ["kon"]
      },
      "application/vnd.kde.kpresenter": {
        source: "iana",
        extensions: ["kpr", "kpt"]
      },
      "application/vnd.kde.kspread": {
        source: "iana",
        extensions: ["ksp"]
      },
      "application/vnd.kde.kword": {
        source: "iana",
        extensions: ["kwd", "kwt"]
      },
      "application/vnd.kenameaapp": {
        source: "iana",
        extensions: ["htke"]
      },
      "application/vnd.kidspiration": {
        source: "iana",
        extensions: ["kia"]
      },
      "application/vnd.kinar": {
        source: "iana",
        extensions: ["kne", "knp"]
      },
      "application/vnd.koan": {
        source: "iana",
        extensions: ["skp", "skd", "skt", "skm"]
      },
      "application/vnd.kodak-descriptor": {
        source: "iana",
        extensions: ["sse"]
      },
      "application/vnd.las": {
        source: "iana"
      },
      "application/vnd.las.las+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.las.las+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lasxml"]
      },
      "application/vnd.laszip": {
        source: "iana"
      },
      "application/vnd.leap+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.liberty-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.llamagraphics.life-balance.desktop": {
        source: "iana",
        extensions: ["lbd"]
      },
      "application/vnd.llamagraphics.life-balance.exchange+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lbe"]
      },
      "application/vnd.logipipe.circuit+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.loom": {
        source: "iana"
      },
      "application/vnd.lotus-1-2-3": {
        source: "iana",
        extensions: ["123"]
      },
      "application/vnd.lotus-approach": {
        source: "iana",
        extensions: ["apr"]
      },
      "application/vnd.lotus-freelance": {
        source: "iana",
        extensions: ["pre"]
      },
      "application/vnd.lotus-notes": {
        source: "iana",
        extensions: ["nsf"]
      },
      "application/vnd.lotus-organizer": {
        source: "iana",
        extensions: ["org"]
      },
      "application/vnd.lotus-screencam": {
        source: "iana",
        extensions: ["scm"]
      },
      "application/vnd.lotus-wordpro": {
        source: "iana",
        extensions: ["lwp"]
      },
      "application/vnd.macports.portpkg": {
        source: "iana",
        extensions: ["portpkg"]
      },
      "application/vnd.mapbox-vector-tile": {
        source: "iana",
        extensions: ["mvt"]
      },
      "application/vnd.marlin.drm.actiontoken+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.marlin.drm.conftoken+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.marlin.drm.license+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.marlin.drm.mdcf": {
        source: "iana"
      },
      "application/vnd.mason+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.maxar.archive.3tz+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.maxmind.maxmind-db": {
        source: "iana"
      },
      "application/vnd.mcd": {
        source: "iana",
        extensions: ["mcd"]
      },
      "application/vnd.medcalcdata": {
        source: "iana",
        extensions: ["mc1"]
      },
      "application/vnd.mediastation.cdkey": {
        source: "iana",
        extensions: ["cdkey"]
      },
      "application/vnd.meridian-slingshot": {
        source: "iana"
      },
      "application/vnd.mfer": {
        source: "iana",
        extensions: ["mwf"]
      },
      "application/vnd.mfmp": {
        source: "iana",
        extensions: ["mfm"]
      },
      "application/vnd.micro+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.micrografx.flo": {
        source: "iana",
        extensions: ["flo"]
      },
      "application/vnd.micrografx.igx": {
        source: "iana",
        extensions: ["igx"]
      },
      "application/vnd.microsoft.portable-executable": {
        source: "iana"
      },
      "application/vnd.microsoft.windows.thumbnail-cache": {
        source: "iana"
      },
      "application/vnd.miele+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.mif": {
        source: "iana",
        extensions: ["mif"]
      },
      "application/vnd.minisoft-hp3000-save": {
        source: "iana"
      },
      "application/vnd.mitsubishi.misty-guard.trustweb": {
        source: "iana"
      },
      "application/vnd.mobius.daf": {
        source: "iana",
        extensions: ["daf"]
      },
      "application/vnd.mobius.dis": {
        source: "iana",
        extensions: ["dis"]
      },
      "application/vnd.mobius.mbk": {
        source: "iana",
        extensions: ["mbk"]
      },
      "application/vnd.mobius.mqy": {
        source: "iana",
        extensions: ["mqy"]
      },
      "application/vnd.mobius.msl": {
        source: "iana",
        extensions: ["msl"]
      },
      "application/vnd.mobius.plc": {
        source: "iana",
        extensions: ["plc"]
      },
      "application/vnd.mobius.txf": {
        source: "iana",
        extensions: ["txf"]
      },
      "application/vnd.mophun.application": {
        source: "iana",
        extensions: ["mpn"]
      },
      "application/vnd.mophun.certificate": {
        source: "iana",
        extensions: ["mpc"]
      },
      "application/vnd.motorola.flexsuite": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.adsi": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.fis": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.gotap": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.kmr": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.ttc": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.wem": {
        source: "iana"
      },
      "application/vnd.motorola.iprm": {
        source: "iana"
      },
      "application/vnd.mozilla.xul+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xul"]
      },
      "application/vnd.ms-3mfdocument": {
        source: "iana"
      },
      "application/vnd.ms-artgalry": {
        source: "iana",
        extensions: ["cil"]
      },
      "application/vnd.ms-asf": {
        source: "iana"
      },
      "application/vnd.ms-cab-compressed": {
        source: "iana",
        extensions: ["cab"]
      },
      "application/vnd.ms-color.iccprofile": {
        source: "apache"
      },
      "application/vnd.ms-excel": {
        source: "iana",
        compressible: false,
        extensions: ["xls", "xlm", "xla", "xlc", "xlt", "xlw"]
      },
      "application/vnd.ms-excel.addin.macroenabled.12": {
        source: "iana",
        extensions: ["xlam"]
      },
      "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
        source: "iana",
        extensions: ["xlsb"]
      },
      "application/vnd.ms-excel.sheet.macroenabled.12": {
        source: "iana",
        extensions: ["xlsm"]
      },
      "application/vnd.ms-excel.template.macroenabled.12": {
        source: "iana",
        extensions: ["xltm"]
      },
      "application/vnd.ms-fontobject": {
        source: "iana",
        compressible: true,
        extensions: ["eot"]
      },
      "application/vnd.ms-htmlhelp": {
        source: "iana",
        extensions: ["chm"]
      },
      "application/vnd.ms-ims": {
        source: "iana",
        extensions: ["ims"]
      },
      "application/vnd.ms-lrm": {
        source: "iana",
        extensions: ["lrm"]
      },
      "application/vnd.ms-office.activex+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-officetheme": {
        source: "iana",
        extensions: ["thmx"]
      },
      "application/vnd.ms-opentype": {
        source: "apache",
        compressible: true
      },
      "application/vnd.ms-outlook": {
        compressible: false,
        extensions: ["msg"]
      },
      "application/vnd.ms-package.obfuscated-opentype": {
        source: "apache"
      },
      "application/vnd.ms-pki.seccat": {
        source: "apache",
        extensions: ["cat"]
      },
      "application/vnd.ms-pki.stl": {
        source: "apache",
        extensions: ["stl"]
      },
      "application/vnd.ms-playready.initiator+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-powerpoint": {
        source: "iana",
        compressible: false,
        extensions: ["ppt", "pps", "pot"]
      },
      "application/vnd.ms-powerpoint.addin.macroenabled.12": {
        source: "iana",
        extensions: ["ppam"]
      },
      "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
        source: "iana",
        extensions: ["pptm"]
      },
      "application/vnd.ms-powerpoint.slide.macroenabled.12": {
        source: "iana",
        extensions: ["sldm"]
      },
      "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
        source: "iana",
        extensions: ["ppsm"]
      },
      "application/vnd.ms-powerpoint.template.macroenabled.12": {
        source: "iana",
        extensions: ["potm"]
      },
      "application/vnd.ms-printdevicecapabilities+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-printing.printticket+xml": {
        source: "apache",
        compressible: true
      },
      "application/vnd.ms-printschematicket+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-project": {
        source: "iana",
        extensions: ["mpp", "mpt"]
      },
      "application/vnd.ms-tnef": {
        source: "iana"
      },
      "application/vnd.ms-windows.devicepairing": {
        source: "iana"
      },
      "application/vnd.ms-windows.nwprinting.oob": {
        source: "iana"
      },
      "application/vnd.ms-windows.printerpairing": {
        source: "iana"
      },
      "application/vnd.ms-windows.wsd.oob": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.lic-chlg-req": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.lic-resp": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.meter-chlg-req": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.meter-resp": {
        source: "iana"
      },
      "application/vnd.ms-word.document.macroenabled.12": {
        source: "iana",
        extensions: ["docm"]
      },
      "application/vnd.ms-word.template.macroenabled.12": {
        source: "iana",
        extensions: ["dotm"]
      },
      "application/vnd.ms-works": {
        source: "iana",
        extensions: ["wps", "wks", "wcm", "wdb"]
      },
      "application/vnd.ms-wpl": {
        source: "iana",
        extensions: ["wpl"]
      },
      "application/vnd.ms-xpsdocument": {
        source: "iana",
        compressible: false,
        extensions: ["xps"]
      },
      "application/vnd.msa-disk-image": {
        source: "iana"
      },
      "application/vnd.mseq": {
        source: "iana",
        extensions: ["mseq"]
      },
      "application/vnd.msign": {
        source: "iana"
      },
      "application/vnd.multiad.creator": {
        source: "iana"
      },
      "application/vnd.multiad.creator.cif": {
        source: "iana"
      },
      "application/vnd.music-niff": {
        source: "iana"
      },
      "application/vnd.musician": {
        source: "iana",
        extensions: ["mus"]
      },
      "application/vnd.muvee.style": {
        source: "iana",
        extensions: ["msty"]
      },
      "application/vnd.mynfc": {
        source: "iana",
        extensions: ["taglet"]
      },
      "application/vnd.nacamar.ybrid+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ncd.control": {
        source: "iana"
      },
      "application/vnd.ncd.reference": {
        source: "iana"
      },
      "application/vnd.nearst.inv+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nebumind.line": {
        source: "iana"
      },
      "application/vnd.nervana": {
        source: "iana"
      },
      "application/vnd.netfpx": {
        source: "iana"
      },
      "application/vnd.neurolanguage.nlu": {
        source: "iana",
        extensions: ["nlu"]
      },
      "application/vnd.nimn": {
        source: "iana"
      },
      "application/vnd.nintendo.nitro.rom": {
        source: "iana"
      },
      "application/vnd.nintendo.snes.rom": {
        source: "iana"
      },
      "application/vnd.nitf": {
        source: "iana",
        extensions: ["ntf", "nitf"]
      },
      "application/vnd.noblenet-directory": {
        source: "iana",
        extensions: ["nnd"]
      },
      "application/vnd.noblenet-sealer": {
        source: "iana",
        extensions: ["nns"]
      },
      "application/vnd.noblenet-web": {
        source: "iana",
        extensions: ["nnw"]
      },
      "application/vnd.nokia.catalogs": {
        source: "iana"
      },
      "application/vnd.nokia.conml+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.conml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.iptv.config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.isds-radio-presets": {
        source: "iana"
      },
      "application/vnd.nokia.landmark+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.landmark+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.landmarkcollection+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.n-gage.ac+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ac"]
      },
      "application/vnd.nokia.n-gage.data": {
        source: "iana",
        extensions: ["ngdat"]
      },
      "application/vnd.nokia.n-gage.symbian.install": {
        source: "iana",
        extensions: ["n-gage"]
      },
      "application/vnd.nokia.ncd": {
        source: "iana"
      },
      "application/vnd.nokia.pcd+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.pcd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.radio-preset": {
        source: "iana",
        extensions: ["rpst"]
      },
      "application/vnd.nokia.radio-presets": {
        source: "iana",
        extensions: ["rpss"]
      },
      "application/vnd.novadigm.edm": {
        source: "iana",
        extensions: ["edm"]
      },
      "application/vnd.novadigm.edx": {
        source: "iana",
        extensions: ["edx"]
      },
      "application/vnd.novadigm.ext": {
        source: "iana",
        extensions: ["ext"]
      },
      "application/vnd.ntt-local.content-share": {
        source: "iana"
      },
      "application/vnd.ntt-local.file-transfer": {
        source: "iana"
      },
      "application/vnd.ntt-local.ogw_remote-access": {
        source: "iana"
      },
      "application/vnd.ntt-local.sip-ta_remote": {
        source: "iana"
      },
      "application/vnd.ntt-local.sip-ta_tcp_stream": {
        source: "iana"
      },
      "application/vnd.oasis.opendocument.chart": {
        source: "iana",
        extensions: ["odc"]
      },
      "application/vnd.oasis.opendocument.chart-template": {
        source: "iana",
        extensions: ["otc"]
      },
      "application/vnd.oasis.opendocument.database": {
        source: "iana",
        extensions: ["odb"]
      },
      "application/vnd.oasis.opendocument.formula": {
        source: "iana",
        extensions: ["odf"]
      },
      "application/vnd.oasis.opendocument.formula-template": {
        source: "iana",
        extensions: ["odft"]
      },
      "application/vnd.oasis.opendocument.graphics": {
        source: "iana",
        compressible: false,
        extensions: ["odg"]
      },
      "application/vnd.oasis.opendocument.graphics-template": {
        source: "iana",
        extensions: ["otg"]
      },
      "application/vnd.oasis.opendocument.image": {
        source: "iana",
        extensions: ["odi"]
      },
      "application/vnd.oasis.opendocument.image-template": {
        source: "iana",
        extensions: ["oti"]
      },
      "application/vnd.oasis.opendocument.presentation": {
        source: "iana",
        compressible: false,
        extensions: ["odp"]
      },
      "application/vnd.oasis.opendocument.presentation-template": {
        source: "iana",
        extensions: ["otp"]
      },
      "application/vnd.oasis.opendocument.spreadsheet": {
        source: "iana",
        compressible: false,
        extensions: ["ods"]
      },
      "application/vnd.oasis.opendocument.spreadsheet-template": {
        source: "iana",
        extensions: ["ots"]
      },
      "application/vnd.oasis.opendocument.text": {
        source: "iana",
        compressible: false,
        extensions: ["odt"]
      },
      "application/vnd.oasis.opendocument.text-master": {
        source: "iana",
        extensions: ["odm"]
      },
      "application/vnd.oasis.opendocument.text-template": {
        source: "iana",
        extensions: ["ott"]
      },
      "application/vnd.oasis.opendocument.text-web": {
        source: "iana",
        extensions: ["oth"]
      },
      "application/vnd.obn": {
        source: "iana"
      },
      "application/vnd.ocf+cbor": {
        source: "iana"
      },
      "application/vnd.oci.image.manifest.v1+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oftn.l10n+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.contentaccessdownload+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.contentaccessstreaming+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.cspg-hexbinary": {
        source: "iana"
      },
      "application/vnd.oipf.dae.svg+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.dae.xhtml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.mippvcontrolmessage+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.pae.gem": {
        source: "iana"
      },
      "application/vnd.oipf.spdiscovery+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.spdlist+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.ueprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.userprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.olpc-sugar": {
        source: "iana",
        extensions: ["xo"]
      },
      "application/vnd.oma-scws-config": {
        source: "iana"
      },
      "application/vnd.oma-scws-http-request": {
        source: "iana"
      },
      "application/vnd.oma-scws-http-response": {
        source: "iana"
      },
      "application/vnd.oma.bcast.associated-procedure-parameter+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.drm-trigger+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.imd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.ltkm": {
        source: "iana"
      },
      "application/vnd.oma.bcast.notification+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.provisioningtrigger": {
        source: "iana"
      },
      "application/vnd.oma.bcast.sgboot": {
        source: "iana"
      },
      "application/vnd.oma.bcast.sgdd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.sgdu": {
        source: "iana"
      },
      "application/vnd.oma.bcast.simple-symbol-container": {
        source: "iana"
      },
      "application/vnd.oma.bcast.smartcard-trigger+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.sprov+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.stkm": {
        source: "iana"
      },
      "application/vnd.oma.cab-address-book+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-feature-handler+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-pcc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-subs-invite+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-user-prefs+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.dcd": {
        source: "iana"
      },
      "application/vnd.oma.dcdc": {
        source: "iana"
      },
      "application/vnd.oma.dd2+xml": {
        source: "iana",
        compressible: true,
        extensions: ["dd2"]
      },
      "application/vnd.oma.drm.risd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.group-usage-list+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.lwm2m+cbor": {
        source: "iana"
      },
      "application/vnd.oma.lwm2m+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.lwm2m+tlv": {
        source: "iana"
      },
      "application/vnd.oma.pal+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.detailed-progress-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.final-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.groups+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.invocation-descriptor+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.optimized-progress-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.push": {
        source: "iana"
      },
      "application/vnd.oma.scidm.messages+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.xcap-directory+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.omads-email+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.omads-file+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.omads-folder+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.omaloc-supl-init": {
        source: "iana"
      },
      "application/vnd.onepager": {
        source: "iana"
      },
      "application/vnd.onepagertamp": {
        source: "iana"
      },
      "application/vnd.onepagertamx": {
        source: "iana"
      },
      "application/vnd.onepagertat": {
        source: "iana"
      },
      "application/vnd.onepagertatp": {
        source: "iana"
      },
      "application/vnd.onepagertatx": {
        source: "iana"
      },
      "application/vnd.openblox.game+xml": {
        source: "iana",
        compressible: true,
        extensions: ["obgx"]
      },
      "application/vnd.openblox.game-binary": {
        source: "iana"
      },
      "application/vnd.openeye.oeb": {
        source: "iana"
      },
      "application/vnd.openofficeorg.extension": {
        source: "apache",
        extensions: ["oxt"]
      },
      "application/vnd.openstreetmap.data+xml": {
        source: "iana",
        compressible: true,
        extensions: ["osm"]
      },
      "application/vnd.opentimestamps.ots": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.custom-properties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawing+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.extended-properties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
        source: "iana",
        compressible: false,
        extensions: ["pptx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slide": {
        source: "iana",
        extensions: ["sldx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
        source: "iana",
        extensions: ["ppsx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.template": {
        source: "iana",
        extensions: ["potx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
        source: "iana",
        compressible: false,
        extensions: ["xlsx"]
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
        source: "iana",
        extensions: ["xltx"]
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.theme+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.themeoverride+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.vmldrawing": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
        source: "iana",
        compressible: false,
        extensions: ["docx"]
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
        source: "iana",
        extensions: ["dotx"]
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-package.core-properties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-package.relationships+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oracle.resource+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.orange.indata": {
        source: "iana"
      },
      "application/vnd.osa.netdeploy": {
        source: "iana"
      },
      "application/vnd.osgeo.mapguide.package": {
        source: "iana",
        extensions: ["mgp"]
      },
      "application/vnd.osgi.bundle": {
        source: "iana"
      },
      "application/vnd.osgi.dp": {
        source: "iana",
        extensions: ["dp"]
      },
      "application/vnd.osgi.subsystem": {
        source: "iana",
        extensions: ["esa"]
      },
      "application/vnd.otps.ct-kip+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oxli.countgraph": {
        source: "iana"
      },
      "application/vnd.pagerduty+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.palm": {
        source: "iana",
        extensions: ["pdb", "pqa", "oprc"]
      },
      "application/vnd.panoply": {
        source: "iana"
      },
      "application/vnd.paos.xml": {
        source: "iana"
      },
      "application/vnd.patentdive": {
        source: "iana"
      },
      "application/vnd.patientecommsdoc": {
        source: "iana"
      },
      "application/vnd.pawaafile": {
        source: "iana",
        extensions: ["paw"]
      },
      "application/vnd.pcos": {
        source: "iana"
      },
      "application/vnd.pg.format": {
        source: "iana",
        extensions: ["str"]
      },
      "application/vnd.pg.osasli": {
        source: "iana",
        extensions: ["ei6"]
      },
      "application/vnd.piaccess.application-licence": {
        source: "iana"
      },
      "application/vnd.picsel": {
        source: "iana",
        extensions: ["efif"]
      },
      "application/vnd.pmi.widget": {
        source: "iana",
        extensions: ["wg"]
      },
      "application/vnd.poc.group-advertisement+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.pocketlearn": {
        source: "iana",
        extensions: ["plf"]
      },
      "application/vnd.powerbuilder6": {
        source: "iana",
        extensions: ["pbd"]
      },
      "application/vnd.powerbuilder6-s": {
        source: "iana"
      },
      "application/vnd.powerbuilder7": {
        source: "iana"
      },
      "application/vnd.powerbuilder7-s": {
        source: "iana"
      },
      "application/vnd.powerbuilder75": {
        source: "iana"
      },
      "application/vnd.powerbuilder75-s": {
        source: "iana"
      },
      "application/vnd.preminet": {
        source: "iana"
      },
      "application/vnd.previewsystems.box": {
        source: "iana",
        extensions: ["box"]
      },
      "application/vnd.proteus.magazine": {
        source: "iana",
        extensions: ["mgz"]
      },
      "application/vnd.psfs": {
        source: "iana"
      },
      "application/vnd.publishare-delta-tree": {
        source: "iana",
        extensions: ["qps"]
      },
      "application/vnd.pvi.ptid1": {
        source: "iana",
        extensions: ["ptid"]
      },
      "application/vnd.pwg-multiplexed": {
        source: "iana"
      },
      "application/vnd.pwg-xhtml-print+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.qualcomm.brew-app-res": {
        source: "iana"
      },
      "application/vnd.quarantainenet": {
        source: "iana"
      },
      "application/vnd.quark.quarkxpress": {
        source: "iana",
        extensions: ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"]
      },
      "application/vnd.quobject-quoxdocument": {
        source: "iana"
      },
      "application/vnd.radisys.moml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-conf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-conn+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-dialog+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-stream+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-conf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-base+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-fax-detect+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-group+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-speech+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-transform+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.rainstor.data": {
        source: "iana"
      },
      "application/vnd.rapid": {
        source: "iana"
      },
      "application/vnd.rar": {
        source: "iana",
        extensions: ["rar"]
      },
      "application/vnd.realvnc.bed": {
        source: "iana",
        extensions: ["bed"]
      },
      "application/vnd.recordare.musicxml": {
        source: "iana",
        extensions: ["mxl"]
      },
      "application/vnd.recordare.musicxml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["musicxml"]
      },
      "application/vnd.renlearn.rlprint": {
        source: "iana"
      },
      "application/vnd.resilient.logic": {
        source: "iana"
      },
      "application/vnd.restful+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.rig.cryptonote": {
        source: "iana",
        extensions: ["cryptonote"]
      },
      "application/vnd.rim.cod": {
        source: "apache",
        extensions: ["cod"]
      },
      "application/vnd.rn-realmedia": {
        source: "apache",
        extensions: ["rm"]
      },
      "application/vnd.rn-realmedia-vbr": {
        source: "apache",
        extensions: ["rmvb"]
      },
      "application/vnd.route66.link66+xml": {
        source: "iana",
        compressible: true,
        extensions: ["link66"]
      },
      "application/vnd.rs-274x": {
        source: "iana"
      },
      "application/vnd.ruckus.download": {
        source: "iana"
      },
      "application/vnd.s3sms": {
        source: "iana"
      },
      "application/vnd.sailingtracker.track": {
        source: "iana",
        extensions: ["st"]
      },
      "application/vnd.sar": {
        source: "iana"
      },
      "application/vnd.sbm.cid": {
        source: "iana"
      },
      "application/vnd.sbm.mid2": {
        source: "iana"
      },
      "application/vnd.scribus": {
        source: "iana"
      },
      "application/vnd.sealed.3df": {
        source: "iana"
      },
      "application/vnd.sealed.csf": {
        source: "iana"
      },
      "application/vnd.sealed.doc": {
        source: "iana"
      },
      "application/vnd.sealed.eml": {
        source: "iana"
      },
      "application/vnd.sealed.mht": {
        source: "iana"
      },
      "application/vnd.sealed.net": {
        source: "iana"
      },
      "application/vnd.sealed.ppt": {
        source: "iana"
      },
      "application/vnd.sealed.tiff": {
        source: "iana"
      },
      "application/vnd.sealed.xls": {
        source: "iana"
      },
      "application/vnd.sealedmedia.softseal.html": {
        source: "iana"
      },
      "application/vnd.sealedmedia.softseal.pdf": {
        source: "iana"
      },
      "application/vnd.seemail": {
        source: "iana",
        extensions: ["see"]
      },
      "application/vnd.seis+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.sema": {
        source: "iana",
        extensions: ["sema"]
      },
      "application/vnd.semd": {
        source: "iana",
        extensions: ["semd"]
      },
      "application/vnd.semf": {
        source: "iana",
        extensions: ["semf"]
      },
      "application/vnd.shade-save-file": {
        source: "iana"
      },
      "application/vnd.shana.informed.formdata": {
        source: "iana",
        extensions: ["ifm"]
      },
      "application/vnd.shana.informed.formtemplate": {
        source: "iana",
        extensions: ["itp"]
      },
      "application/vnd.shana.informed.interchange": {
        source: "iana",
        extensions: ["iif"]
      },
      "application/vnd.shana.informed.package": {
        source: "iana",
        extensions: ["ipk"]
      },
      "application/vnd.shootproof+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.shopkick+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.shp": {
        source: "iana"
      },
      "application/vnd.shx": {
        source: "iana"
      },
      "application/vnd.sigrok.session": {
        source: "iana"
      },
      "application/vnd.simtech-mindmapper": {
        source: "iana",
        extensions: ["twd", "twds"]
      },
      "application/vnd.siren+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.smaf": {
        source: "iana",
        extensions: ["mmf"]
      },
      "application/vnd.smart.notebook": {
        source: "iana"
      },
      "application/vnd.smart.teacher": {
        source: "iana",
        extensions: ["teacher"]
      },
      "application/vnd.snesdev-page-table": {
        source: "iana"
      },
      "application/vnd.software602.filler.form+xml": {
        source: "iana",
        compressible: true,
        extensions: ["fo"]
      },
      "application/vnd.software602.filler.form-xml-zip": {
        source: "iana"
      },
      "application/vnd.solent.sdkm+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sdkm", "sdkd"]
      },
      "application/vnd.spotfire.dxp": {
        source: "iana",
        extensions: ["dxp"]
      },
      "application/vnd.spotfire.sfs": {
        source: "iana",
        extensions: ["sfs"]
      },
      "application/vnd.sqlite3": {
        source: "iana"
      },
      "application/vnd.sss-cod": {
        source: "iana"
      },
      "application/vnd.sss-dtf": {
        source: "iana"
      },
      "application/vnd.sss-ntf": {
        source: "iana"
      },
      "application/vnd.stardivision.calc": {
        source: "apache",
        extensions: ["sdc"]
      },
      "application/vnd.stardivision.draw": {
        source: "apache",
        extensions: ["sda"]
      },
      "application/vnd.stardivision.impress": {
        source: "apache",
        extensions: ["sdd"]
      },
      "application/vnd.stardivision.math": {
        source: "apache",
        extensions: ["smf"]
      },
      "application/vnd.stardivision.writer": {
        source: "apache",
        extensions: ["sdw", "vor"]
      },
      "application/vnd.stardivision.writer-global": {
        source: "apache",
        extensions: ["sgl"]
      },
      "application/vnd.stepmania.package": {
        source: "iana",
        extensions: ["smzip"]
      },
      "application/vnd.stepmania.stepchart": {
        source: "iana",
        extensions: ["sm"]
      },
      "application/vnd.street-stream": {
        source: "iana"
      },
      "application/vnd.sun.wadl+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wadl"]
      },
      "application/vnd.sun.xml.calc": {
        source: "apache",
        extensions: ["sxc"]
      },
      "application/vnd.sun.xml.calc.template": {
        source: "apache",
        extensions: ["stc"]
      },
      "application/vnd.sun.xml.draw": {
        source: "apache",
        extensions: ["sxd"]
      },
      "application/vnd.sun.xml.draw.template": {
        source: "apache",
        extensions: ["std"]
      },
      "application/vnd.sun.xml.impress": {
        source: "apache",
        extensions: ["sxi"]
      },
      "application/vnd.sun.xml.impress.template": {
        source: "apache",
        extensions: ["sti"]
      },
      "application/vnd.sun.xml.math": {
        source: "apache",
        extensions: ["sxm"]
      },
      "application/vnd.sun.xml.writer": {
        source: "apache",
        extensions: ["sxw"]
      },
      "application/vnd.sun.xml.writer.global": {
        source: "apache",
        extensions: ["sxg"]
      },
      "application/vnd.sun.xml.writer.template": {
        source: "apache",
        extensions: ["stw"]
      },
      "application/vnd.sus-calendar": {
        source: "iana",
        extensions: ["sus", "susp"]
      },
      "application/vnd.svd": {
        source: "iana",
        extensions: ["svd"]
      },
      "application/vnd.swiftview-ics": {
        source: "iana"
      },
      "application/vnd.sycle+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.syft+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.symbian.install": {
        source: "apache",
        extensions: ["sis", "sisx"]
      },
      "application/vnd.syncml+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["xsm"]
      },
      "application/vnd.syncml.dm+wbxml": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["bdm"]
      },
      "application/vnd.syncml.dm+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["xdm"]
      },
      "application/vnd.syncml.dm.notification": {
        source: "iana"
      },
      "application/vnd.syncml.dmddf+wbxml": {
        source: "iana"
      },
      "application/vnd.syncml.dmddf+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["ddf"]
      },
      "application/vnd.syncml.dmtnds+wbxml": {
        source: "iana"
      },
      "application/vnd.syncml.dmtnds+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.syncml.ds.notification": {
        source: "iana"
      },
      "application/vnd.tableschema+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.tao.intent-module-archive": {
        source: "iana",
        extensions: ["tao"]
      },
      "application/vnd.tcpdump.pcap": {
        source: "iana",
        extensions: ["pcap", "cap", "dmp"]
      },
      "application/vnd.think-cell.ppttc+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.tmd.mediaflex.api+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.tml": {
        source: "iana"
      },
      "application/vnd.tmobile-livetv": {
        source: "iana",
        extensions: ["tmo"]
      },
      "application/vnd.tri.onesource": {
        source: "iana"
      },
      "application/vnd.trid.tpt": {
        source: "iana",
        extensions: ["tpt"]
      },
      "application/vnd.triscape.mxs": {
        source: "iana",
        extensions: ["mxs"]
      },
      "application/vnd.trueapp": {
        source: "iana",
        extensions: ["tra"]
      },
      "application/vnd.truedoc": {
        source: "iana"
      },
      "application/vnd.ubisoft.webplayer": {
        source: "iana"
      },
      "application/vnd.ufdl": {
        source: "iana",
        extensions: ["ufd", "ufdl"]
      },
      "application/vnd.uiq.theme": {
        source: "iana",
        extensions: ["utz"]
      },
      "application/vnd.umajin": {
        source: "iana",
        extensions: ["umj"]
      },
      "application/vnd.unity": {
        source: "iana",
        extensions: ["unityweb"]
      },
      "application/vnd.uoml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["uoml"]
      },
      "application/vnd.uplanet.alert": {
        source: "iana"
      },
      "application/vnd.uplanet.alert-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.bearer-choice": {
        source: "iana"
      },
      "application/vnd.uplanet.bearer-choice-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.cacheop": {
        source: "iana"
      },
      "application/vnd.uplanet.cacheop-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.channel": {
        source: "iana"
      },
      "application/vnd.uplanet.channel-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.list": {
        source: "iana"
      },
      "application/vnd.uplanet.list-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.listcmd": {
        source: "iana"
      },
      "application/vnd.uplanet.listcmd-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.signal": {
        source: "iana"
      },
      "application/vnd.uri-map": {
        source: "iana"
      },
      "application/vnd.valve.source.material": {
        source: "iana"
      },
      "application/vnd.vcx": {
        source: "iana",
        extensions: ["vcx"]
      },
      "application/vnd.vd-study": {
        source: "iana"
      },
      "application/vnd.vectorworks": {
        source: "iana"
      },
      "application/vnd.vel+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.verimatrix.vcas": {
        source: "iana"
      },
      "application/vnd.veritone.aion+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.veryant.thin": {
        source: "iana"
      },
      "application/vnd.ves.encrypted": {
        source: "iana"
      },
      "application/vnd.vidsoft.vidconference": {
        source: "iana"
      },
      "application/vnd.visio": {
        source: "iana",
        extensions: ["vsd", "vst", "vss", "vsw"]
      },
      "application/vnd.visionary": {
        source: "iana",
        extensions: ["vis"]
      },
      "application/vnd.vividence.scriptfile": {
        source: "iana"
      },
      "application/vnd.vsf": {
        source: "iana",
        extensions: ["vsf"]
      },
      "application/vnd.wap.sic": {
        source: "iana"
      },
      "application/vnd.wap.slc": {
        source: "iana"
      },
      "application/vnd.wap.wbxml": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["wbxml"]
      },
      "application/vnd.wap.wmlc": {
        source: "iana",
        extensions: ["wmlc"]
      },
      "application/vnd.wap.wmlscriptc": {
        source: "iana",
        extensions: ["wmlsc"]
      },
      "application/vnd.webturbo": {
        source: "iana",
        extensions: ["wtb"]
      },
      "application/vnd.wfa.dpp": {
        source: "iana"
      },
      "application/vnd.wfa.p2p": {
        source: "iana"
      },
      "application/vnd.wfa.wsc": {
        source: "iana"
      },
      "application/vnd.windows.devicepairing": {
        source: "iana"
      },
      "application/vnd.wmc": {
        source: "iana"
      },
      "application/vnd.wmf.bootstrap": {
        source: "iana"
      },
      "application/vnd.wolfram.mathematica": {
        source: "iana"
      },
      "application/vnd.wolfram.mathematica.package": {
        source: "iana"
      },
      "application/vnd.wolfram.player": {
        source: "iana",
        extensions: ["nbp"]
      },
      "application/vnd.wordperfect": {
        source: "iana",
        extensions: ["wpd"]
      },
      "application/vnd.wqd": {
        source: "iana",
        extensions: ["wqd"]
      },
      "application/vnd.wrq-hp3000-labelled": {
        source: "iana"
      },
      "application/vnd.wt.stf": {
        source: "iana",
        extensions: ["stf"]
      },
      "application/vnd.wv.csp+wbxml": {
        source: "iana"
      },
      "application/vnd.wv.csp+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.wv.ssp+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.xacml+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.xara": {
        source: "iana",
        extensions: ["xar"]
      },
      "application/vnd.xfdl": {
        source: "iana",
        extensions: ["xfdl"]
      },
      "application/vnd.xfdl.webform": {
        source: "iana"
      },
      "application/vnd.xmi+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.xmpie.cpkg": {
        source: "iana"
      },
      "application/vnd.xmpie.dpkg": {
        source: "iana"
      },
      "application/vnd.xmpie.plan": {
        source: "iana"
      },
      "application/vnd.xmpie.ppkg": {
        source: "iana"
      },
      "application/vnd.xmpie.xlim": {
        source: "iana"
      },
      "application/vnd.yamaha.hv-dic": {
        source: "iana",
        extensions: ["hvd"]
      },
      "application/vnd.yamaha.hv-script": {
        source: "iana",
        extensions: ["hvs"]
      },
      "application/vnd.yamaha.hv-voice": {
        source: "iana",
        extensions: ["hvp"]
      },
      "application/vnd.yamaha.openscoreformat": {
        source: "iana",
        extensions: ["osf"]
      },
      "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
        source: "iana",
        compressible: true,
        extensions: ["osfpvg"]
      },
      "application/vnd.yamaha.remote-setup": {
        source: "iana"
      },
      "application/vnd.yamaha.smaf-audio": {
        source: "iana",
        extensions: ["saf"]
      },
      "application/vnd.yamaha.smaf-phrase": {
        source: "iana",
        extensions: ["spf"]
      },
      "application/vnd.yamaha.through-ngn": {
        source: "iana"
      },
      "application/vnd.yamaha.tunnel-udpencap": {
        source: "iana"
      },
      "application/vnd.yaoweme": {
        source: "iana"
      },
      "application/vnd.yellowriver-custom-menu": {
        source: "iana",
        extensions: ["cmp"]
      },
      "application/vnd.youtube.yt": {
        source: "iana"
      },
      "application/vnd.zul": {
        source: "iana",
        extensions: ["zir", "zirz"]
      },
      "application/vnd.zzazz.deck+xml": {
        source: "iana",
        compressible: true,
        extensions: ["zaz"]
      },
      "application/voicexml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["vxml"]
      },
      "application/voucher-cms+json": {
        source: "iana",
        compressible: true
      },
      "application/vq-rtcpxr": {
        source: "iana"
      },
      "application/wasm": {
        source: "iana",
        compressible: true,
        extensions: ["wasm"]
      },
      "application/watcherinfo+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wif"]
      },
      "application/webpush-options+json": {
        source: "iana",
        compressible: true
      },
      "application/whoispp-query": {
        source: "iana"
      },
      "application/whoispp-response": {
        source: "iana"
      },
      "application/widget": {
        source: "iana",
        extensions: ["wgt"]
      },
      "application/winhlp": {
        source: "apache",
        extensions: ["hlp"]
      },
      "application/wita": {
        source: "iana"
      },
      "application/wordperfect5.1": {
        source: "iana"
      },
      "application/wsdl+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wsdl"]
      },
      "application/wspolicy+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wspolicy"]
      },
      "application/x-7z-compressed": {
        source: "apache",
        compressible: false,
        extensions: ["7z"]
      },
      "application/x-abiword": {
        source: "apache",
        extensions: ["abw"]
      },
      "application/x-ace-compressed": {
        source: "apache",
        extensions: ["ace"]
      },
      "application/x-amf": {
        source: "apache"
      },
      "application/x-apple-diskimage": {
        source: "apache",
        extensions: ["dmg"]
      },
      "application/x-arj": {
        compressible: false,
        extensions: ["arj"]
      },
      "application/x-authorware-bin": {
        source: "apache",
        extensions: ["aab", "x32", "u32", "vox"]
      },
      "application/x-authorware-map": {
        source: "apache",
        extensions: ["aam"]
      },
      "application/x-authorware-seg": {
        source: "apache",
        extensions: ["aas"]
      },
      "application/x-bcpio": {
        source: "apache",
        extensions: ["bcpio"]
      },
      "application/x-bdoc": {
        compressible: false,
        extensions: ["bdoc"]
      },
      "application/x-bittorrent": {
        source: "apache",
        extensions: ["torrent"]
      },
      "application/x-blorb": {
        source: "apache",
        extensions: ["blb", "blorb"]
      },
      "application/x-bzip": {
        source: "apache",
        compressible: false,
        extensions: ["bz"]
      },
      "application/x-bzip2": {
        source: "apache",
        compressible: false,
        extensions: ["bz2", "boz"]
      },
      "application/x-cbr": {
        source: "apache",
        extensions: ["cbr", "cba", "cbt", "cbz", "cb7"]
      },
      "application/x-cdlink": {
        source: "apache",
        extensions: ["vcd"]
      },
      "application/x-cfs-compressed": {
        source: "apache",
        extensions: ["cfs"]
      },
      "application/x-chat": {
        source: "apache",
        extensions: ["chat"]
      },
      "application/x-chess-pgn": {
        source: "apache",
        extensions: ["pgn"]
      },
      "application/x-chrome-extension": {
        extensions: ["crx"]
      },
      "application/x-cocoa": {
        source: "nginx",
        extensions: ["cco"]
      },
      "application/x-compress": {
        source: "apache"
      },
      "application/x-conference": {
        source: "apache",
        extensions: ["nsc"]
      },
      "application/x-cpio": {
        source: "apache",
        extensions: ["cpio"]
      },
      "application/x-csh": {
        source: "apache",
        extensions: ["csh"]
      },
      "application/x-deb": {
        compressible: false
      },
      "application/x-debian-package": {
        source: "apache",
        extensions: ["deb", "udeb"]
      },
      "application/x-dgc-compressed": {
        source: "apache",
        extensions: ["dgc"]
      },
      "application/x-director": {
        source: "apache",
        extensions: ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"]
      },
      "application/x-doom": {
        source: "apache",
        extensions: ["wad"]
      },
      "application/x-dtbncx+xml": {
        source: "apache",
        compressible: true,
        extensions: ["ncx"]
      },
      "application/x-dtbook+xml": {
        source: "apache",
        compressible: true,
        extensions: ["dtb"]
      },
      "application/x-dtbresource+xml": {
        source: "apache",
        compressible: true,
        extensions: ["res"]
      },
      "application/x-dvi": {
        source: "apache",
        compressible: false,
        extensions: ["dvi"]
      },
      "application/x-envoy": {
        source: "apache",
        extensions: ["evy"]
      },
      "application/x-eva": {
        source: "apache",
        extensions: ["eva"]
      },
      "application/x-font-bdf": {
        source: "apache",
        extensions: ["bdf"]
      },
      "application/x-font-dos": {
        source: "apache"
      },
      "application/x-font-framemaker": {
        source: "apache"
      },
      "application/x-font-ghostscript": {
        source: "apache",
        extensions: ["gsf"]
      },
      "application/x-font-libgrx": {
        source: "apache"
      },
      "application/x-font-linux-psf": {
        source: "apache",
        extensions: ["psf"]
      },
      "application/x-font-pcf": {
        source: "apache",
        extensions: ["pcf"]
      },
      "application/x-font-snf": {
        source: "apache",
        extensions: ["snf"]
      },
      "application/x-font-speedo": {
        source: "apache"
      },
      "application/x-font-sunos-news": {
        source: "apache"
      },
      "application/x-font-type1": {
        source: "apache",
        extensions: ["pfa", "pfb", "pfm", "afm"]
      },
      "application/x-font-vfont": {
        source: "apache"
      },
      "application/x-freearc": {
        source: "apache",
        extensions: ["arc"]
      },
      "application/x-futuresplash": {
        source: "apache",
        extensions: ["spl"]
      },
      "application/x-gca-compressed": {
        source: "apache",
        extensions: ["gca"]
      },
      "application/x-glulx": {
        source: "apache",
        extensions: ["ulx"]
      },
      "application/x-gnumeric": {
        source: "apache",
        extensions: ["gnumeric"]
      },
      "application/x-gramps-xml": {
        source: "apache",
        extensions: ["gramps"]
      },
      "application/x-gtar": {
        source: "apache",
        extensions: ["gtar"]
      },
      "application/x-gzip": {
        source: "apache"
      },
      "application/x-hdf": {
        source: "apache",
        extensions: ["hdf"]
      },
      "application/x-httpd-php": {
        compressible: true,
        extensions: ["php"]
      },
      "application/x-install-instructions": {
        source: "apache",
        extensions: ["install"]
      },
      "application/x-iso9660-image": {
        source: "apache",
        extensions: ["iso"]
      },
      "application/x-iwork-keynote-sffkey": {
        extensions: ["key"]
      },
      "application/x-iwork-numbers-sffnumbers": {
        extensions: ["numbers"]
      },
      "application/x-iwork-pages-sffpages": {
        extensions: ["pages"]
      },
      "application/x-java-archive-diff": {
        source: "nginx",
        extensions: ["jardiff"]
      },
      "application/x-java-jnlp-file": {
        source: "apache",
        compressible: false,
        extensions: ["jnlp"]
      },
      "application/x-javascript": {
        compressible: true
      },
      "application/x-keepass2": {
        extensions: ["kdbx"]
      },
      "application/x-latex": {
        source: "apache",
        compressible: false,
        extensions: ["latex"]
      },
      "application/x-lua-bytecode": {
        extensions: ["luac"]
      },
      "application/x-lzh-compressed": {
        source: "apache",
        extensions: ["lzh", "lha"]
      },
      "application/x-makeself": {
        source: "nginx",
        extensions: ["run"]
      },
      "application/x-mie": {
        source: "apache",
        extensions: ["mie"]
      },
      "application/x-mobipocket-ebook": {
        source: "apache",
        extensions: ["prc", "mobi"]
      },
      "application/x-mpegurl": {
        compressible: false
      },
      "application/x-ms-application": {
        source: "apache",
        extensions: ["application"]
      },
      "application/x-ms-shortcut": {
        source: "apache",
        extensions: ["lnk"]
      },
      "application/x-ms-wmd": {
        source: "apache",
        extensions: ["wmd"]
      },
      "application/x-ms-wmz": {
        source: "apache",
        extensions: ["wmz"]
      },
      "application/x-ms-xbap": {
        source: "apache",
        extensions: ["xbap"]
      },
      "application/x-msaccess": {
        source: "apache",
        extensions: ["mdb"]
      },
      "application/x-msbinder": {
        source: "apache",
        extensions: ["obd"]
      },
      "application/x-mscardfile": {
        source: "apache",
        extensions: ["crd"]
      },
      "application/x-msclip": {
        source: "apache",
        extensions: ["clp"]
      },
      "application/x-msdos-program": {
        extensions: ["exe"]
      },
      "application/x-msdownload": {
        source: "apache",
        extensions: ["exe", "dll", "com", "bat", "msi"]
      },
      "application/x-msmediaview": {
        source: "apache",
        extensions: ["mvb", "m13", "m14"]
      },
      "application/x-msmetafile": {
        source: "apache",
        extensions: ["wmf", "wmz", "emf", "emz"]
      },
      "application/x-msmoney": {
        source: "apache",
        extensions: ["mny"]
      },
      "application/x-mspublisher": {
        source: "apache",
        extensions: ["pub"]
      },
      "application/x-msschedule": {
        source: "apache",
        extensions: ["scd"]
      },
      "application/x-msterminal": {
        source: "apache",
        extensions: ["trm"]
      },
      "application/x-mswrite": {
        source: "apache",
        extensions: ["wri"]
      },
      "application/x-netcdf": {
        source: "apache",
        extensions: ["nc", "cdf"]
      },
      "application/x-ns-proxy-autoconfig": {
        compressible: true,
        extensions: ["pac"]
      },
      "application/x-nzb": {
        source: "apache",
        extensions: ["nzb"]
      },
      "application/x-perl": {
        source: "nginx",
        extensions: ["pl", "pm"]
      },
      "application/x-pilot": {
        source: "nginx",
        extensions: ["prc", "pdb"]
      },
      "application/x-pkcs12": {
        source: "apache",
        compressible: false,
        extensions: ["p12", "pfx"]
      },
      "application/x-pkcs7-certificates": {
        source: "apache",
        extensions: ["p7b", "spc"]
      },
      "application/x-pkcs7-certreqresp": {
        source: "apache",
        extensions: ["p7r"]
      },
      "application/x-pki-message": {
        source: "iana"
      },
      "application/x-rar-compressed": {
        source: "apache",
        compressible: false,
        extensions: ["rar"]
      },
      "application/x-redhat-package-manager": {
        source: "nginx",
        extensions: ["rpm"]
      },
      "application/x-research-info-systems": {
        source: "apache",
        extensions: ["ris"]
      },
      "application/x-sea": {
        source: "nginx",
        extensions: ["sea"]
      },
      "application/x-sh": {
        source: "apache",
        compressible: true,
        extensions: ["sh"]
      },
      "application/x-shar": {
        source: "apache",
        extensions: ["shar"]
      },
      "application/x-shockwave-flash": {
        source: "apache",
        compressible: false,
        extensions: ["swf"]
      },
      "application/x-silverlight-app": {
        source: "apache",
        extensions: ["xap"]
      },
      "application/x-sql": {
        source: "apache",
        extensions: ["sql"]
      },
      "application/x-stuffit": {
        source: "apache",
        compressible: false,
        extensions: ["sit"]
      },
      "application/x-stuffitx": {
        source: "apache",
        extensions: ["sitx"]
      },
      "application/x-subrip": {
        source: "apache",
        extensions: ["srt"]
      },
      "application/x-sv4cpio": {
        source: "apache",
        extensions: ["sv4cpio"]
      },
      "application/x-sv4crc": {
        source: "apache",
        extensions: ["sv4crc"]
      },
      "application/x-t3vm-image": {
        source: "apache",
        extensions: ["t3"]
      },
      "application/x-tads": {
        source: "apache",
        extensions: ["gam"]
      },
      "application/x-tar": {
        source: "apache",
        compressible: true,
        extensions: ["tar"]
      },
      "application/x-tcl": {
        source: "apache",
        extensions: ["tcl", "tk"]
      },
      "application/x-tex": {
        source: "apache",
        extensions: ["tex"]
      },
      "application/x-tex-tfm": {
        source: "apache",
        extensions: ["tfm"]
      },
      "application/x-texinfo": {
        source: "apache",
        extensions: ["texinfo", "texi"]
      },
      "application/x-tgif": {
        source: "apache",
        extensions: ["obj"]
      },
      "application/x-ustar": {
        source: "apache",
        extensions: ["ustar"]
      },
      "application/x-virtualbox-hdd": {
        compressible: true,
        extensions: ["hdd"]
      },
      "application/x-virtualbox-ova": {
        compressible: true,
        extensions: ["ova"]
      },
      "application/x-virtualbox-ovf": {
        compressible: true,
        extensions: ["ovf"]
      },
      "application/x-virtualbox-vbox": {
        compressible: true,
        extensions: ["vbox"]
      },
      "application/x-virtualbox-vbox-extpack": {
        compressible: false,
        extensions: ["vbox-extpack"]
      },
      "application/x-virtualbox-vdi": {
        compressible: true,
        extensions: ["vdi"]
      },
      "application/x-virtualbox-vhd": {
        compressible: true,
        extensions: ["vhd"]
      },
      "application/x-virtualbox-vmdk": {
        compressible: true,
        extensions: ["vmdk"]
      },
      "application/x-wais-source": {
        source: "apache",
        extensions: ["src"]
      },
      "application/x-web-app-manifest+json": {
        compressible: true,
        extensions: ["webapp"]
      },
      "application/x-www-form-urlencoded": {
        source: "iana",
        compressible: true
      },
      "application/x-x509-ca-cert": {
        source: "iana",
        extensions: ["der", "crt", "pem"]
      },
      "application/x-x509-ca-ra-cert": {
        source: "iana"
      },
      "application/x-x509-next-ca-cert": {
        source: "iana"
      },
      "application/x-xfig": {
        source: "apache",
        extensions: ["fig"]
      },
      "application/x-xliff+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xlf"]
      },
      "application/x-xpinstall": {
        source: "apache",
        compressible: false,
        extensions: ["xpi"]
      },
      "application/x-xz": {
        source: "apache",
        extensions: ["xz"]
      },
      "application/x-zmachine": {
        source: "apache",
        extensions: ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"]
      },
      "application/x400-bp": {
        source: "iana"
      },
      "application/xacml+xml": {
        source: "iana",
        compressible: true
      },
      "application/xaml+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xaml"]
      },
      "application/xcap-att+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xav"]
      },
      "application/xcap-caps+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xca"]
      },
      "application/xcap-diff+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xdf"]
      },
      "application/xcap-el+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xel"]
      },
      "application/xcap-error+xml": {
        source: "iana",
        compressible: true
      },
      "application/xcap-ns+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xns"]
      },
      "application/xcon-conference-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/xcon-conference-info-diff+xml": {
        source: "iana",
        compressible: true
      },
      "application/xenc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xenc"]
      },
      "application/xhtml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xhtml", "xht"]
      },
      "application/xhtml-voice+xml": {
        source: "apache",
        compressible: true
      },
      "application/xliff+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xlf"]
      },
      "application/xml": {
        source: "iana",
        compressible: true,
        extensions: ["xml", "xsl", "xsd", "rng"]
      },
      "application/xml-dtd": {
        source: "iana",
        compressible: true,
        extensions: ["dtd"]
      },
      "application/xml-external-parsed-entity": {
        source: "iana"
      },
      "application/xml-patch+xml": {
        source: "iana",
        compressible: true
      },
      "application/xmpp+xml": {
        source: "iana",
        compressible: true
      },
      "application/xop+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xop"]
      },
      "application/xproc+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xpl"]
      },
      "application/xslt+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xsl", "xslt"]
      },
      "application/xspf+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xspf"]
      },
      "application/xv+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mxml", "xhvml", "xvml", "xvm"]
      },
      "application/yang": {
        source: "iana",
        extensions: ["yang"]
      },
      "application/yang-data+json": {
        source: "iana",
        compressible: true
      },
      "application/yang-data+xml": {
        source: "iana",
        compressible: true
      },
      "application/yang-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/yang-patch+xml": {
        source: "iana",
        compressible: true
      },
      "application/yin+xml": {
        source: "iana",
        compressible: true,
        extensions: ["yin"]
      },
      "application/zip": {
        source: "iana",
        compressible: false,
        extensions: ["zip"]
      },
      "application/zlib": {
        source: "iana"
      },
      "application/zstd": {
        source: "iana"
      },
      "audio/1d-interleaved-parityfec": {
        source: "iana"
      },
      "audio/32kadpcm": {
        source: "iana"
      },
      "audio/3gpp": {
        source: "iana",
        compressible: false,
        extensions: ["3gpp"]
      },
      "audio/3gpp2": {
        source: "iana"
      },
      "audio/aac": {
        source: "iana"
      },
      "audio/ac3": {
        source: "iana"
      },
      "audio/adpcm": {
        source: "apache",
        extensions: ["adp"]
      },
      "audio/amr": {
        source: "iana",
        extensions: ["amr"]
      },
      "audio/amr-wb": {
        source: "iana"
      },
      "audio/amr-wb+": {
        source: "iana"
      },
      "audio/aptx": {
        source: "iana"
      },
      "audio/asc": {
        source: "iana"
      },
      "audio/atrac-advanced-lossless": {
        source: "iana"
      },
      "audio/atrac-x": {
        source: "iana"
      },
      "audio/atrac3": {
        source: "iana"
      },
      "audio/basic": {
        source: "iana",
        compressible: false,
        extensions: ["au", "snd"]
      },
      "audio/bv16": {
        source: "iana"
      },
      "audio/bv32": {
        source: "iana"
      },
      "audio/clearmode": {
        source: "iana"
      },
      "audio/cn": {
        source: "iana"
      },
      "audio/dat12": {
        source: "iana"
      },
      "audio/dls": {
        source: "iana"
      },
      "audio/dsr-es201108": {
        source: "iana"
      },
      "audio/dsr-es202050": {
        source: "iana"
      },
      "audio/dsr-es202211": {
        source: "iana"
      },
      "audio/dsr-es202212": {
        source: "iana"
      },
      "audio/dv": {
        source: "iana"
      },
      "audio/dvi4": {
        source: "iana"
      },
      "audio/eac3": {
        source: "iana"
      },
      "audio/encaprtp": {
        source: "iana"
      },
      "audio/evrc": {
        source: "iana"
      },
      "audio/evrc-qcp": {
        source: "iana"
      },
      "audio/evrc0": {
        source: "iana"
      },
      "audio/evrc1": {
        source: "iana"
      },
      "audio/evrcb": {
        source: "iana"
      },
      "audio/evrcb0": {
        source: "iana"
      },
      "audio/evrcb1": {
        source: "iana"
      },
      "audio/evrcnw": {
        source: "iana"
      },
      "audio/evrcnw0": {
        source: "iana"
      },
      "audio/evrcnw1": {
        source: "iana"
      },
      "audio/evrcwb": {
        source: "iana"
      },
      "audio/evrcwb0": {
        source: "iana"
      },
      "audio/evrcwb1": {
        source: "iana"
      },
      "audio/evs": {
        source: "iana"
      },
      "audio/flexfec": {
        source: "iana"
      },
      "audio/fwdred": {
        source: "iana"
      },
      "audio/g711-0": {
        source: "iana"
      },
      "audio/g719": {
        source: "iana"
      },
      "audio/g722": {
        source: "iana"
      },
      "audio/g7221": {
        source: "iana"
      },
      "audio/g723": {
        source: "iana"
      },
      "audio/g726-16": {
        source: "iana"
      },
      "audio/g726-24": {
        source: "iana"
      },
      "audio/g726-32": {
        source: "iana"
      },
      "audio/g726-40": {
        source: "iana"
      },
      "audio/g728": {
        source: "iana"
      },
      "audio/g729": {
        source: "iana"
      },
      "audio/g7291": {
        source: "iana"
      },
      "audio/g729d": {
        source: "iana"
      },
      "audio/g729e": {
        source: "iana"
      },
      "audio/gsm": {
        source: "iana"
      },
      "audio/gsm-efr": {
        source: "iana"
      },
      "audio/gsm-hr-08": {
        source: "iana"
      },
      "audio/ilbc": {
        source: "iana"
      },
      "audio/ip-mr_v2.5": {
        source: "iana"
      },
      "audio/isac": {
        source: "apache"
      },
      "audio/l16": {
        source: "iana"
      },
      "audio/l20": {
        source: "iana"
      },
      "audio/l24": {
        source: "iana",
        compressible: false
      },
      "audio/l8": {
        source: "iana"
      },
      "audio/lpc": {
        source: "iana"
      },
      "audio/melp": {
        source: "iana"
      },
      "audio/melp1200": {
        source: "iana"
      },
      "audio/melp2400": {
        source: "iana"
      },
      "audio/melp600": {
        source: "iana"
      },
      "audio/mhas": {
        source: "iana"
      },
      "audio/midi": {
        source: "apache",
        extensions: ["mid", "midi", "kar", "rmi"]
      },
      "audio/mobile-xmf": {
        source: "iana",
        extensions: ["mxmf"]
      },
      "audio/mp3": {
        compressible: false,
        extensions: ["mp3"]
      },
      "audio/mp4": {
        source: "iana",
        compressible: false,
        extensions: ["m4a", "mp4a"]
      },
      "audio/mp4a-latm": {
        source: "iana"
      },
      "audio/mpa": {
        source: "iana"
      },
      "audio/mpa-robust": {
        source: "iana"
      },
      "audio/mpeg": {
        source: "iana",
        compressible: false,
        extensions: ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"]
      },
      "audio/mpeg4-generic": {
        source: "iana"
      },
      "audio/musepack": {
        source: "apache"
      },
      "audio/ogg": {
        source: "iana",
        compressible: false,
        extensions: ["oga", "ogg", "spx", "opus"]
      },
      "audio/opus": {
        source: "iana"
      },
      "audio/parityfec": {
        source: "iana"
      },
      "audio/pcma": {
        source: "iana"
      },
      "audio/pcma-wb": {
        source: "iana"
      },
      "audio/pcmu": {
        source: "iana"
      },
      "audio/pcmu-wb": {
        source: "iana"
      },
      "audio/prs.sid": {
        source: "iana"
      },
      "audio/qcelp": {
        source: "iana"
      },
      "audio/raptorfec": {
        source: "iana"
      },
      "audio/red": {
        source: "iana"
      },
      "audio/rtp-enc-aescm128": {
        source: "iana"
      },
      "audio/rtp-midi": {
        source: "iana"
      },
      "audio/rtploopback": {
        source: "iana"
      },
      "audio/rtx": {
        source: "iana"
      },
      "audio/s3m": {
        source: "apache",
        extensions: ["s3m"]
      },
      "audio/scip": {
        source: "iana"
      },
      "audio/silk": {
        source: "apache",
        extensions: ["sil"]
      },
      "audio/smv": {
        source: "iana"
      },
      "audio/smv-qcp": {
        source: "iana"
      },
      "audio/smv0": {
        source: "iana"
      },
      "audio/sofa": {
        source: "iana"
      },
      "audio/sp-midi": {
        source: "iana"
      },
      "audio/speex": {
        source: "iana"
      },
      "audio/t140c": {
        source: "iana"
      },
      "audio/t38": {
        source: "iana"
      },
      "audio/telephone-event": {
        source: "iana"
      },
      "audio/tetra_acelp": {
        source: "iana"
      },
      "audio/tetra_acelp_bb": {
        source: "iana"
      },
      "audio/tone": {
        source: "iana"
      },
      "audio/tsvcis": {
        source: "iana"
      },
      "audio/uemclip": {
        source: "iana"
      },
      "audio/ulpfec": {
        source: "iana"
      },
      "audio/usac": {
        source: "iana"
      },
      "audio/vdvi": {
        source: "iana"
      },
      "audio/vmr-wb": {
        source: "iana"
      },
      "audio/vnd.3gpp.iufp": {
        source: "iana"
      },
      "audio/vnd.4sb": {
        source: "iana"
      },
      "audio/vnd.audiokoz": {
        source: "iana"
      },
      "audio/vnd.celp": {
        source: "iana"
      },
      "audio/vnd.cisco.nse": {
        source: "iana"
      },
      "audio/vnd.cmles.radio-events": {
        source: "iana"
      },
      "audio/vnd.cns.anp1": {
        source: "iana"
      },
      "audio/vnd.cns.inf1": {
        source: "iana"
      },
      "audio/vnd.dece.audio": {
        source: "iana",
        extensions: ["uva", "uvva"]
      },
      "audio/vnd.digital-winds": {
        source: "iana",
        extensions: ["eol"]
      },
      "audio/vnd.dlna.adts": {
        source: "iana"
      },
      "audio/vnd.dolby.heaac.1": {
        source: "iana"
      },
      "audio/vnd.dolby.heaac.2": {
        source: "iana"
      },
      "audio/vnd.dolby.mlp": {
        source: "iana"
      },
      "audio/vnd.dolby.mps": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2x": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2z": {
        source: "iana"
      },
      "audio/vnd.dolby.pulse.1": {
        source: "iana"
      },
      "audio/vnd.dra": {
        source: "iana",
        extensions: ["dra"]
      },
      "audio/vnd.dts": {
        source: "iana",
        extensions: ["dts"]
      },
      "audio/vnd.dts.hd": {
        source: "iana",
        extensions: ["dtshd"]
      },
      "audio/vnd.dts.uhd": {
        source: "iana"
      },
      "audio/vnd.dvb.file": {
        source: "iana"
      },
      "audio/vnd.everad.plj": {
        source: "iana"
      },
      "audio/vnd.hns.audio": {
        source: "iana"
      },
      "audio/vnd.lucent.voice": {
        source: "iana",
        extensions: ["lvp"]
      },
      "audio/vnd.ms-playready.media.pya": {
        source: "iana",
        extensions: ["pya"]
      },
      "audio/vnd.nokia.mobile-xmf": {
        source: "iana"
      },
      "audio/vnd.nortel.vbk": {
        source: "iana"
      },
      "audio/vnd.nuera.ecelp4800": {
        source: "iana",
        extensions: ["ecelp4800"]
      },
      "audio/vnd.nuera.ecelp7470": {
        source: "iana",
        extensions: ["ecelp7470"]
      },
      "audio/vnd.nuera.ecelp9600": {
        source: "iana",
        extensions: ["ecelp9600"]
      },
      "audio/vnd.octel.sbc": {
        source: "iana"
      },
      "audio/vnd.presonus.multitrack": {
        source: "iana"
      },
      "audio/vnd.qcelp": {
        source: "iana"
      },
      "audio/vnd.rhetorex.32kadpcm": {
        source: "iana"
      },
      "audio/vnd.rip": {
        source: "iana",
        extensions: ["rip"]
      },
      "audio/vnd.rn-realaudio": {
        compressible: false
      },
      "audio/vnd.sealedmedia.softseal.mpeg": {
        source: "iana"
      },
      "audio/vnd.vmx.cvsd": {
        source: "iana"
      },
      "audio/vnd.wave": {
        compressible: false
      },
      "audio/vorbis": {
        source: "iana",
        compressible: false
      },
      "audio/vorbis-config": {
        source: "iana"
      },
      "audio/wav": {
        compressible: false,
        extensions: ["wav"]
      },
      "audio/wave": {
        compressible: false,
        extensions: ["wav"]
      },
      "audio/webm": {
        source: "apache",
        compressible: false,
        extensions: ["weba"]
      },
      "audio/x-aac": {
        source: "apache",
        compressible: false,
        extensions: ["aac"]
      },
      "audio/x-aiff": {
        source: "apache",
        extensions: ["aif", "aiff", "aifc"]
      },
      "audio/x-caf": {
        source: "apache",
        compressible: false,
        extensions: ["caf"]
      },
      "audio/x-flac": {
        source: "apache",
        extensions: ["flac"]
      },
      "audio/x-m4a": {
        source: "nginx",
        extensions: ["m4a"]
      },
      "audio/x-matroska": {
        source: "apache",
        extensions: ["mka"]
      },
      "audio/x-mpegurl": {
        source: "apache",
        extensions: ["m3u"]
      },
      "audio/x-ms-wax": {
        source: "apache",
        extensions: ["wax"]
      },
      "audio/x-ms-wma": {
        source: "apache",
        extensions: ["wma"]
      },
      "audio/x-pn-realaudio": {
        source: "apache",
        extensions: ["ram", "ra"]
      },
      "audio/x-pn-realaudio-plugin": {
        source: "apache",
        extensions: ["rmp"]
      },
      "audio/x-realaudio": {
        source: "nginx",
        extensions: ["ra"]
      },
      "audio/x-tta": {
        source: "apache"
      },
      "audio/x-wav": {
        source: "apache",
        extensions: ["wav"]
      },
      "audio/xm": {
        source: "apache",
        extensions: ["xm"]
      },
      "chemical/x-cdx": {
        source: "apache",
        extensions: ["cdx"]
      },
      "chemical/x-cif": {
        source: "apache",
        extensions: ["cif"]
      },
      "chemical/x-cmdf": {
        source: "apache",
        extensions: ["cmdf"]
      },
      "chemical/x-cml": {
        source: "apache",
        extensions: ["cml"]
      },
      "chemical/x-csml": {
        source: "apache",
        extensions: ["csml"]
      },
      "chemical/x-pdb": {
        source: "apache"
      },
      "chemical/x-xyz": {
        source: "apache",
        extensions: ["xyz"]
      },
      "font/collection": {
        source: "iana",
        extensions: ["ttc"]
      },
      "font/otf": {
        source: "iana",
        compressible: true,
        extensions: ["otf"]
      },
      "font/sfnt": {
        source: "iana"
      },
      "font/ttf": {
        source: "iana",
        compressible: true,
        extensions: ["ttf"]
      },
      "font/woff": {
        source: "iana",
        extensions: ["woff"]
      },
      "font/woff2": {
        source: "iana",
        extensions: ["woff2"]
      },
      "image/aces": {
        source: "iana",
        extensions: ["exr"]
      },
      "image/apng": {
        compressible: false,
        extensions: ["apng"]
      },
      "image/avci": {
        source: "iana",
        extensions: ["avci"]
      },
      "image/avcs": {
        source: "iana",
        extensions: ["avcs"]
      },
      "image/avif": {
        source: "iana",
        compressible: false,
        extensions: ["avif"]
      },
      "image/bmp": {
        source: "iana",
        compressible: true,
        extensions: ["bmp"]
      },
      "image/cgm": {
        source: "iana",
        extensions: ["cgm"]
      },
      "image/dicom-rle": {
        source: "iana",
        extensions: ["drle"]
      },
      "image/emf": {
        source: "iana",
        extensions: ["emf"]
      },
      "image/fits": {
        source: "iana",
        extensions: ["fits"]
      },
      "image/g3fax": {
        source: "iana",
        extensions: ["g3"]
      },
      "image/gif": {
        source: "iana",
        compressible: false,
        extensions: ["gif"]
      },
      "image/heic": {
        source: "iana",
        extensions: ["heic"]
      },
      "image/heic-sequence": {
        source: "iana",
        extensions: ["heics"]
      },
      "image/heif": {
        source: "iana",
        extensions: ["heif"]
      },
      "image/heif-sequence": {
        source: "iana",
        extensions: ["heifs"]
      },
      "image/hej2k": {
        source: "iana",
        extensions: ["hej2"]
      },
      "image/hsj2": {
        source: "iana",
        extensions: ["hsj2"]
      },
      "image/ief": {
        source: "iana",
        extensions: ["ief"]
      },
      "image/jls": {
        source: "iana",
        extensions: ["jls"]
      },
      "image/jp2": {
        source: "iana",
        compressible: false,
        extensions: ["jp2", "jpg2"]
      },
      "image/jpeg": {
        source: "iana",
        compressible: false,
        extensions: ["jpeg", "jpg", "jpe"]
      },
      "image/jph": {
        source: "iana",
        extensions: ["jph"]
      },
      "image/jphc": {
        source: "iana",
        extensions: ["jhc"]
      },
      "image/jpm": {
        source: "iana",
        compressible: false,
        extensions: ["jpm"]
      },
      "image/jpx": {
        source: "iana",
        compressible: false,
        extensions: ["jpx", "jpf"]
      },
      "image/jxr": {
        source: "iana",
        extensions: ["jxr"]
      },
      "image/jxra": {
        source: "iana",
        extensions: ["jxra"]
      },
      "image/jxrs": {
        source: "iana",
        extensions: ["jxrs"]
      },
      "image/jxs": {
        source: "iana",
        extensions: ["jxs"]
      },
      "image/jxsc": {
        source: "iana",
        extensions: ["jxsc"]
      },
      "image/jxsi": {
        source: "iana",
        extensions: ["jxsi"]
      },
      "image/jxss": {
        source: "iana",
        extensions: ["jxss"]
      },
      "image/ktx": {
        source: "iana",
        extensions: ["ktx"]
      },
      "image/ktx2": {
        source: "iana",
        extensions: ["ktx2"]
      },
      "image/naplps": {
        source: "iana"
      },
      "image/pjpeg": {
        compressible: false
      },
      "image/png": {
        source: "iana",
        compressible: false,
        extensions: ["png"]
      },
      "image/prs.btif": {
        source: "iana",
        extensions: ["btif"]
      },
      "image/prs.pti": {
        source: "iana",
        extensions: ["pti"]
      },
      "image/pwg-raster": {
        source: "iana"
      },
      "image/sgi": {
        source: "apache",
        extensions: ["sgi"]
      },
      "image/svg+xml": {
        source: "iana",
        compressible: true,
        extensions: ["svg", "svgz"]
      },
      "image/t38": {
        source: "iana",
        extensions: ["t38"]
      },
      "image/tiff": {
        source: "iana",
        compressible: false,
        extensions: ["tif", "tiff"]
      },
      "image/tiff-fx": {
        source: "iana",
        extensions: ["tfx"]
      },
      "image/vnd.adobe.photoshop": {
        source: "iana",
        compressible: true,
        extensions: ["psd"]
      },
      "image/vnd.airzip.accelerator.azv": {
        source: "iana",
        extensions: ["azv"]
      },
      "image/vnd.cns.inf2": {
        source: "iana"
      },
      "image/vnd.dece.graphic": {
        source: "iana",
        extensions: ["uvi", "uvvi", "uvg", "uvvg"]
      },
      "image/vnd.djvu": {
        source: "iana",
        extensions: ["djvu", "djv"]
      },
      "image/vnd.dvb.subtitle": {
        source: "iana",
        extensions: ["sub"]
      },
      "image/vnd.dwg": {
        source: "iana",
        extensions: ["dwg"]
      },
      "image/vnd.dxf": {
        source: "iana",
        extensions: ["dxf"]
      },
      "image/vnd.fastbidsheet": {
        source: "iana",
        extensions: ["fbs"]
      },
      "image/vnd.fpx": {
        source: "iana",
        extensions: ["fpx"]
      },
      "image/vnd.fst": {
        source: "iana",
        extensions: ["fst"]
      },
      "image/vnd.fujixerox.edmics-mmr": {
        source: "iana",
        extensions: ["mmr"]
      },
      "image/vnd.fujixerox.edmics-rlc": {
        source: "iana",
        extensions: ["rlc"]
      },
      "image/vnd.globalgraphics.pgb": {
        source: "iana"
      },
      "image/vnd.microsoft.icon": {
        source: "iana",
        compressible: true,
        extensions: ["ico"]
      },
      "image/vnd.mix": {
        source: "iana"
      },
      "image/vnd.mozilla.apng": {
        source: "iana"
      },
      "image/vnd.ms-dds": {
        compressible: true,
        extensions: ["dds"]
      },
      "image/vnd.ms-modi": {
        source: "iana",
        extensions: ["mdi"]
      },
      "image/vnd.ms-photo": {
        source: "apache",
        extensions: ["wdp"]
      },
      "image/vnd.net-fpx": {
        source: "iana",
        extensions: ["npx"]
      },
      "image/vnd.pco.b16": {
        source: "iana",
        extensions: ["b16"]
      },
      "image/vnd.radiance": {
        source: "iana"
      },
      "image/vnd.sealed.png": {
        source: "iana"
      },
      "image/vnd.sealedmedia.softseal.gif": {
        source: "iana"
      },
      "image/vnd.sealedmedia.softseal.jpg": {
        source: "iana"
      },
      "image/vnd.svf": {
        source: "iana"
      },
      "image/vnd.tencent.tap": {
        source: "iana",
        extensions: ["tap"]
      },
      "image/vnd.valve.source.texture": {
        source: "iana",
        extensions: ["vtf"]
      },
      "image/vnd.wap.wbmp": {
        source: "iana",
        extensions: ["wbmp"]
      },
      "image/vnd.xiff": {
        source: "iana",
        extensions: ["xif"]
      },
      "image/vnd.zbrush.pcx": {
        source: "iana",
        extensions: ["pcx"]
      },
      "image/webp": {
        source: "apache",
        extensions: ["webp"]
      },
      "image/wmf": {
        source: "iana",
        extensions: ["wmf"]
      },
      "image/x-3ds": {
        source: "apache",
        extensions: ["3ds"]
      },
      "image/x-cmu-raster": {
        source: "apache",
        extensions: ["ras"]
      },
      "image/x-cmx": {
        source: "apache",
        extensions: ["cmx"]
      },
      "image/x-freehand": {
        source: "apache",
        extensions: ["fh", "fhc", "fh4", "fh5", "fh7"]
      },
      "image/x-icon": {
        source: "apache",
        compressible: true,
        extensions: ["ico"]
      },
      "image/x-jng": {
        source: "nginx",
        extensions: ["jng"]
      },
      "image/x-mrsid-image": {
        source: "apache",
        extensions: ["sid"]
      },
      "image/x-ms-bmp": {
        source: "nginx",
        compressible: true,
        extensions: ["bmp"]
      },
      "image/x-pcx": {
        source: "apache",
        extensions: ["pcx"]
      },
      "image/x-pict": {
        source: "apache",
        extensions: ["pic", "pct"]
      },
      "image/x-portable-anymap": {
        source: "apache",
        extensions: ["pnm"]
      },
      "image/x-portable-bitmap": {
        source: "apache",
        extensions: ["pbm"]
      },
      "image/x-portable-graymap": {
        source: "apache",
        extensions: ["pgm"]
      },
      "image/x-portable-pixmap": {
        source: "apache",
        extensions: ["ppm"]
      },
      "image/x-rgb": {
        source: "apache",
        extensions: ["rgb"]
      },
      "image/x-tga": {
        source: "apache",
        extensions: ["tga"]
      },
      "image/x-xbitmap": {
        source: "apache",
        extensions: ["xbm"]
      },
      "image/x-xcf": {
        compressible: false
      },
      "image/x-xpixmap": {
        source: "apache",
        extensions: ["xpm"]
      },
      "image/x-xwindowdump": {
        source: "apache",
        extensions: ["xwd"]
      },
      "message/cpim": {
        source: "iana"
      },
      "message/delivery-status": {
        source: "iana"
      },
      "message/disposition-notification": {
        source: "iana",
        extensions: [
          "disposition-notification"
        ]
      },
      "message/external-body": {
        source: "iana"
      },
      "message/feedback-report": {
        source: "iana"
      },
      "message/global": {
        source: "iana",
        extensions: ["u8msg"]
      },
      "message/global-delivery-status": {
        source: "iana",
        extensions: ["u8dsn"]
      },
      "message/global-disposition-notification": {
        source: "iana",
        extensions: ["u8mdn"]
      },
      "message/global-headers": {
        source: "iana",
        extensions: ["u8hdr"]
      },
      "message/http": {
        source: "iana",
        compressible: false
      },
      "message/imdn+xml": {
        source: "iana",
        compressible: true
      },
      "message/news": {
        source: "iana"
      },
      "message/partial": {
        source: "iana",
        compressible: false
      },
      "message/rfc822": {
        source: "iana",
        compressible: true,
        extensions: ["eml", "mime"]
      },
      "message/s-http": {
        source: "iana"
      },
      "message/sip": {
        source: "iana"
      },
      "message/sipfrag": {
        source: "iana"
      },
      "message/tracking-status": {
        source: "iana"
      },
      "message/vnd.si.simp": {
        source: "iana"
      },
      "message/vnd.wfa.wsc": {
        source: "iana",
        extensions: ["wsc"]
      },
      "model/3mf": {
        source: "iana",
        extensions: ["3mf"]
      },
      "model/e57": {
        source: "iana"
      },
      "model/gltf+json": {
        source: "iana",
        compressible: true,
        extensions: ["gltf"]
      },
      "model/gltf-binary": {
        source: "iana",
        compressible: true,
        extensions: ["glb"]
      },
      "model/iges": {
        source: "iana",
        compressible: false,
        extensions: ["igs", "iges"]
      },
      "model/mesh": {
        source: "iana",
        compressible: false,
        extensions: ["msh", "mesh", "silo"]
      },
      "model/mtl": {
        source: "iana",
        extensions: ["mtl"]
      },
      "model/obj": {
        source: "iana",
        extensions: ["obj"]
      },
      "model/step": {
        source: "iana"
      },
      "model/step+xml": {
        source: "iana",
        compressible: true,
        extensions: ["stpx"]
      },
      "model/step+zip": {
        source: "iana",
        compressible: false,
        extensions: ["stpz"]
      },
      "model/step-xml+zip": {
        source: "iana",
        compressible: false,
        extensions: ["stpxz"]
      },
      "model/stl": {
        source: "iana",
        extensions: ["stl"]
      },
      "model/vnd.collada+xml": {
        source: "iana",
        compressible: true,
        extensions: ["dae"]
      },
      "model/vnd.dwf": {
        source: "iana",
        extensions: ["dwf"]
      },
      "model/vnd.flatland.3dml": {
        source: "iana"
      },
      "model/vnd.gdl": {
        source: "iana",
        extensions: ["gdl"]
      },
      "model/vnd.gs-gdl": {
        source: "apache"
      },
      "model/vnd.gs.gdl": {
        source: "iana"
      },
      "model/vnd.gtw": {
        source: "iana",
        extensions: ["gtw"]
      },
      "model/vnd.moml+xml": {
        source: "iana",
        compressible: true
      },
      "model/vnd.mts": {
        source: "iana",
        extensions: ["mts"]
      },
      "model/vnd.opengex": {
        source: "iana",
        extensions: ["ogex"]
      },
      "model/vnd.parasolid.transmit.binary": {
        source: "iana",
        extensions: ["x_b"]
      },
      "model/vnd.parasolid.transmit.text": {
        source: "iana",
        extensions: ["x_t"]
      },
      "model/vnd.pytha.pyox": {
        source: "iana"
      },
      "model/vnd.rosette.annotated-data-model": {
        source: "iana"
      },
      "model/vnd.sap.vds": {
        source: "iana",
        extensions: ["vds"]
      },
      "model/vnd.usdz+zip": {
        source: "iana",
        compressible: false,
        extensions: ["usdz"]
      },
      "model/vnd.valve.source.compiled-map": {
        source: "iana",
        extensions: ["bsp"]
      },
      "model/vnd.vtu": {
        source: "iana",
        extensions: ["vtu"]
      },
      "model/vrml": {
        source: "iana",
        compressible: false,
        extensions: ["wrl", "vrml"]
      },
      "model/x3d+binary": {
        source: "apache",
        compressible: false,
        extensions: ["x3db", "x3dbz"]
      },
      "model/x3d+fastinfoset": {
        source: "iana",
        extensions: ["x3db"]
      },
      "model/x3d+vrml": {
        source: "apache",
        compressible: false,
        extensions: ["x3dv", "x3dvz"]
      },
      "model/x3d+xml": {
        source: "iana",
        compressible: true,
        extensions: ["x3d", "x3dz"]
      },
      "model/x3d-vrml": {
        source: "iana",
        extensions: ["x3dv"]
      },
      "multipart/alternative": {
        source: "iana",
        compressible: false
      },
      "multipart/appledouble": {
        source: "iana"
      },
      "multipart/byteranges": {
        source: "iana"
      },
      "multipart/digest": {
        source: "iana"
      },
      "multipart/encrypted": {
        source: "iana",
        compressible: false
      },
      "multipart/form-data": {
        source: "iana",
        compressible: false
      },
      "multipart/header-set": {
        source: "iana"
      },
      "multipart/mixed": {
        source: "iana"
      },
      "multipart/multilingual": {
        source: "iana"
      },
      "multipart/parallel": {
        source: "iana"
      },
      "multipart/related": {
        source: "iana",
        compressible: false
      },
      "multipart/report": {
        source: "iana"
      },
      "multipart/signed": {
        source: "iana",
        compressible: false
      },
      "multipart/vnd.bint.med-plus": {
        source: "iana"
      },
      "multipart/voice-message": {
        source: "iana"
      },
      "multipart/x-mixed-replace": {
        source: "iana"
      },
      "text/1d-interleaved-parityfec": {
        source: "iana"
      },
      "text/cache-manifest": {
        source: "iana",
        compressible: true,
        extensions: ["appcache", "manifest"]
      },
      "text/calendar": {
        source: "iana",
        extensions: ["ics", "ifb"]
      },
      "text/calender": {
        compressible: true
      },
      "text/cmd": {
        compressible: true
      },
      "text/coffeescript": {
        extensions: ["coffee", "litcoffee"]
      },
      "text/cql": {
        source: "iana"
      },
      "text/cql-expression": {
        source: "iana"
      },
      "text/cql-identifier": {
        source: "iana"
      },
      "text/css": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["css"]
      },
      "text/csv": {
        source: "iana",
        compressible: true,
        extensions: ["csv"]
      },
      "text/csv-schema": {
        source: "iana"
      },
      "text/directory": {
        source: "iana"
      },
      "text/dns": {
        source: "iana"
      },
      "text/ecmascript": {
        source: "iana"
      },
      "text/encaprtp": {
        source: "iana"
      },
      "text/enriched": {
        source: "iana"
      },
      "text/fhirpath": {
        source: "iana"
      },
      "text/flexfec": {
        source: "iana"
      },
      "text/fwdred": {
        source: "iana"
      },
      "text/gff3": {
        source: "iana"
      },
      "text/grammar-ref-list": {
        source: "iana"
      },
      "text/html": {
        source: "iana",
        compressible: true,
        extensions: ["html", "htm", "shtml"]
      },
      "text/jade": {
        extensions: ["jade"]
      },
      "text/javascript": {
        source: "iana",
        compressible: true
      },
      "text/jcr-cnd": {
        source: "iana"
      },
      "text/jsx": {
        compressible: true,
        extensions: ["jsx"]
      },
      "text/less": {
        compressible: true,
        extensions: ["less"]
      },
      "text/markdown": {
        source: "iana",
        compressible: true,
        extensions: ["markdown", "md"]
      },
      "text/mathml": {
        source: "nginx",
        extensions: ["mml"]
      },
      "text/mdx": {
        compressible: true,
        extensions: ["mdx"]
      },
      "text/mizar": {
        source: "iana"
      },
      "text/n3": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["n3"]
      },
      "text/parameters": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/parityfec": {
        source: "iana"
      },
      "text/plain": {
        source: "iana",
        compressible: true,
        extensions: ["txt", "text", "conf", "def", "list", "log", "in", "ini"]
      },
      "text/provenance-notation": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/prs.fallenstein.rst": {
        source: "iana"
      },
      "text/prs.lines.tag": {
        source: "iana",
        extensions: ["dsc"]
      },
      "text/prs.prop.logic": {
        source: "iana"
      },
      "text/raptorfec": {
        source: "iana"
      },
      "text/red": {
        source: "iana"
      },
      "text/rfc822-headers": {
        source: "iana"
      },
      "text/richtext": {
        source: "iana",
        compressible: true,
        extensions: ["rtx"]
      },
      "text/rtf": {
        source: "iana",
        compressible: true,
        extensions: ["rtf"]
      },
      "text/rtp-enc-aescm128": {
        source: "iana"
      },
      "text/rtploopback": {
        source: "iana"
      },
      "text/rtx": {
        source: "iana"
      },
      "text/sgml": {
        source: "iana",
        extensions: ["sgml", "sgm"]
      },
      "text/shaclc": {
        source: "iana"
      },
      "text/shex": {
        source: "iana",
        extensions: ["shex"]
      },
      "text/slim": {
        extensions: ["slim", "slm"]
      },
      "text/spdx": {
        source: "iana",
        extensions: ["spdx"]
      },
      "text/strings": {
        source: "iana"
      },
      "text/stylus": {
        extensions: ["stylus", "styl"]
      },
      "text/t140": {
        source: "iana"
      },
      "text/tab-separated-values": {
        source: "iana",
        compressible: true,
        extensions: ["tsv"]
      },
      "text/troff": {
        source: "iana",
        extensions: ["t", "tr", "roff", "man", "me", "ms"]
      },
      "text/turtle": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["ttl"]
      },
      "text/ulpfec": {
        source: "iana"
      },
      "text/uri-list": {
        source: "iana",
        compressible: true,
        extensions: ["uri", "uris", "urls"]
      },
      "text/vcard": {
        source: "iana",
        compressible: true,
        extensions: ["vcard"]
      },
      "text/vnd.a": {
        source: "iana"
      },
      "text/vnd.abc": {
        source: "iana"
      },
      "text/vnd.ascii-art": {
        source: "iana"
      },
      "text/vnd.curl": {
        source: "iana",
        extensions: ["curl"]
      },
      "text/vnd.curl.dcurl": {
        source: "apache",
        extensions: ["dcurl"]
      },
      "text/vnd.curl.mcurl": {
        source: "apache",
        extensions: ["mcurl"]
      },
      "text/vnd.curl.scurl": {
        source: "apache",
        extensions: ["scurl"]
      },
      "text/vnd.debian.copyright": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/vnd.dmclientscript": {
        source: "iana"
      },
      "text/vnd.dvb.subtitle": {
        source: "iana",
        extensions: ["sub"]
      },
      "text/vnd.esmertec.theme-descriptor": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/vnd.familysearch.gedcom": {
        source: "iana",
        extensions: ["ged"]
      },
      "text/vnd.ficlab.flt": {
        source: "iana"
      },
      "text/vnd.fly": {
        source: "iana",
        extensions: ["fly"]
      },
      "text/vnd.fmi.flexstor": {
        source: "iana",
        extensions: ["flx"]
      },
      "text/vnd.gml": {
        source: "iana"
      },
      "text/vnd.graphviz": {
        source: "iana",
        extensions: ["gv"]
      },
      "text/vnd.hans": {
        source: "iana"
      },
      "text/vnd.hgl": {
        source: "iana"
      },
      "text/vnd.in3d.3dml": {
        source: "iana",
        extensions: ["3dml"]
      },
      "text/vnd.in3d.spot": {
        source: "iana",
        extensions: ["spot"]
      },
      "text/vnd.iptc.newsml": {
        source: "iana"
      },
      "text/vnd.iptc.nitf": {
        source: "iana"
      },
      "text/vnd.latex-z": {
        source: "iana"
      },
      "text/vnd.motorola.reflex": {
        source: "iana"
      },
      "text/vnd.ms-mediapackage": {
        source: "iana"
      },
      "text/vnd.net2phone.commcenter.command": {
        source: "iana"
      },
      "text/vnd.radisys.msml-basic-layout": {
        source: "iana"
      },
      "text/vnd.senx.warpscript": {
        source: "iana"
      },
      "text/vnd.si.uricatalogue": {
        source: "iana"
      },
      "text/vnd.sosi": {
        source: "iana"
      },
      "text/vnd.sun.j2me.app-descriptor": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["jad"]
      },
      "text/vnd.trolltech.linguist": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/vnd.wap.si": {
        source: "iana"
      },
      "text/vnd.wap.sl": {
        source: "iana"
      },
      "text/vnd.wap.wml": {
        source: "iana",
        extensions: ["wml"]
      },
      "text/vnd.wap.wmlscript": {
        source: "iana",
        extensions: ["wmls"]
      },
      "text/vtt": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["vtt"]
      },
      "text/x-asm": {
        source: "apache",
        extensions: ["s", "asm"]
      },
      "text/x-c": {
        source: "apache",
        extensions: ["c", "cc", "cxx", "cpp", "h", "hh", "dic"]
      },
      "text/x-component": {
        source: "nginx",
        extensions: ["htc"]
      },
      "text/x-fortran": {
        source: "apache",
        extensions: ["f", "for", "f77", "f90"]
      },
      "text/x-gwt-rpc": {
        compressible: true
      },
      "text/x-handlebars-template": {
        extensions: ["hbs"]
      },
      "text/x-java-source": {
        source: "apache",
        extensions: ["java"]
      },
      "text/x-jquery-tmpl": {
        compressible: true
      },
      "text/x-lua": {
        extensions: ["lua"]
      },
      "text/x-markdown": {
        compressible: true,
        extensions: ["mkd"]
      },
      "text/x-nfo": {
        source: "apache",
        extensions: ["nfo"]
      },
      "text/x-opml": {
        source: "apache",
        extensions: ["opml"]
      },
      "text/x-org": {
        compressible: true,
        extensions: ["org"]
      },
      "text/x-pascal": {
        source: "apache",
        extensions: ["p", "pas"]
      },
      "text/x-processing": {
        compressible: true,
        extensions: ["pde"]
      },
      "text/x-sass": {
        extensions: ["sass"]
      },
      "text/x-scss": {
        extensions: ["scss"]
      },
      "text/x-setext": {
        source: "apache",
        extensions: ["etx"]
      },
      "text/x-sfv": {
        source: "apache",
        extensions: ["sfv"]
      },
      "text/x-suse-ymp": {
        compressible: true,
        extensions: ["ymp"]
      },
      "text/x-uuencode": {
        source: "apache",
        extensions: ["uu"]
      },
      "text/x-vcalendar": {
        source: "apache",
        extensions: ["vcs"]
      },
      "text/x-vcard": {
        source: "apache",
        extensions: ["vcf"]
      },
      "text/xml": {
        source: "iana",
        compressible: true,
        extensions: ["xml"]
      },
      "text/xml-external-parsed-entity": {
        source: "iana"
      },
      "text/yaml": {
        compressible: true,
        extensions: ["yaml", "yml"]
      },
      "video/1d-interleaved-parityfec": {
        source: "iana"
      },
      "video/3gpp": {
        source: "iana",
        extensions: ["3gp", "3gpp"]
      },
      "video/3gpp-tt": {
        source: "iana"
      },
      "video/3gpp2": {
        source: "iana",
        extensions: ["3g2"]
      },
      "video/av1": {
        source: "iana"
      },
      "video/bmpeg": {
        source: "iana"
      },
      "video/bt656": {
        source: "iana"
      },
      "video/celb": {
        source: "iana"
      },
      "video/dv": {
        source: "iana"
      },
      "video/encaprtp": {
        source: "iana"
      },
      "video/ffv1": {
        source: "iana"
      },
      "video/flexfec": {
        source: "iana"
      },
      "video/h261": {
        source: "iana",
        extensions: ["h261"]
      },
      "video/h263": {
        source: "iana",
        extensions: ["h263"]
      },
      "video/h263-1998": {
        source: "iana"
      },
      "video/h263-2000": {
        source: "iana"
      },
      "video/h264": {
        source: "iana",
        extensions: ["h264"]
      },
      "video/h264-rcdo": {
        source: "iana"
      },
      "video/h264-svc": {
        source: "iana"
      },
      "video/h265": {
        source: "iana"
      },
      "video/iso.segment": {
        source: "iana",
        extensions: ["m4s"]
      },
      "video/jpeg": {
        source: "iana",
        extensions: ["jpgv"]
      },
      "video/jpeg2000": {
        source: "iana"
      },
      "video/jpm": {
        source: "apache",
        extensions: ["jpm", "jpgm"]
      },
      "video/jxsv": {
        source: "iana"
      },
      "video/mj2": {
        source: "iana",
        extensions: ["mj2", "mjp2"]
      },
      "video/mp1s": {
        source: "iana"
      },
      "video/mp2p": {
        source: "iana"
      },
      "video/mp2t": {
        source: "iana",
        extensions: ["ts"]
      },
      "video/mp4": {
        source: "iana",
        compressible: false,
        extensions: ["mp4", "mp4v", "mpg4"]
      },
      "video/mp4v-es": {
        source: "iana"
      },
      "video/mpeg": {
        source: "iana",
        compressible: false,
        extensions: ["mpeg", "mpg", "mpe", "m1v", "m2v"]
      },
      "video/mpeg4-generic": {
        source: "iana"
      },
      "video/mpv": {
        source: "iana"
      },
      "video/nv": {
        source: "iana"
      },
      "video/ogg": {
        source: "iana",
        compressible: false,
        extensions: ["ogv"]
      },
      "video/parityfec": {
        source: "iana"
      },
      "video/pointer": {
        source: "iana"
      },
      "video/quicktime": {
        source: "iana",
        compressible: false,
        extensions: ["qt", "mov"]
      },
      "video/raptorfec": {
        source: "iana"
      },
      "video/raw": {
        source: "iana"
      },
      "video/rtp-enc-aescm128": {
        source: "iana"
      },
      "video/rtploopback": {
        source: "iana"
      },
      "video/rtx": {
        source: "iana"
      },
      "video/scip": {
        source: "iana"
      },
      "video/smpte291": {
        source: "iana"
      },
      "video/smpte292m": {
        source: "iana"
      },
      "video/ulpfec": {
        source: "iana"
      },
      "video/vc1": {
        source: "iana"
      },
      "video/vc2": {
        source: "iana"
      },
      "video/vnd.cctv": {
        source: "iana"
      },
      "video/vnd.dece.hd": {
        source: "iana",
        extensions: ["uvh", "uvvh"]
      },
      "video/vnd.dece.mobile": {
        source: "iana",
        extensions: ["uvm", "uvvm"]
      },
      "video/vnd.dece.mp4": {
        source: "iana"
      },
      "video/vnd.dece.pd": {
        source: "iana",
        extensions: ["uvp", "uvvp"]
      },
      "video/vnd.dece.sd": {
        source: "iana",
        extensions: ["uvs", "uvvs"]
      },
      "video/vnd.dece.video": {
        source: "iana",
        extensions: ["uvv", "uvvv"]
      },
      "video/vnd.directv.mpeg": {
        source: "iana"
      },
      "video/vnd.directv.mpeg-tts": {
        source: "iana"
      },
      "video/vnd.dlna.mpeg-tts": {
        source: "iana"
      },
      "video/vnd.dvb.file": {
        source: "iana",
        extensions: ["dvb"]
      },
      "video/vnd.fvt": {
        source: "iana",
        extensions: ["fvt"]
      },
      "video/vnd.hns.video": {
        source: "iana"
      },
      "video/vnd.iptvforum.1dparityfec-1010": {
        source: "iana"
      },
      "video/vnd.iptvforum.1dparityfec-2005": {
        source: "iana"
      },
      "video/vnd.iptvforum.2dparityfec-1010": {
        source: "iana"
      },
      "video/vnd.iptvforum.2dparityfec-2005": {
        source: "iana"
      },
      "video/vnd.iptvforum.ttsavc": {
        source: "iana"
      },
      "video/vnd.iptvforum.ttsmpeg2": {
        source: "iana"
      },
      "video/vnd.motorola.video": {
        source: "iana"
      },
      "video/vnd.motorola.videop": {
        source: "iana"
      },
      "video/vnd.mpegurl": {
        source: "iana",
        extensions: ["mxu", "m4u"]
      },
      "video/vnd.ms-playready.media.pyv": {
        source: "iana",
        extensions: ["pyv"]
      },
      "video/vnd.nokia.interleaved-multimedia": {
        source: "iana"
      },
      "video/vnd.nokia.mp4vr": {
        source: "iana"
      },
      "video/vnd.nokia.videovoip": {
        source: "iana"
      },
      "video/vnd.objectvideo": {
        source: "iana"
      },
      "video/vnd.radgamettools.bink": {
        source: "iana"
      },
      "video/vnd.radgamettools.smacker": {
        source: "iana"
      },
      "video/vnd.sealed.mpeg1": {
        source: "iana"
      },
      "video/vnd.sealed.mpeg4": {
        source: "iana"
      },
      "video/vnd.sealed.swf": {
        source: "iana"
      },
      "video/vnd.sealedmedia.softseal.mov": {
        source: "iana"
      },
      "video/vnd.uvvu.mp4": {
        source: "iana",
        extensions: ["uvu", "uvvu"]
      },
      "video/vnd.vivo": {
        source: "iana",
        extensions: ["viv"]
      },
      "video/vnd.youtube.yt": {
        source: "iana"
      },
      "video/vp8": {
        source: "iana"
      },
      "video/vp9": {
        source: "iana"
      },
      "video/webm": {
        source: "apache",
        compressible: false,
        extensions: ["webm"]
      },
      "video/x-f4v": {
        source: "apache",
        extensions: ["f4v"]
      },
      "video/x-fli": {
        source: "apache",
        extensions: ["fli"]
      },
      "video/x-flv": {
        source: "apache",
        compressible: false,
        extensions: ["flv"]
      },
      "video/x-m4v": {
        source: "apache",
        extensions: ["m4v"]
      },
      "video/x-matroska": {
        source: "apache",
        compressible: false,
        extensions: ["mkv", "mk3d", "mks"]
      },
      "video/x-mng": {
        source: "apache",
        extensions: ["mng"]
      },
      "video/x-ms-asf": {
        source: "apache",
        extensions: ["asf", "asx"]
      },
      "video/x-ms-vob": {
        source: "apache",
        extensions: ["vob"]
      },
      "video/x-ms-wm": {
        source: "apache",
        extensions: ["wm"]
      },
      "video/x-ms-wmv": {
        source: "apache",
        compressible: false,
        extensions: ["wmv"]
      },
      "video/x-ms-wmx": {
        source: "apache",
        extensions: ["wmx"]
      },
      "video/x-ms-wvx": {
        source: "apache",
        extensions: ["wvx"]
      },
      "video/x-msvideo": {
        source: "apache",
        extensions: ["avi"]
      },
      "video/x-sgi-movie": {
        source: "apache",
        extensions: ["movie"]
      },
      "video/x-smv": {
        source: "apache",
        extensions: ["smv"]
      },
      "x-conference/x-cooltalk": {
        source: "apache",
        extensions: ["ice"]
      },
      "x-shader/x-fragment": {
        compressible: true
      },
      "x-shader/x-vertex": {
        compressible: true
      }
    };
  }
});

// node_modules/mime-db/index.js
var require_mime_db = __commonJS({
  "node_modules/mime-db/index.js"(exports2, module2) {
    module2.exports = require_db();
  }
});

// node_modules/mime-types/index.js
var require_mime_types = __commonJS({
  "node_modules/mime-types/index.js"(exports2) {
    "use strict";
    var db = require_mime_db();
    var extname = require("path").extname;
    var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
    var TEXT_TYPE_REGEXP = /^text\//i;
    exports2.charset = charset;
    exports2.charsets = { lookup: charset };
    exports2.contentType = contentType;
    exports2.extension = extension;
    exports2.extensions = /* @__PURE__ */ Object.create(null);
    exports2.lookup = lookup;
    exports2.types = /* @__PURE__ */ Object.create(null);
    populateMaps(exports2.extensions, exports2.types);
    function charset(type) {
      if (!type || typeof type !== "string") {
        return false;
      }
      var match = EXTRACT_TYPE_REGEXP.exec(type);
      var mime = match && db[match[1].toLowerCase()];
      if (mime && mime.charset) {
        return mime.charset;
      }
      if (match && TEXT_TYPE_REGEXP.test(match[1])) {
        return "UTF-8";
      }
      return false;
    }
    function contentType(str) {
      if (!str || typeof str !== "string") {
        return false;
      }
      var mime = str.indexOf("/") === -1 ? exports2.lookup(str) : str;
      if (!mime) {
        return false;
      }
      if (mime.indexOf("charset") === -1) {
        var charset2 = exports2.charset(mime);
        if (charset2) mime += "; charset=" + charset2.toLowerCase();
      }
      return mime;
    }
    function extension(type) {
      if (!type || typeof type !== "string") {
        return false;
      }
      var match = EXTRACT_TYPE_REGEXP.exec(type);
      var exts = match && exports2.extensions[match[1].toLowerCase()];
      if (!exts || !exts.length) {
        return false;
      }
      return exts[0];
    }
    function lookup(path) {
      if (!path || typeof path !== "string") {
        return false;
      }
      var extension2 = extname("x." + path).toLowerCase().substr(1);
      if (!extension2) {
        return false;
      }
      return exports2.types[extension2] || false;
    }
    function populateMaps(extensions, types) {
      var preference = ["nginx", "apache", void 0, "iana"];
      Object.keys(db).forEach(function forEachMimeType(type) {
        var mime = db[type];
        var exts = mime.extensions;
        if (!exts || !exts.length) {
          return;
        }
        extensions[type] = exts;
        for (var i = 0; i < exts.length; i++) {
          var extension2 = exts[i];
          if (types[extension2]) {
            var from = preference.indexOf(db[types[extension2]].source);
            var to = preference.indexOf(mime.source);
            if (types[extension2] !== "application/octet-stream" && (from > to || from === to && types[extension2].substr(0, 12) === "application/")) {
              continue;
            }
          }
          types[extension2] = type;
        }
      });
    }
  }
});

// node_modules/asynckit/lib/defer.js
var require_defer = __commonJS({
  "node_modules/asynckit/lib/defer.js"(exports2, module2) {
    module2.exports = defer;
    function defer(fn) {
      var nextTick = typeof setImmediate == "function" ? setImmediate : typeof process == "object" && typeof process.nextTick == "function" ? process.nextTick : null;
      if (nextTick) {
        nextTick(fn);
      } else {
        setTimeout(fn, 0);
      }
    }
  }
});

// node_modules/asynckit/lib/async.js
var require_async = __commonJS({
  "node_modules/asynckit/lib/async.js"(exports2, module2) {
    var defer = require_defer();
    module2.exports = async;
    function async(callback) {
      var isAsync = false;
      defer(function() {
        isAsync = true;
      });
      return function async_callback(err, result) {
        if (isAsync) {
          callback(err, result);
        } else {
          defer(function nextTick_callback() {
            callback(err, result);
          });
        }
      };
    }
  }
});

// node_modules/asynckit/lib/abort.js
var require_abort = __commonJS({
  "node_modules/asynckit/lib/abort.js"(exports2, module2) {
    module2.exports = abort;
    function abort(state) {
      Object.keys(state.jobs).forEach(clean.bind(state));
      state.jobs = {};
    }
    function clean(key) {
      if (typeof this.jobs[key] == "function") {
        this.jobs[key]();
      }
    }
  }
});

// node_modules/asynckit/lib/iterate.js
var require_iterate = __commonJS({
  "node_modules/asynckit/lib/iterate.js"(exports2, module2) {
    var async = require_async();
    var abort = require_abort();
    module2.exports = iterate;
    function iterate(list, iterator, state, callback) {
      var key = state["keyedList"] ? state["keyedList"][state.index] : state.index;
      state.jobs[key] = runJob(iterator, key, list[key], function(error, output) {
        if (!(key in state.jobs)) {
          return;
        }
        delete state.jobs[key];
        if (error) {
          abort(state);
        } else {
          state.results[key] = output;
        }
        callback(error, state.results);
      });
    }
    function runJob(iterator, key, item, callback) {
      var aborter;
      if (iterator.length == 2) {
        aborter = iterator(item, async(callback));
      } else {
        aborter = iterator(item, key, async(callback));
      }
      return aborter;
    }
  }
});

// node_modules/asynckit/lib/state.js
var require_state = __commonJS({
  "node_modules/asynckit/lib/state.js"(exports2, module2) {
    module2.exports = state;
    function state(list, sortMethod) {
      var isNamedList = !Array.isArray(list), initState = {
        index: 0,
        keyedList: isNamedList || sortMethod ? Object.keys(list) : null,
        jobs: {},
        results: isNamedList ? {} : [],
        size: isNamedList ? Object.keys(list).length : list.length
      };
      if (sortMethod) {
        initState.keyedList.sort(isNamedList ? sortMethod : function(a, b) {
          return sortMethod(list[a], list[b]);
        });
      }
      return initState;
    }
  }
});

// node_modules/asynckit/lib/terminator.js
var require_terminator = __commonJS({
  "node_modules/asynckit/lib/terminator.js"(exports2, module2) {
    var abort = require_abort();
    var async = require_async();
    module2.exports = terminator;
    function terminator(callback) {
      if (!Object.keys(this.jobs).length) {
        return;
      }
      this.index = this.size;
      abort(this);
      async(callback)(null, this.results);
    }
  }
});

// node_modules/asynckit/parallel.js
var require_parallel = __commonJS({
  "node_modules/asynckit/parallel.js"(exports2, module2) {
    var iterate = require_iterate();
    var initState = require_state();
    var terminator = require_terminator();
    module2.exports = parallel;
    function parallel(list, iterator, callback) {
      var state = initState(list);
      while (state.index < (state["keyedList"] || list).length) {
        iterate(list, iterator, state, function(error, result) {
          if (error) {
            callback(error, result);
            return;
          }
          if (Object.keys(state.jobs).length === 0) {
            callback(null, state.results);
            return;
          }
        });
        state.index++;
      }
      return terminator.bind(state, callback);
    }
  }
});

// node_modules/asynckit/serialOrdered.js
var require_serialOrdered = __commonJS({
  "node_modules/asynckit/serialOrdered.js"(exports2, module2) {
    var iterate = require_iterate();
    var initState = require_state();
    var terminator = require_terminator();
    module2.exports = serialOrdered;
    module2.exports.ascending = ascending;
    module2.exports.descending = descending;
    function serialOrdered(list, iterator, sortMethod, callback) {
      var state = initState(list, sortMethod);
      iterate(list, iterator, state, function iteratorHandler(error, result) {
        if (error) {
          callback(error, result);
          return;
        }
        state.index++;
        if (state.index < (state["keyedList"] || list).length) {
          iterate(list, iterator, state, iteratorHandler);
          return;
        }
        callback(null, state.results);
      });
      return terminator.bind(state, callback);
    }
    function ascending(a, b) {
      return a < b ? -1 : a > b ? 1 : 0;
    }
    function descending(a, b) {
      return -1 * ascending(a, b);
    }
  }
});

// node_modules/asynckit/serial.js
var require_serial = __commonJS({
  "node_modules/asynckit/serial.js"(exports2, module2) {
    var serialOrdered = require_serialOrdered();
    module2.exports = serial;
    function serial(list, iterator, callback) {
      return serialOrdered(list, iterator, null, callback);
    }
  }
});

// node_modules/asynckit/index.js
var require_asynckit = __commonJS({
  "node_modules/asynckit/index.js"(exports2, module2) {
    module2.exports = {
      parallel: require_parallel(),
      serial: require_serial(),
      serialOrdered: require_serialOrdered()
    };
  }
});

// node_modules/form-data/lib/populate.js
var require_populate = __commonJS({
  "node_modules/form-data/lib/populate.js"(exports2, module2) {
    module2.exports = function(dst, src) {
      Object.keys(src).forEach(function(prop) {
        dst[prop] = dst[prop] || src[prop];
      });
      return dst;
    };
  }
});

// node_modules/form-data/lib/form_data.js
var require_form_data = __commonJS({
  "node_modules/form-data/lib/form_data.js"(exports2, module2) {
    var CombinedStream = require_combined_stream();
    var util = require("util");
    var path = require("path");
    var http = require("http");
    var https = require("https");
    var parseUrl = require("url").parse;
    var fs = require("fs");
    var Stream = require("stream").Stream;
    var mime = require_mime_types();
    var asynckit = require_asynckit();
    var populate = require_populate();
    module2.exports = FormData;
    util.inherits(FormData, CombinedStream);
    function FormData(options) {
      if (!(this instanceof FormData)) {
        return new FormData(options);
      }
      this._overheadLength = 0;
      this._valueLength = 0;
      this._valuesToMeasure = [];
      CombinedStream.call(this);
      options = options || {};
      for (var option in options) {
        this[option] = options[option];
      }
    }
    FormData.LINE_BREAK = "\r\n";
    FormData.DEFAULT_CONTENT_TYPE = "application/octet-stream";
    FormData.prototype.append = function(field, value, options) {
      options = options || {};
      if (typeof options == "string") {
        options = { filename: options };
      }
      var append = CombinedStream.prototype.append.bind(this);
      if (typeof value == "number") {
        value = "" + value;
      }
      if (Array.isArray(value)) {
        this._error(new Error("Arrays are not supported."));
        return;
      }
      var header = this._multiPartHeader(field, value, options);
      var footer = this._multiPartFooter();
      append(header);
      append(value);
      append(footer);
      this._trackLength(header, value, options);
    };
    FormData.prototype._trackLength = function(header, value, options) {
      var valueLength = 0;
      if (options.knownLength != null) {
        valueLength += +options.knownLength;
      } else if (Buffer.isBuffer(value)) {
        valueLength = value.length;
      } else if (typeof value === "string") {
        valueLength = Buffer.byteLength(value);
      }
      this._valueLength += valueLength;
      this._overheadLength += Buffer.byteLength(header) + FormData.LINE_BREAK.length;
      if (!value || !value.path && !(value.readable && value.hasOwnProperty("httpVersion")) && !(value instanceof Stream)) {
        return;
      }
      if (!options.knownLength) {
        this._valuesToMeasure.push(value);
      }
    };
    FormData.prototype._lengthRetriever = function(value, callback) {
      if (value.hasOwnProperty("fd")) {
        if (value.end != void 0 && value.end != Infinity && value.start != void 0) {
          callback(null, value.end + 1 - (value.start ? value.start : 0));
        } else {
          fs.stat(value.path, function(err, stat) {
            var fileSize;
            if (err) {
              callback(err);
              return;
            }
            fileSize = stat.size - (value.start ? value.start : 0);
            callback(null, fileSize);
          });
        }
      } else if (value.hasOwnProperty("httpVersion")) {
        callback(null, +value.headers["content-length"]);
      } else if (value.hasOwnProperty("httpModule")) {
        value.on("response", function(response) {
          value.pause();
          callback(null, +response.headers["content-length"]);
        });
        value.resume();
      } else {
        callback("Unknown stream");
      }
    };
    FormData.prototype._multiPartHeader = function(field, value, options) {
      if (typeof options.header == "string") {
        return options.header;
      }
      var contentDisposition = this._getContentDisposition(value, options);
      var contentType = this._getContentType(value, options);
      var contents = "";
      var headers = {
        // add custom disposition as third element or keep it two elements if not
        "Content-Disposition": ["form-data", 'name="' + field + '"'].concat(contentDisposition || []),
        // if no content type. allow it to be empty array
        "Content-Type": [].concat(contentType || [])
      };
      if (typeof options.header == "object") {
        populate(headers, options.header);
      }
      var header;
      for (var prop in headers) {
        if (!headers.hasOwnProperty(prop)) continue;
        header = headers[prop];
        if (header == null) {
          continue;
        }
        if (!Array.isArray(header)) {
          header = [header];
        }
        if (header.length) {
          contents += prop + ": " + header.join("; ") + FormData.LINE_BREAK;
        }
      }
      return "--" + this.getBoundary() + FormData.LINE_BREAK + contents + FormData.LINE_BREAK;
    };
    FormData.prototype._getContentDisposition = function(value, options) {
      var filename, contentDisposition;
      if (typeof options.filepath === "string") {
        filename = path.normalize(options.filepath).replace(/\\/g, "/");
      } else if (options.filename || value.name || value.path) {
        filename = path.basename(options.filename || value.name || value.path);
      } else if (value.readable && value.hasOwnProperty("httpVersion")) {
        filename = path.basename(value.client._httpMessage.path || "");
      }
      if (filename) {
        contentDisposition = 'filename="' + filename + '"';
      }
      return contentDisposition;
    };
    FormData.prototype._getContentType = function(value, options) {
      var contentType = options.contentType;
      if (!contentType && value.name) {
        contentType = mime.lookup(value.name);
      }
      if (!contentType && value.path) {
        contentType = mime.lookup(value.path);
      }
      if (!contentType && value.readable && value.hasOwnProperty("httpVersion")) {
        contentType = value.headers["content-type"];
      }
      if (!contentType && (options.filepath || options.filename)) {
        contentType = mime.lookup(options.filepath || options.filename);
      }
      if (!contentType && typeof value == "object") {
        contentType = FormData.DEFAULT_CONTENT_TYPE;
      }
      return contentType;
    };
    FormData.prototype._multiPartFooter = function() {
      return function(next) {
        var footer = FormData.LINE_BREAK;
        var lastPart = this._streams.length === 0;
        if (lastPart) {
          footer += this._lastBoundary();
        }
        next(footer);
      }.bind(this);
    };
    FormData.prototype._lastBoundary = function() {
      return "--" + this.getBoundary() + "--" + FormData.LINE_BREAK;
    };
    FormData.prototype.getHeaders = function(userHeaders) {
      var header;
      var formHeaders = {
        "content-type": "multipart/form-data; boundary=" + this.getBoundary()
      };
      for (header in userHeaders) {
        if (userHeaders.hasOwnProperty(header)) {
          formHeaders[header.toLowerCase()] = userHeaders[header];
        }
      }
      return formHeaders;
    };
    FormData.prototype.setBoundary = function(boundary) {
      this._boundary = boundary;
    };
    FormData.prototype.getBoundary = function() {
      if (!this._boundary) {
        this._generateBoundary();
      }
      return this._boundary;
    };
    FormData.prototype.getBuffer = function() {
      var dataBuffer = new Buffer.alloc(0);
      var boundary = this.getBoundary();
      for (var i = 0, len = this._streams.length; i < len; i++) {
        if (typeof this._streams[i] !== "function") {
          if (Buffer.isBuffer(this._streams[i])) {
            dataBuffer = Buffer.concat([dataBuffer, this._streams[i]]);
          } else {
            dataBuffer = Buffer.concat([dataBuffer, Buffer.from(this._streams[i])]);
          }
          if (typeof this._streams[i] !== "string" || this._streams[i].substring(2, boundary.length + 2) !== boundary) {
            dataBuffer = Buffer.concat([dataBuffer, Buffer.from(FormData.LINE_BREAK)]);
          }
        }
      }
      return Buffer.concat([dataBuffer, Buffer.from(this._lastBoundary())]);
    };
    FormData.prototype._generateBoundary = function() {
      var boundary = "--------------------------";
      for (var i = 0; i < 24; i++) {
        boundary += Math.floor(Math.random() * 10).toString(16);
      }
      this._boundary = boundary;
    };
    FormData.prototype.getLengthSync = function() {
      var knownLength = this._overheadLength + this._valueLength;
      if (this._streams.length) {
        knownLength += this._lastBoundary().length;
      }
      if (!this.hasKnownLength()) {
        this._error(new Error("Cannot calculate proper length in synchronous way."));
      }
      return knownLength;
    };
    FormData.prototype.hasKnownLength = function() {
      var hasKnownLength = true;
      if (this._valuesToMeasure.length) {
        hasKnownLength = false;
      }
      return hasKnownLength;
    };
    FormData.prototype.getLength = function(cb) {
      var knownLength = this._overheadLength + this._valueLength;
      if (this._streams.length) {
        knownLength += this._lastBoundary().length;
      }
      if (!this._valuesToMeasure.length) {
        process.nextTick(cb.bind(this, null, knownLength));
        return;
      }
      asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {
        if (err) {
          cb(err);
          return;
        }
        values.forEach(function(length) {
          knownLength += length;
        });
        cb(null, knownLength);
      });
    };
    FormData.prototype.submit = function(params, cb) {
      var request, options, defaults = { method: "post" };
      if (typeof params == "string") {
        params = parseUrl(params);
        options = populate({
          port: params.port,
          path: params.pathname,
          host: params.hostname,
          protocol: params.protocol
        }, defaults);
      } else {
        options = populate(params, defaults);
        if (!options.port) {
          options.port = options.protocol == "https:" ? 443 : 80;
        }
      }
      options.headers = this.getHeaders(params.headers);
      if (options.protocol == "https:") {
        request = https.request(options);
      } else {
        request = http.request(options);
      }
      this.getLength(function(err, length) {
        if (err && err !== "Unknown stream") {
          this._error(err);
          return;
        }
        if (length) {
          request.setHeader("Content-Length", length);
        }
        this.pipe(request);
        if (cb) {
          var onResponse;
          var callback = function(error, responce) {
            request.removeListener("error", callback);
            request.removeListener("response", onResponse);
            return cb.call(this, error, responce);
          };
          onResponse = callback.bind(this, null);
          request.on("error", callback);
          request.on("response", onResponse);
        }
      }.bind(this));
      return request;
    };
    FormData.prototype._error = function(err) {
      if (!this.error) {
        this.error = err;
        this.pause();
        this.emit("error", err);
      }
    };
    FormData.prototype.toString = function() {
      return "[object FormData]";
    };
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/core/ApiError.js
var require_ApiError = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/core/ApiError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ApiError = void 0;
    var ApiError = class extends Error {
      constructor(request, response, message) {
        super(message);
        this.name = "ApiError";
        this.url = response.url;
        this.status = response.status;
        this.statusText = response.statusText;
        this.body = response.body;
        this.request = request;
      }
    };
    exports2.ApiError = ApiError;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/core/CancelablePromise.js
var require_CancelablePromise = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/core/CancelablePromise.js"(exports2) {
    "use strict";
    var __classPrivateFieldSet = exports2 && exports2.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports2 && exports2.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _CancelablePromise_isResolved;
    var _CancelablePromise_isRejected;
    var _CancelablePromise_isCancelled;
    var _CancelablePromise_cancelHandlers;
    var _CancelablePromise_promise;
    var _CancelablePromise_resolve;
    var _CancelablePromise_reject;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CancelablePromise = exports2.CancelError = void 0;
    var CancelError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "CancelError";
      }
      get isCancelled() {
        return true;
      }
    };
    exports2.CancelError = CancelError;
    var CancelablePromise = class {
      constructor(executor) {
        _CancelablePromise_isResolved.set(this, void 0);
        _CancelablePromise_isRejected.set(this, void 0);
        _CancelablePromise_isCancelled.set(this, void 0);
        _CancelablePromise_cancelHandlers.set(this, void 0);
        _CancelablePromise_promise.set(this, void 0);
        _CancelablePromise_resolve.set(this, void 0);
        _CancelablePromise_reject.set(this, void 0);
        __classPrivateFieldSet(this, _CancelablePromise_isResolved, false, "f");
        __classPrivateFieldSet(this, _CancelablePromise_isRejected, false, "f");
        __classPrivateFieldSet(this, _CancelablePromise_isCancelled, false, "f");
        __classPrivateFieldSet(this, _CancelablePromise_cancelHandlers, [], "f");
        __classPrivateFieldSet(this, _CancelablePromise_promise, new Promise((resolve, reject) => {
          __classPrivateFieldSet(this, _CancelablePromise_resolve, resolve, "f");
          __classPrivateFieldSet(this, _CancelablePromise_reject, reject, "f");
          const onResolve = (value) => {
            if (__classPrivateFieldGet(this, _CancelablePromise_isResolved, "f") || __classPrivateFieldGet(this, _CancelablePromise_isRejected, "f") || __classPrivateFieldGet(this, _CancelablePromise_isCancelled, "f")) {
              return;
            }
            __classPrivateFieldSet(this, _CancelablePromise_isResolved, true, "f");
            __classPrivateFieldGet(this, _CancelablePromise_resolve, "f")?.call(this, value);
          };
          const onReject = (reason) => {
            if (__classPrivateFieldGet(this, _CancelablePromise_isResolved, "f") || __classPrivateFieldGet(this, _CancelablePromise_isRejected, "f") || __classPrivateFieldGet(this, _CancelablePromise_isCancelled, "f")) {
              return;
            }
            __classPrivateFieldSet(this, _CancelablePromise_isRejected, true, "f");
            __classPrivateFieldGet(this, _CancelablePromise_reject, "f")?.call(this, reason);
          };
          const onCancel = (cancelHandler) => {
            if (__classPrivateFieldGet(this, _CancelablePromise_isResolved, "f") || __classPrivateFieldGet(this, _CancelablePromise_isRejected, "f") || __classPrivateFieldGet(this, _CancelablePromise_isCancelled, "f")) {
              return;
            }
            __classPrivateFieldGet(this, _CancelablePromise_cancelHandlers, "f").push(cancelHandler);
          };
          Object.defineProperty(onCancel, "isResolved", {
            get: () => __classPrivateFieldGet(this, _CancelablePromise_isResolved, "f")
          });
          Object.defineProperty(onCancel, "isRejected", {
            get: () => __classPrivateFieldGet(this, _CancelablePromise_isRejected, "f")
          });
          Object.defineProperty(onCancel, "isCancelled", {
            get: () => __classPrivateFieldGet(this, _CancelablePromise_isCancelled, "f")
          });
          return executor(onResolve, onReject, onCancel);
        }), "f");
      }
      get [(_CancelablePromise_isResolved = /* @__PURE__ */ new WeakMap(), _CancelablePromise_isRejected = /* @__PURE__ */ new WeakMap(), _CancelablePromise_isCancelled = /* @__PURE__ */ new WeakMap(), _CancelablePromise_cancelHandlers = /* @__PURE__ */ new WeakMap(), _CancelablePromise_promise = /* @__PURE__ */ new WeakMap(), _CancelablePromise_resolve = /* @__PURE__ */ new WeakMap(), _CancelablePromise_reject = /* @__PURE__ */ new WeakMap(), Symbol.toStringTag)]() {
        return "Cancellable Promise";
      }
      then(onFulfilled, onRejected) {
        return __classPrivateFieldGet(this, _CancelablePromise_promise, "f").then(onFulfilled, onRejected);
      }
      catch(onRejected) {
        return __classPrivateFieldGet(this, _CancelablePromise_promise, "f").catch(onRejected);
      }
      finally(onFinally) {
        return __classPrivateFieldGet(this, _CancelablePromise_promise, "f").finally(onFinally);
      }
      cancel() {
        if (__classPrivateFieldGet(this, _CancelablePromise_isResolved, "f") || __classPrivateFieldGet(this, _CancelablePromise_isRejected, "f") || __classPrivateFieldGet(this, _CancelablePromise_isCancelled, "f")) {
          return;
        }
        __classPrivateFieldSet(this, _CancelablePromise_isCancelled, true, "f");
        if (__classPrivateFieldGet(this, _CancelablePromise_cancelHandlers, "f").length) {
          try {
            for (const cancelHandler of __classPrivateFieldGet(this, _CancelablePromise_cancelHandlers, "f")) {
              cancelHandler();
            }
          } catch (error) {
            console.warn("Cancellation threw an error", error);
            return;
          }
        }
        __classPrivateFieldGet(this, _CancelablePromise_cancelHandlers, "f").length = 0;
        __classPrivateFieldGet(this, _CancelablePromise_reject, "f")?.call(this, new CancelError("Request aborted"));
      }
      get isCancelled() {
        return __classPrivateFieldGet(this, _CancelablePromise_isCancelled, "f");
      }
    };
    exports2.CancelablePromise = CancelablePromise;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/core/request.js
var require_request = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/core/request.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.request = exports2.catchErrorCodes = exports2.getResponseBody = exports2.getResponseHeader = exports2.sendRequest = exports2.getRequestBody = exports2.getHeaders = exports2.resolve = exports2.getFormData = exports2.getQueryString = exports2.base64 = exports2.isSuccess = exports2.isFormData = exports2.isBlob = exports2.isStringWithValue = exports2.isString = exports2.isDefined = void 0;
    var axios_1 = __importDefault(require_axios2());
    var form_data_1 = __importDefault(require_form_data());
    var ApiError_1 = require_ApiError();
    var CancelablePromise_1 = require_CancelablePromise();
    var isDefined = (value) => {
      return value !== void 0 && value !== null;
    };
    exports2.isDefined = isDefined;
    var isString = (value) => {
      return typeof value === "string";
    };
    exports2.isString = isString;
    var isStringWithValue = (value) => {
      return (0, exports2.isString)(value) && value !== "";
    };
    exports2.isStringWithValue = isStringWithValue;
    var isBlob = (value) => {
      return typeof value === "object" && typeof value.type === "string" && typeof value.stream === "function" && typeof value.arrayBuffer === "function" && typeof value.constructor === "function" && typeof value.constructor.name === "string" && /^(Blob|File)$/.test(value.constructor.name) && /^(Blob|File)$/.test(value[Symbol.toStringTag]);
    };
    exports2.isBlob = isBlob;
    var isFormData = (value) => {
      return value instanceof form_data_1.default;
    };
    exports2.isFormData = isFormData;
    var isSuccess = (status) => {
      return status >= 200 && status < 300;
    };
    exports2.isSuccess = isSuccess;
    var base64 = (str) => {
      try {
        return btoa(str);
      } catch (err) {
        return Buffer.from(str).toString("base64");
      }
    };
    exports2.base64 = base64;
    var getQueryString = (params) => {
      const qs = [];
      const append = (key, value) => {
        qs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);
      };
      const process2 = (key, value) => {
        if ((0, exports2.isDefined)(value)) {
          if (Array.isArray(value)) {
            value.forEach((v) => {
              process2(key, v);
            });
          } else if (typeof value === "object") {
            Object.entries(value).forEach(([k, v]) => {
              process2(`${key}[${k}]`, v);
            });
          } else {
            append(key, value);
          }
        }
      };
      Object.entries(params).forEach(([key, value]) => {
        process2(key, value);
      });
      if (qs.length > 0) {
        return `?${qs.join("&")}`;
      }
      return "";
    };
    exports2.getQueryString = getQueryString;
    var getUrl = (config, options) => {
      const encoder = config.ENCODE_PATH || encodeURI;
      const path = options.url.replace("{api-version}", config.VERSION).replace(/{(.*?)}/g, (substring, group) => {
        if (options.path?.hasOwnProperty(group)) {
          return encoder(String(options.path[group]));
        }
        return substring;
      });
      const url = `${config.BASE}${path}`;
      if (options.query) {
        return `${url}${(0, exports2.getQueryString)(options.query)}`;
      }
      return url;
    };
    var getFormData = (options) => {
      if (options.formData) {
        const formData = new form_data_1.default();
        const process2 = (key, value) => {
          if ((0, exports2.isString)(value) || (0, exports2.isBlob)(value)) {
            formData.append(key, value);
          } else {
            formData.append(key, JSON.stringify(value));
          }
        };
        Object.entries(options.formData).filter(([_, value]) => (0, exports2.isDefined)(value)).forEach(([key, value]) => {
          if (Array.isArray(value)) {
            value.forEach((v) => process2(key, v));
          } else {
            process2(key, value);
          }
        });
        return formData;
      }
      return void 0;
    };
    exports2.getFormData = getFormData;
    var resolve = async (options, resolver) => {
      if (typeof resolver === "function") {
        return resolver(options);
      }
      return resolver;
    };
    exports2.resolve = resolve;
    var getHeaders = async (config, options, formData) => {
      const token = await (0, exports2.resolve)(options, config.TOKEN);
      const username = await (0, exports2.resolve)(options, config.USERNAME);
      const password = await (0, exports2.resolve)(options, config.PASSWORD);
      const additionalHeaders = await (0, exports2.resolve)(options, config.HEADERS);
      const formHeaders = typeof formData?.getHeaders === "function" && formData?.getHeaders() || {};
      const headers = Object.entries({
        Accept: "application/json",
        ...additionalHeaders,
        ...options.headers,
        ...formHeaders
      }).filter(([_, value]) => (0, exports2.isDefined)(value)).reduce((headers2, [key, value]) => ({
        ...headers2,
        [key]: String(value)
      }), {});
      if ((0, exports2.isStringWithValue)(token)) {
        headers["Authorization"] = `Bearer ${token}`;
      }
      if ((0, exports2.isStringWithValue)(username) && (0, exports2.isStringWithValue)(password)) {
        const credentials = (0, exports2.base64)(`${username}:${password}`);
        headers["Authorization"] = `Basic ${credentials}`;
      }
      if (options.body) {
        if (options.mediaType) {
          headers["Content-Type"] = options.mediaType;
        } else if ((0, exports2.isBlob)(options.body)) {
          headers["Content-Type"] = options.body.type || "application/octet-stream";
        } else if ((0, exports2.isString)(options.body)) {
          headers["Content-Type"] = "text/plain";
        } else if (!(0, exports2.isFormData)(options.body)) {
          headers["Content-Type"] = "application/json";
        }
      }
      return headers;
    };
    exports2.getHeaders = getHeaders;
    var getRequestBody = (options) => {
      if (options.body) {
        return options.body;
      }
      return void 0;
    };
    exports2.getRequestBody = getRequestBody;
    var sendRequest = async (config, options, url, body, formData, headers, onCancel, axiosClient) => {
      const source = axios_1.default.CancelToken.source();
      const requestConfig = {
        url,
        headers,
        data: body ?? formData,
        method: options.method,
        withCredentials: config.WITH_CREDENTIALS,
        cancelToken: source.token
      };
      onCancel(() => source.cancel("The user aborted a request."));
      try {
        return await axiosClient.request(requestConfig);
      } catch (error) {
        const axiosError = error;
        if (axiosError.response) {
          return axiosError.response;
        }
        throw error;
      }
    };
    exports2.sendRequest = sendRequest;
    var getResponseHeader = (response, responseHeader) => {
      if (responseHeader) {
        const content = response.headers[responseHeader];
        if ((0, exports2.isString)(content)) {
          return content;
        }
      }
      return void 0;
    };
    exports2.getResponseHeader = getResponseHeader;
    var getResponseBody = (response) => {
      if (response.status !== 204) {
        return response.data;
      }
      return void 0;
    };
    exports2.getResponseBody = getResponseBody;
    var catchErrorCodes = (options, result) => {
      const errors = {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Internal Server Error",
        502: "Bad Gateway",
        503: "Service Unavailable",
        ...options.errors
      };
      const error = errors[result.status];
      if (error) {
        throw new ApiError_1.ApiError(options, result, error);
      }
      if (!result.ok) {
        const errorStatus = result.status ?? "unknown";
        const errorStatusText = result.statusText ?? "unknown";
        const errorBody = (() => {
          try {
            return JSON.stringify(result.body, null, 2);
          } catch (e) {
            return void 0;
          }
        })();
        throw new ApiError_1.ApiError(options, result, `Generic Error: status: ${errorStatus}; status text: ${errorStatusText}; body: ${errorBody}`);
      }
    };
    exports2.catchErrorCodes = catchErrorCodes;
    var request = (config, options, axiosClient = axios_1.default) => {
      return new CancelablePromise_1.CancelablePromise(async (resolve2, reject, onCancel) => {
        try {
          const url = getUrl(config, options);
          const formData = (0, exports2.getFormData)(options);
          const body = (0, exports2.getRequestBody)(options);
          const headers = await (0, exports2.getHeaders)(config, options, formData);
          if (!onCancel.isCancelled) {
            const response = await (0, exports2.sendRequest)(config, options, url, body, formData, headers, onCancel, axiosClient);
            const responseBody = (0, exports2.getResponseBody)(response);
            const responseHeader = (0, exports2.getResponseHeader)(response, options.responseHeader);
            const result = {
              url,
              ok: (0, exports2.isSuccess)(response.status),
              status: response.status,
              statusText: response.statusText,
              body: responseHeader ?? responseBody
            };
            (0, exports2.catchErrorCodes)(options, result);
            resolve2(result.body);
          }
        } catch (error) {
          reject(error);
        }
      });
    };
    exports2.request = request;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/core/AxiosHttpRequest.js
var require_AxiosHttpRequest = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/core/AxiosHttpRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AxiosHttpRequest = void 0;
    var BaseHttpRequest_1 = require_BaseHttpRequest();
    var request_1 = require_request();
    var AxiosHttpRequest = class extends BaseHttpRequest_1.BaseHttpRequest {
      constructor(config) {
        super(config);
      }
      /**
       * Request method
       * @param options The request options from the service
       * @returns CancelablePromise<T>
       * @throws ApiError
       */
      request(options) {
        return (0, request_1.request)(this.config, options);
      }
    };
    exports2.AxiosHttpRequest = AxiosHttpRequest;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/AgenciesService.js
var require_AgenciesService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/AgenciesService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AgenciesService = void 0;
    var AgenciesService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Paginate agencies information.
       * @param withStats
       * @param filtersjson
       * @param page
       * @param count
       * @returns ListAgencyResponse
       * @throws ApiError
       */
      listAgencies(withStats, filtersjson, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/agencies/",
          query: {
            "withStats": withStats,
            "filtersjson": filtersjson,
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Returns agency information by id.
       * @param id agency uuid
       * @param partsArray Agency relation atributes list
       * @returns AgencyResponse
       * @throws ApiError
       */
      getAgency(id, partsArray) {
        return this.httpRequest.request({
          method: "GET",
          url: "/agencies/{id}",
          path: {
            "id": id
          },
          query: {
            "parts[]": partsArray
          }
        });
      }
      /**
       * Paginates agents information of agency.
       * @param id agency uuid
       * @param withStats
       * @param page
       * @param count
       * @returns ListAgentResponse
       * @throws ApiError
       */
      getAgencyAgents(id, withStats, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/agencies/{id}/agents",
          path: {
            "id": id
          },
          query: {
            "withStats": withStats,
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Returns total agencies stats information.
       * @returns AgenciesStatsResponse
       * @throws ApiError
       */
      getAgenciesStats() {
        return this.httpRequest.request({
          method: "GET",
          url: "/agencies/stats"
        });
      }
      /**
       * Paginate agencies information with filters and sort.
       * @param withStats
       * @param filtersjson
       * @param page
       * @param count
       * @returns ListAgencyResponse
       * @throws ApiError
       */
      getlistAgenciesWithFilters(withStats, filtersjson, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/agencies/get/list",
          query: {
            "withStats": withStats,
            "filtersjson": filtersjson,
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Returns bulk agencies information.
       * @param idsArray agency uuids
       * @param partsArray Agency relation atributes list
       * @returns AgencyResponse
       * @throws ApiError
       */
      getBulkAgencies(idsArray, partsArray) {
        return this.httpRequest.request({
          method: "GET",
          url: "/agencies/bulk",
          query: {
            "ids[]": idsArray,
            "parts[]": partsArray
          }
        });
      }
      /**
       * Returns an agencys creator channels
       * @param id agency uuid
       * @param creatorIds
       * @param page
       * @param count
       * @returns ListAgencyCreatorChannelsRes
       * @throws ApiError
       */
      listAgencyCreatorChannels(id, creatorIds, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/agencies/{id}/creator-channels",
          path: {
            "id": id
          },
          query: {
            "creatorIds": creatorIds,
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Paginates creators information of agency.
       * @param id agency uuid
       * @param status
       * @param page
       * @param count
       * @returns ListAgencyCreatorsResponse
       * @throws ApiError
       */
      getAgencyCreators(id, status, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/agencies/{id}/creators",
          path: {
            "id": id
          },
          query: {
            "status": status,
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Returns a creator for an agency.
       * @param id agency uuid
       * @param creatorId creator uuid
       * @param status
       * @returns GetAgencyCreatorRes
       * @throws ApiError
       */
      getAgencyCreator(id, creatorId, status) {
        return this.httpRequest.request({
          method: "GET",
          url: "/agencies/{id}/creators/{creatorId}",
          path: {
            "id": id,
            "creatorId": creatorId
          },
          query: {
            "status": status
          }
        });
      }
    };
    exports2.AgenciesService = AgenciesService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/AgenciesMutationService.js
var require_AgenciesMutationService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/AgenciesMutationService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AgenciesMutationService = void 0;
    var AgenciesMutationService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Update agent information.
       * @param id agent uuid
       * @param requestBody
       * @returns UpdateResponse
       * @throws ApiError
       */
      updateAgent(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/agents/{id}",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Delete agent
       * @param id agent uuid
       * @returns DeleteAgentRes
       * @throws ApiError
       */
      deleteAgent(id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/agents/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Assign agent user-id
       * @param id agent uuid
       * @returns UpdateAgentUserIdResponse
       * @throws ApiError
       */
      assignAgentUserId(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/agents/{id}/assign/user-id",
          path: {
            "id": id
          }
        });
      }
      /**
       * Create agency information.
       * @param requestBody
       * @returns CreateAgencyReponse
       * @throws ApiError
       */
      createAgency(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/agencies/",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Update agency information.
       * @param id agency uuid
       * @param requestBody
       * @returns UpdateResponse
       * @throws ApiError
       */
      updateAgency(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/agencies/{id}",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Delete agency
       * @param id agency uuid
       * @returns DeleteResponse
       * @throws ApiError
       */
      deleteAgency(id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/agencies/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Create agent information of agency.
       * @param id agency uuid
       * @param requestBody
       * @returns CreateAgentRes
       * @throws ApiError
       */
      createAgent(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/agencies/{id}/agents",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.AgenciesMutationService = AgenciesMutationService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/AgencySocialsService.js
var require_AgencySocialsService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/AgencySocialsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AgencySocialsService = void 0;
    var AgencySocialsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Remove agency social media
       * @param agencySocialMediaId agency social media relation uuid
       * @param id agency uuid
       * @returns DeleteResponse
       * @throws ApiError
       */
      removeAgencySocialMedia(agencySocialMediaId, id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/agencies/{id}/socials/{agencySocialMediaId}",
          path: {
            "agencySocialMediaId": agencySocialMediaId,
            "id": id
          }
        });
      }
      /**
       * Add agency social media
       * @param id agency uuid
       * @param requestBody
       * @returns UpdateResponse
       * @throws ApiError
       */
      addAgencySocialMedia(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/agencies/{id}/socials/",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.AgencySocialsService = AgencySocialsService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/AgentsService.js
var require_AgentsService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/AgentsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AgentsService = void 0;
    var AgentsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Returns agent information by id.
       * @param id agent uuid
       * @param partsArray Agent relation atributes list
       * @returns AgentResponse
       * @throws ApiError
       */
      getAgent(id, partsArray) {
        return this.httpRequest.request({
          method: "GET",
          url: "/agents/{id}",
          path: {
            "id": id
          },
          query: {
            "parts[]": partsArray
          }
        });
      }
      /**
       * Paginate agents information.
       * @param withStats
       * @param filtersjson
       * @param page
       * @param count
       * @returns ListAgentResponse
       * @throws ApiError
       */
      listAgents(withStats, filtersjson, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/agents/",
          query: {
            "withStats": withStats,
            "filtersjson": filtersjson,
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Returns bulk agents information.
       * @param idsArray agents uuids
       * @param partsArray Agent relation atributes list
       * @returns AgentResponse
       * @throws ApiError
       */
      getBulkAgents(idsArray, partsArray) {
        return this.httpRequest.request({
          method: "GET",
          url: "/agents/bulk",
          query: {
            "ids[]": idsArray,
            "parts[]": partsArray
          }
        });
      }
      /**
       * Paginate agents information with filters and sort.
       * @param withStats
       * @param filtersjson
       * @param page
       * @param count
       * @returns ListAgentResponse
       * @throws ApiError
       */
      listAgentsWithFilters(withStats, filtersjson, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/agents/get/list",
          query: {
            "withStats": withStats,
            "filtersjson": filtersjson,
            "page": page,
            "count": count
          }
        });
      }
    };
    exports2.AgentsService = AgentsService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/AgentSocialsService.js
var require_AgentSocialsService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/AgentSocialsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AgentSocialsService = void 0;
    var AgentSocialsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Remove agent social media
       * @param agentSocialMediaId agent social media relation uuid
       * @param id agent uuid
       * @returns DeleteResponse
       * @throws ApiError
       */
      removeAgentSocialMedia(agentSocialMediaId, id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/agents/{id}/socials/{agentSocialMediaId}",
          path: {
            "agentSocialMediaId": agentSocialMediaId,
            "id": id
          }
        });
      }
      /**
       * Add agent social media
       * @param id agent uuid
       * @param requestBody
       * @returns UpdateResponse
       * @throws ApiError
       */
      addAgentSocialMedia(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/agents/{id}/socials/",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.AgentSocialsService = AgentSocialsService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/AudienceJourneyService.js
var require_AudienceJourneyService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/AudienceJourneyService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AudienceJourneyService = void 0;
    var AudienceJourneyService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Get audience journey by user ID
       * @param userId
       * @param limit
       * @param offset
       * @returns AudienceJourneyResponse
       * @throws ApiError
       */
      getJourneyByUserId(userId, limit, offset) {
        return this.httpRequest.request({
          method: "GET",
          url: "/audience/journey/user/{userId}",
          path: {
            "userId": userId
          },
          query: {
            "limit": limit,
            "offset": offset
          }
        });
      }
      /**
       * Get audience journey by username
       * @param username
       * @param limit
       * @param offset
       * @returns AudienceJourneyResponse
       * @throws ApiError
       */
      getJourneyByUsername(username, limit, offset) {
        return this.httpRequest.request({
          method: "GET",
          url: "/audience/journey/username/{username}",
          path: {
            "username": username
          },
          query: {
            "limit": limit,
            "offset": offset
          }
        });
      }
    };
    exports2.AudienceJourneyService = AudienceJourneyService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/AuditLogsService.js
var require_AuditLogsService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/AuditLogsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AuditLogsService = void 0;
    var AuditLogsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Paginate Creator / Channel audit log information.
       * @param refId
       * @param auditType
       * @param page
       * @param count
       * @returns ListAuditLogsRes
       * @throws ApiError
       */
      listAuditLogs(refId, auditType, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/audit/{refId}",
          path: {
            "refId": refId
          },
          query: {
            "auditType": auditType,
            "page": page,
            "count": count
          }
        });
      }
    };
    exports2.AuditLogsService = AuditLogsService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/BlocklistService.js
var require_BlocklistService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/BlocklistService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BlocklistService = void 0;
    var BlocklistService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * list creators blocklist
       * @param filtersjson
       * @param page
       * @param count
       * @returns ListCreatorsBlocklistRes
       * @throws ApiError
       */
      listCreatorsBlocklist(filtersjson, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/blocklist/list",
          query: {
            "filtersjson": filtersjson,
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Updates creator blocklist information by id.
       * @param creatorId creator uuid
       * @param requestBody
       * @returns SuccessIdResponse
       * @throws ApiError
       */
      updateBlockedCreator(creatorId, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/blocklist/{creatorId}",
          path: {
            "creatorId": creatorId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Remove blocked creator from blocklist by creator id.
       * @param creatorId creator uuid
       * @param requestBody
       * @returns DeleteResponse
       * @throws ApiError
       */
      removeBlockedCreator(creatorId, requestBody) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/blocklist/{creatorId}",
          path: {
            "creatorId": creatorId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Add a new blocked creator to blocklist
       * @param requestBody
       * @returns CreateCreatorBlocklistRes
       * @throws ApiError
       */
      addBlockedCreator(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/blocklist/",
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.BlocklistService = BlocklistService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/ChannelsService.js
var require_ChannelsService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/ChannelsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChannelsService = void 0;
    var ChannelsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Returns channels information.
       * @param idsArray channel uuids
       * @param partsArray Channel relation atributes list
       * @returns ChannelResponse
       * @throws ApiError
       */
      getChannels(idsArray, partsArray) {
        return this.httpRequest.request({
          method: "GET",
          url: "/channels/bulk",
          query: {
            "ids[]": idsArray,
            "parts[]": partsArray
          }
        });
      }
      /**
       * Returns channels information with POST.
       * @param requestBody
       * @returns ChannelResponse
       * @throws ApiError
       */
      postGetChannels(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/channels/bulk",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Returns channel information by id.
       * @param id channel uuid
       * @param partsArray Channel relation atributes list
       * @param hydrateAdvertiserNames hydrate advertiser names
       * @returns ChannelResponse
       * @throws ApiError
       */
      getChannel(id, partsArray, hydrateAdvertiserNames) {
        return this.httpRequest.request({
          method: "GET",
          url: "/channels/{id}",
          path: {
            "id": id
          },
          query: {
            "parts[]": partsArray,
            "hydrateAdvertiserNames": hydrateAdvertiserNames
          }
        });
      }
      /**
       * Delete channels from CRM
       * @param id
       * @param keepSendingOffers
       * @returns ChannelResponse
       * @throws ApiError
       */
      deleteChannel(id, keepSendingOffers) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/channels/{id}",
          path: {
            "id": id
          },
          query: {
            "keepSendingOffers": keepSendingOffers
          }
        });
      }
      /**
       * Returns channel information by platform and platform id.
       * @param platformId
       * @param id
       * @param parts
       * @param hydrateAdvertiserNames
       * @returns ChannelResponse
       * @throws ApiError
       */
      getChannelByPlatform(platformId, id, parts, hydrateAdvertiserNames) {
        return this.httpRequest.request({
          method: "GET",
          url: "/channels/platform/{platformId}/{id}",
          path: {
            "platformId": platformId,
            "id": id
          },
          query: {
            "parts": parts,
            "hydrateAdvertiserNames": hydrateAdvertiserNames
          }
        });
      }
    };
    exports2.ChannelsService = ChannelsService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/CreatorAgenciesService.js
var require_CreatorAgenciesService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/CreatorAgenciesService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreatorAgenciesService = void 0;
    var CreatorAgenciesService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Remove creator from agency relationship
       * @param creatorAgencyId creator agency relation uuid
       * @param id creator uuid
       * @returns RemoveCreatorFromAgencyResp
       * @throws ApiError
       */
      removeCreatorFromAgency(creatorAgencyId, id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/creators/{id}/agencies/{creatorAgencyId}",
          path: {
            "creatorAgencyId": creatorAgencyId,
            "id": id
          }
        });
      }
    };
    exports2.CreatorAgenciesService = CreatorAgenciesService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/CreatorMergeService.js
var require_CreatorMergeService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/CreatorMergeService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreatorMergeService = void 0;
    var CreatorMergeService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Merge creators by id
       * merge creator by using provided base or oldest twitch
       * @param requestBody
       * @returns CreatorMergeResponse
       * @throws ApiError
       */
      manualMergeCreators(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/creators/merge",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Separate creator with selected channels
       * separate creator and channels to hes old creator
       * @param requestBody
       * @returns SuccessIdResponse
       * @throws ApiError
       */
      separateCreators(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/creators/separate",
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.CreatorMergeService = CreatorMergeService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/CreatorProgramsService.js
var require_CreatorProgramsService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/CreatorProgramsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreatorProgramsService = void 0;
    var CreatorProgramsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Remove creator from SE creators program
       * @param creatorProgramId creator program relation uuid
       * @param id creator uuid
       * @returns DeleteResponse
       * @throws ApiError
       */
      removeCreatorFromProgram(creatorProgramId, id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/creators/{id}/programs/{creatorProgramId}",
          path: {
            "creatorProgramId": creatorProgramId,
            "id": id
          }
        });
      }
      /**
       * Add creator to SE creators program
       * @param id creator uuid
       * @param requestBody
       * @returns UpdateResponse
       * @throws ApiError
       */
      addCreatorToProgram(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/creators/{id}/programs/",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.CreatorProgramsService = CreatorProgramsService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/CreatorsService.js
var require_CreatorsService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/CreatorsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreatorsService = void 0;
    var CreatorsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Returns creators information.
       * @param idsArray creators uuids
       * @param partsArray Creator relation atributes list
       * @param redirect True/false to fetch merged creator info
       * @returns CreatorResponse
       * @throws ApiError
       */
      getCreators(idsArray, partsArray, redirect) {
        return this.httpRequest.request({
          method: "GET",
          url: "/creators/bulk",
          query: {
            "ids[]": idsArray,
            "parts[]": partsArray,
            "redirect": redirect
          }
        });
      }
      /**
       * Returns creators information with POST
       * @param requestBody
       * @returns CreatorResponse
       * @throws ApiError
       */
      postGetCreators(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/creators/bulk",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Returns creator information by id.
       * @param id creator uuid
       * @param partsArray Creator relation atributes list
       * @param redirect True/false to fetch merged creator info
       * @returns CreatorResponse
       * @throws ApiError
       */
      getCreator(id, partsArray, redirect) {
        return this.httpRequest.request({
          method: "GET",
          url: "/creators/{id}",
          path: {
            "id": id
          },
          query: {
            "parts[]": partsArray,
            "redirect": redirect
          }
        });
      }
      /**
       * Updates creator information by id.
       * @param id creator uuid
       * @param requestBody
       * @returns UpdateCreatorResp
       * @throws ApiError
       */
      updateCreator(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/creators/{id}",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Creator api
       * @param requestBody
       * @returns UpdateResponse
       * @throws ApiError
       */
      creatorsControllerBulkUpdateCreator(requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/creators/bulk/update",
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.CreatorsService = CreatorsService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/CreatorSeRelationshipService.js
var require_CreatorSeRelationshipService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/CreatorSeRelationshipService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreatorSeRelationshipService = void 0;
    var CreatorSeRelationshipService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Remove creator SE relationship
       * @param creatorSeRelationshipId creator SE relationship relation uuid
       * @param id creator uuid
       * @returns DeleteResponse
       * @throws ApiError
       */
      removeCreatorSeRelationship(creatorSeRelationshipId, id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/creators/{id}/serelationship/{creatorSERelationshipId}",
          path: {
            "creatorSERelationshipId": creatorSeRelationshipId,
            "id": id
          }
        });
      }
    };
    exports2.CreatorSeRelationshipService = CreatorSeRelationshipService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/CreatorsImportService.js
var require_CreatorsImportService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/CreatorsImportService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreatorsImportService = void 0;
    var CreatorsImportService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Import creator csv information
       * import csv of creators -
       * any existing creators will simply updated with the provided info
       * any non existing will be created with their channel
       * currently supported platforms: tiktok
       * @returns ImportCreatorCSVLineResponse
       * @throws ApiError
       */
      importCsvCreators() {
        return this.httpRequest.request({
          method: "POST",
          url: "/creators/import/csv"
        });
      }
      /**
       * Update creator csv information
       * @returns ImportCreatorCSVLineResponse
       * @throws ApiError
       */
      updateCreators() {
        return this.httpRequest.request({
          method: "POST",
          url: "/creators/import/update/csv"
        });
      }
      /**
       * Update creator verified creator email csv information
       * @returns ImportCreatorCSVLineResponse
       * @throws ApiError
       */
      updateVerifiedCreatorEmail() {
        return this.httpRequest.request({
          method: "POST",
          url: "/creators/import/email/csv"
        });
      }
      /**
       * Import creator details from CSV
       * @param requestBody
       * @returns UpdateResponse
       * @throws ApiError
       */
      importCreatorDetailsFromCsv(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/creators/import/details/csv",
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.CreatorsImportService = CreatorsImportService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/CreatorsInternalService.js
var require_CreatorsInternalService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/CreatorsInternalService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreatorsInternalService = void 0;
    var CreatorsInternalService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Resends full creator info to msg bus.
       * @param id creator uuid
       * @returns UpdateResponse
       * @throws ApiError
       */
      reindexCreator(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/creators/internal/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Get creator suggested details with review details
       * @param id
       * @returns GetCreatorSuggestedDetailsWithReviewRes
       * @throws ApiError
       */
      getCreatorSuggestedDetailsWithReview(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/creators/internal/{id}/suggested/details",
          path: {
            "id": id
          }
        });
      }
      /**
       * Update creator suggested details email
       * @param id
       * @param requestBody
       * @returns UpdateResponse
       * @throws ApiError
       */
      updateCreatorSuggestedDetailsEmail(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/creators/internal/{id}/suggested/details/email",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Check creator suggested details and auto updated creator details
       * @param id
       * @returns UpdateResponse
       * @throws ApiError
       */
      checkCreatorSuggestedDetailsAndAutoUpdate(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/creators/internal/{id}/suggested/details/auto",
          path: {
            "id": id
          }
        });
      }
      /**
       * Get creator suggested details with review details in bulk
       * @param idsArray creator uuids
       * @returns GetCreatorSuggestedDetailsWithReviewRes
       * @throws ApiError
       */
      getCreatorSuggestedDetailsWithReviewBulk(idsArray) {
        return this.httpRequest.request({
          method: "GET",
          url: "/creators/internal/suggested/details/bulk",
          query: {
            "ids[]": idsArray
          }
        });
      }
    };
    exports2.CreatorsInternalService = CreatorsInternalService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/CreatorSocialsService.js
var require_CreatorSocialsService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/CreatorSocialsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreatorSocialsService = void 0;
    var CreatorSocialsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Remove creator social media
       * @param creatorSocialMediaId creator social media relation uuid
       * @param id creator uuid
       * @returns DeleteResponse
       * @throws ApiError
       */
      removeCreatorSocialMedia(creatorSocialMediaId, id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/creators/{id}/socials/{creatorSocialMediaId}",
          path: {
            "creatorSocialMediaId": creatorSocialMediaId,
            "id": id
          }
        });
      }
      /**
       * Add creator social media
       * @param id creator uuid
       * @param requestBody
       * @returns UpdateResponse
       * @throws ApiError
       */
      addCreatorSocialMedia(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/creators/{id}/socials/",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.CreatorSocialsService = CreatorSocialsService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/CreatorSuggestedDetailsService.js
var require_CreatorSuggestedDetailsService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/CreatorSuggestedDetailsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreatorSuggestedDetailsService = void 0;
    var CreatorSuggestedDetailsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * SE Review creator suggested details
       * @param id creator uuid
       * @param requestBody
       * @returns UpdateResponse
       * @throws ApiError
       */
      seReview(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/creators/{id}/suggested/details/review",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.CreatorSuggestedDetailsService = CreatorSuggestedDetailsService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/HealthService.js
var require_HealthService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/HealthService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HealthService = void 0;
    var HealthService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Get health
       * @returns any Successful response
       * @throws ApiError
       */
      healthControllerGetHealth() {
        return this.httpRequest.request({
          method: "GET",
          url: "/health"
        });
      }
      /**
       * Hello
       * @param to
       * @returns any Successful response
       * @throws ApiError
       */
      healthControllerHello(to) {
        return this.httpRequest.request({
          method: "GET",
          url: "/hello",
          query: {
            "to": to
          }
        });
      }
    };
    exports2.HealthService = HealthService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/JobsService.js
var require_JobsService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/JobsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.JobsService = void 0;
    var JobsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Create new import job ASYNC
       * @param requestBody
       * @returns NewImportJobResponse
       * @throws ApiError
       */
      createNewImportJob(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/jobs/import",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get job information by id
       * @param id job uuid
       * @returns GetJobRes
       * @throws ApiError
       */
      getJob(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/jobs/{id}",
          path: {
            "id": id
          }
        });
      }
    };
    exports2.JobsService = JobsService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/ManagersService.js
var require_ManagersService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/ManagersService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ManagersService = void 0;
    var ManagersService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Returns available all avaialable users
       * @returns UserManagerResponse
       * @throws ApiError
       */
      getAllUsers() {
        return this.httpRequest.request({
          method: "GET",
          url: "/managers/users/all"
        });
      }
      /**
       * Returns available users for manager.
       * @param managerId
       * @returns UserManagerResponse
       * @throws ApiError
       */
      getManagerUsers(managerId) {
        return this.httpRequest.request({
          method: "GET",
          url: "/managers/users",
          query: {
            "managerId": managerId
          }
        });
      }
      /**
       * Returns manager stats information.
       * @returns ManagersStatsResponse
       * @throws ApiError
       */
      getManagersStats() {
        return this.httpRequest.request({
          method: "GET",
          url: "/managers/stats"
        });
      }
      /**
       * Returns managers information.
       * @param partsArray Manager relation atributes list
       * @returns ManagerResponse
       * @throws ApiError
       */
      getManagers(partsArray) {
        return this.httpRequest.request({
          method: "GET",
          url: "/managers/",
          query: {
            "parts[]": partsArray
          }
        });
      }
      /**
       * Create manager information by id.
       * @param requestBody
       * @returns CreateManagerRes
       * @throws ApiError
       */
      createManager(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/managers/",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * list all managers paginated with filters and sort.
       * @param partsArray Manager relation atributes list
       * @param filtersjson filtersjson is the ListManagersRequestFilters stringify into a query param
       * @param page
       * @param count
       * @returns ListManagersRes
       * @throws ApiError
       */
      getListOfManagers(partsArray, filtersjson, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/managers/list",
          query: {
            "parts[]": partsArray,
            "filtersjson": filtersjson,
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Returns managers information by ids
       * @param idsArray managers uuids
       * @param partsArray Manager relation atributes list
       * @returns ManagerResponse
       * @throws ApiError
       */
      getBulkManagers(idsArray, partsArray) {
        return this.httpRequest.request({
          method: "GET",
          url: "/managers/bulk",
          query: {
            "ids[]": idsArray,
            "parts[]": partsArray
          }
        });
      }
      /**
       * Returns manager information by id.
       * @param id manager uuid
       * @param partsArray Manager relation atributes list
       * @returns ManagerResponse
       * @throws ApiError
       */
      getManager(id, partsArray) {
        return this.httpRequest.request({
          method: "GET",
          url: "/managers/{id}",
          path: {
            "id": id
          },
          query: {
            "parts[]": partsArray
          }
        });
      }
      /**
       * Updates manager information by id.
       * @param id manager uuid
       * @param requestBody
       * @returns UpdateManagerRes
       * @throws ApiError
       */
      updateManager(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/managers/{id}",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Delete manager information by id.
       * @param id manager uuid
       * @returns DeleteResponse
       * @throws ApiError
       */
      deleteManager(id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/managers/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Returns manager information by id.
       * @param userId manager user uuid
       * @param partsArray Manager relation atributes list
       * @returns ManagerResponse
       * @throws ApiError
       */
      getManagerByUserId(userId, partsArray) {
        return this.httpRequest.request({
          method: "GET",
          url: "/managers/user/{userId}",
          path: {
            "userId": userId
          },
          query: {
            "parts[]": partsArray
          }
        });
      }
    };
    exports2.ManagersService = ManagersService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/ManagerSocialsService.js
var require_ManagerSocialsService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/ManagerSocialsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ManagerSocialsService = void 0;
    var ManagerSocialsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Remove manager social media
       * @param managerSocialMediaId manager social media relation uuid
       * @param id manager uuid
       * @returns DeleteResponse
       * @throws ApiError
       */
      removeManagerSocialMedia(managerSocialMediaId, id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/managers/{id}/socials/{managerSocialMediaId}",
          path: {
            "managerSocialMediaId": managerSocialMediaId,
            "id": id
          }
        });
      }
      /**
       * Add manager social media
       * @param id manager uuid
       * @param requestBody
       * @returns CreateManagerSocialResponse
       * @throws ApiError
       */
      addManagerSocialMedia(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/managers/{id}/socials/",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.ManagerSocialsService = ManagerSocialsService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/ManagersTeamsService.js
var require_ManagersTeamsService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/ManagersTeamsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ManagersTeamsService = void 0;
    var ManagersTeamsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Returns managers teams information.
       * @returns ManagersTeamResponse
       * @throws ApiError
       */
      getManagersTeams() {
        return this.httpRequest.request({
          method: "GET",
          url: "/teams/"
        });
      }
      /**
       * Creates a managers team.
       * @param requestBody
       * @returns UpsertManagerTeamResponse
       * @throws ApiError
       */
      createManagerTeam(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/teams/",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Returns team information by id.
       * @param id managers team uuid
       * @returns ManagersTeamResponse
       * @throws ApiError
       */
      getManagerTeam(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/teams/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Updates mangager team information by id.
       * @param id managers team uuid
       * @param requestBody
       * @returns UpdateResponse
       * @throws ApiError
       */
      updateManagerTeam(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/teams/{id}",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Deletes a manager team.
       * @param id managers team uuid
       * @returns DeleteResponse
       * @throws ApiError
       */
      deleteManagerTeam(id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/teams/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Returns manager information by team id.
       * @param id managers team uuid
       * @returns ManagerResponse
       * @throws ApiError
       */
      getManagersByTeam(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/teams/{id}/managers",
          path: {
            "id": id
          }
        });
      }
      /**
       * Paginate manager teams information with filters and sort.
       * @param filtersjson filtersjson is the ListManagerTeamsRequestFilters stringify into a query param
       * @param page
       * @param count
       * @returns ListManagerTeamsRes
       * @throws ApiError
       */
      listManagerTeams(filtersjson, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/teams/get/list",
          query: {
            "filtersjson": filtersjson,
            "page": page,
            "count": count
          }
        });
      }
    };
    exports2.ManagersTeamsService = ManagersTeamsService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/NotesService.js
var require_NotesService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/NotesService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NotesService = void 0;
    var NotesService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * list notes
       * @param mainContextType
       * @param mainContextId
       * @param isPinned
       * @param secondaryContextType
       * @param secondaryContextId
       * @param page
       * @param count
       * @returns ListNotesRes
       * @throws ApiError
       */
      listNotes(mainContextType, mainContextId, isPinned, secondaryContextType, secondaryContextId, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/notes/",
          query: {
            "mainContextType": mainContextType,
            "mainContextId": mainContextId,
            "isPinned": isPinned,
            "secondaryContextType": secondaryContextType,
            "secondaryContextId": secondaryContextId,
            "page": page,
            "count": count
          }
        });
      }
      /**
       * create a new note
       * @param requestBody
       * @returns SuccessIdResponse
       * @throws ApiError
       */
      createNote(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/notes/",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * total unread notes
       * @param mainContextType
       * @param mainContextId
       * @param isPinned
       * @param secondaryContextType
       * @param secondaryContextId
       * @param page
       * @param count
       * @returns CountUnreadNotesRes
       * @throws ApiError
       */
      getTotalUnreadNotes(mainContextType, mainContextId, isPinned, secondaryContextType, secondaryContextId, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/notes/totalUnreadNotes",
          query: {
            "mainContextType": mainContextType,
            "mainContextId": mainContextId,
            "isPinned": isPinned,
            "secondaryContextType": secondaryContextType,
            "secondaryContextId": secondaryContextId,
            "page": page,
            "count": count
          }
        });
      }
      /**
       * update a note
       * @param id note uuid
       * @param requestBody
       * @returns UpdateResponse
       * @throws ApiError
       */
      updateNote(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/notes/{id}",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * delete a note
       * @param id note uuid
       * @returns DeleteResponse
       * @throws ApiError
       */
      deleteNote(id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/notes/{id}",
          path: {
            "id": id
          }
        });
      }
    };
    exports2.NotesService = NotesService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/NotesCommentsService.js
var require_NotesCommentsService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/NotesCommentsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NotesCommentsService = void 0;
    var NotesCommentsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * list comments
       * @param id note uuid
       * @returns ListCommentsRes
       * @throws ApiError
       */
      listComments(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/notes/{id}/comments/",
          path: {
            "id": id
          }
        });
      }
      /**
       * upsert comment
       * @param id note uuid
       * @param requestBody
       * @returns SuccessIdResponse
       * @throws ApiError
       */
      upsertComment(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/notes/{id}/comments/",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * delete a comment
       * @param id note uuid
       * @param commentId comment uuid
       * @returns DeleteResponse
       * @throws ApiError
       */
      deleteComment(id, commentId) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/notes/{id}/comments/{commentId}",
          path: {
            "id": id,
            "commentId": commentId
          }
        });
      }
    };
    exports2.NotesCommentsService = NotesCommentsService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/NotificationsService.js
var require_NotificationsService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/NotificationsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NotificationsService = void 0;
    var NotificationsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * list user notifications
       * @param status
       * @param page
       * @param count
       * @returns ListNotificationsResponse
       * @throws ApiError
       */
      listUserNotifications(status, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/notifications/",
          query: {
            "status": status,
            "page": page,
            "count": count
          }
        });
      }
      /**
       * updates user notifications status
       * @param requestBody
       * @returns UpdateResponse
       * @throws ApiError
       */
      updateNotificationStatus(requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/notifications/",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * get user notification settings
       * @returns UserNotificationSettingsResponse
       * @throws ApiError
       */
      getUserNotificationSettings() {
        return this.httpRequest.request({
          method: "GET",
          url: "/notifications/settings/"
        });
      }
      /**
       * upsert user notification settings
       * @param requestBody
       * @returns UpdateResponse
       * @throws ApiError
       */
      upsertUserNotificationSettings(requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/notifications/settings/",
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.NotificationsService = NotificationsService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/PaymentsService.js
var require_PaymentsService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/PaymentsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PaymentsService = void 0;
    var PaymentsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * list paginated payments for creator
       * @param creatorId creator uuid
       * @param sortColumn
       * @param sortDir
       * @param paymentStatus
       * @param startDate
       * @param endDate
       * @param pageSize
       * @param pageToken
       * @returns SearchPaymentResponse
       * @throws ApiError
       */
      listPayments(creatorId, sortColumn, sortDir, paymentStatus, startDate, endDate, pageSize, pageToken) {
        return this.httpRequest.request({
          method: "GET",
          url: "/payments/creators/{creatorId}/list",
          path: {
            "creatorId": creatorId
          },
          query: {
            "paymentStatus": paymentStatus,
            "startDate": startDate,
            "endDate": endDate,
            "pageSize": pageSize,
            "pageToken": pageToken,
            "sortColumn": sortColumn,
            "sortDir": sortDir
          }
        });
      }
      /**
       * Get all agency payments by agency id and its agents
       * @param id agency uuid
       * @param sortColumn
       * @param sortDir
       * @returns SearchPaymentResponse
       * @throws ApiError
       */
      getAgencyAgentsPayments(id, sortColumn, sortDir) {
        return this.httpRequest.request({
          method: "GET",
          url: "/payments/agencies/{id}/agents",
          path: {
            "id": id
          },
          query: {
            "sortColumn": sortColumn,
            "sortDir": sortDir
          }
        });
      }
      /**
       * Get a agent payment account status
       * @param id agent / creator uuid
       * @returns PaymentAccountStatusResponse
       * @throws ApiError
       */
      getAccountStatus(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/payments/{id}/account/status",
          path: {
            "id": id
          }
        });
      }
      /**
       * Create a new agent payment account
       * @param agentId agent uuid
       * @returns UpdateResponse
       * @throws ApiError
       */
      createAgentAccount(agentId) {
        return this.httpRequest.request({
          method: "POST",
          url: "/payments/{agentId}/account",
          path: {
            "agentId": agentId
          }
        });
      }
    };
    exports2.PaymentsService = PaymentsService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/PermissionsService.js
var require_PermissionsService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/PermissionsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PermissionsService = void 0;
    var PermissionsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * list all group
       * @returns UsersGroupResponse
       * @throws ApiError
       */
      listAllGroups() {
        return this.httpRequest.request({
          method: "GET",
          url: "/permissions/groups"
        });
      }
      /**
       * create new group
       * @param requestBody
       * @returns UpdateResponse
       * @throws ApiError
       */
      newGroup(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/permissions/groups",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * list all users in a group
       * @param groupName
       * @returns UsersGroupResponse
       * @throws ApiError
       */
      listAllUsersInGroups(groupName) {
        return this.httpRequest.request({
          method: "GET",
          url: "/permissions/groups/{groupName}/users",
          path: {
            "groupName": groupName
          }
        });
      }
      /**
       * add users to group
       * @param groupName
       * @param authorization
       * @param requestBody
       * @returns UpdateResponse
       * @throws ApiError
       */
      addUsersToGroup(groupName, authorization, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/permissions/groups/{groupName}/users",
          path: {
            "groupName": groupName
          },
          headers: {
            "authorization": authorization
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * remove users from group
       * @param groupName
       * @param authorization
       * @param requestBody
       * @returns UpdateResponse
       * @throws ApiError
       */
      removeUsersFromGroup(groupName, authorization, requestBody) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/permissions/groups/{groupName}/users",
          path: {
            "groupName": groupName
          },
          headers: {
            "authorization": authorization
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Check if user id is in group
       * @param groupName
       * @param userId
       * @returns UpdateResponse
       * @throws ApiError
       */
      isUserInGroup(groupName, userId) {
        return this.httpRequest.request({
          method: "GET",
          url: "/permissions/groups/{groupName}/users/{userId}",
          path: {
            "groupName": groupName,
            "userId": userId
          }
        });
      }
      /**
       * add user by email
       * @param groupName
       * @param authorization
       * @param requestBody
       * @returns UpdateResponse
       * @throws ApiError
       */
      addUserToGroupByEmail(groupName, authorization, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/permissions/groups/{groupName}/users/email",
          path: {
            "groupName": groupName
          },
          headers: {
            "authorization": authorization
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * remove group
       * @param groupName
       * @returns UpdateResponse
       * @throws ApiError
       */
      removeGroup(groupName) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/permissions/groups/{groupName}/akn",
          path: {
            "groupName": groupName
          }
        });
      }
    };
    exports2.PermissionsService = PermissionsService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/ProgramsService.js
var require_ProgramsService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/ProgramsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProgramsService = void 0;
    var ProgramsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Returns SE Creator programs information.
       * @returns SECreatorProgramResponse
       * @throws ApiError
       */
      getSePrograms() {
        return this.httpRequest.request({
          method: "GET",
          url: "/programs/"
        });
      }
      /**
       * Create SE program.
       * @param requestBody
       * @returns SuccessIdResponse
       * @throws ApiError
       */
      createSeProgram(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/programs/",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Returns SE Creator programs information.
       * @param id
       * @returns SECreatorProgramResponse
       * @throws ApiError
       */
      getSeProgram(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/programs/id/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Paginate list of programs info
       * @param page
       * @param count
       * @returns ListSEProgramsRes
       * @throws ApiError
       */
      listSePrograms(page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/programs/list",
          query: {
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Paginate list of creator info by program id
       * @param id program uuid
       * @param page
       * @param count
       * @returns ListProgramCreatorsResponse
       * @throws ApiError
       */
      listCreatorsOfProgram(id, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/programs/{id}",
          path: {
            "id": id
          },
          query: {
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Updates SE program information by id.
       * @param id se program uuid
       * @param requestBody
       * @returns SuccessIdResponse
       * @throws ApiError
       */
      updateSeProgram(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/programs/{id}",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Delete SE program by id.
       * @param id se program uuid
       * @returns SuccessIdResponse
       * @throws ApiError
       */
      deleteSeProgram(id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/programs/{id}",
          path: {
            "id": id
          }
        });
      }
    };
    exports2.ProgramsService = ProgramsService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/PublicCreatorContactService.js
var require_PublicCreatorContactService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/PublicCreatorContactService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PublicCreatorContactService = void 0;
    var PublicCreatorContactService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Upsert creator email
       * @param requestBody
       * @returns UpdateResponse
       * @throws ApiError
       */
      upsertEmail(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/public/creators/contact/email",
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.PublicCreatorContactService = PublicCreatorContactService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/PublicCreatorDetailsService.js
var require_PublicCreatorDetailsService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/PublicCreatorDetailsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PublicCreatorDetailsService = void 0;
    var PublicCreatorDetailsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Verify creator email callback
       * @param requestBody
       * @returns UpdateResponse
       * @throws ApiError
       */
      callbackEmailVerification(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/public/creators/details/verification/callback/email",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Send email verification
       * @param emailToVerify
       * @returns UpdateResponse
       * @throws ApiError
       */
      sendEmailVerification(emailToVerify) {
        return this.httpRequest.request({
          method: "POST",
          url: "/public/creators/details/verification/email/{emailToVerify}",
          path: {
            "emailToVerify": emailToVerify
          }
        });
      }
      /**
       * Verify creator mobile phone callback
       * @param requestBody
       * @returns UpdateResponse
       * @throws ApiError
       */
      callbackMobilePhoneVerification(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/public/creators/details/verification/callback/mobilePhone",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Send mobile phone verification
       * @param mobilePhoneToVerify
       * @returns UpdateResponse
       * @throws ApiError
       */
      sendMobilePhoneVerification(mobilePhoneToVerify) {
        return this.httpRequest.request({
          method: "POST",
          url: "/public/creators/details/verification/mobilePhone/{mobilePhoneToVerify}",
          path: {
            "mobilePhoneToVerify": mobilePhoneToVerify
          }
        });
      }
      /**
       * Check status if creator suggested details needs update
       * @returns CreatorSuggestedDetailsStatusRes
       * @throws ApiError
       */
      getCreatorSuggestedDetailsStatus() {
        return this.httpRequest.request({
          method: "GET",
          url: "/public/creators/details/status"
        });
      }
      /**
       * Get creator suggested details
       * @returns GetCreatorSuggestedDetailsRes
       * @throws ApiError
       */
      getCreatorSuggestedDetails() {
        return this.httpRequest.request({
          method: "GET",
          url: "/public/creators/details/"
        });
      }
      /**
       * Upsert creator suggested details
       * @param requestBody
       * @returns UpsertCreatorSuggestedDetailsRes
       * @throws ApiError
       */
      upsertCreatorSuggestedDetails(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/public/creators/details/",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Update creator country
       * @param requestBody
       * @returns UpdateResponse
       * @throws ApiError
       */
      updateCountry(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/public/creators/details/country",
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.PublicCreatorDetailsService = PublicCreatorDetailsService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/PublicCreatorOutreachService.js
var require_PublicCreatorOutreachService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/PublicCreatorOutreachService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PublicCreatorOutreachService = void 0;
    var PublicCreatorOutreachService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Unblock advertiser from sp offers
       * @param requestBody
       * @returns UpdateResponse
       * @throws ApiError
       */
      unblockAdvertiser(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/public/creators/outreach/advertisers/unblock",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Block advertiser from sp offers
       * @param requestBody
       * @returns UpdateResponse
       * @throws ApiError
       */
      blockAdvertiser(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/public/creators/outreach/advertisers/block",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Upsert creator email subscription config
       * @param requestBody
       * @returns UpdateResponse
       * @throws ApiError
       */
      upsertEmailSubscriptionConfig(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/public/creators/outreach/email/subscriptions",
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.PublicCreatorOutreachService = PublicCreatorOutreachService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/PublicCreatorsService.js
var require_PublicCreatorsService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/PublicCreatorsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PublicCreatorsService = void 0;
    var PublicCreatorsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Apply to creator program by id
       * @param programId
       * @returns WhoAmIResponse
       * @throws ApiError
       */
      applyToProgram(programId) {
        return this.httpRequest.request({
          method: "POST",
          url: "/public/creators/programs/{programId}/apply",
          path: {
            "programId": programId
          }
        });
      }
      /**
       * Returns my information.
       * @returns WhoAmIResponse
       * @throws ApiError
       */
      whoami() {
        return this.httpRequest.request({
          method: "GET",
          url: "/public/creators/me"
        });
      }
    };
    exports2.PublicCreatorsService = PublicCreatorsService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/SavedViewsService.js
var require_SavedViewsService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/SavedViewsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SavedViewsService = void 0;
    var SavedViewsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Paginates CRM saved views information
       * @param page
       * @param count
       * @returns ListSavedViewsRes
       * @throws ApiError
       */
      listSavedViews(page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/views/",
          query: {
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Creates a saved view information.
       * @param requestBody
       * @returns SuccessIdResponse
       * @throws ApiError
       */
      createSavedView(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/views/",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Paginates saved views information by type
       * @param viewType saved view type
       * @param page
       * @param count
       * @returns ListSavedViewsRes
       * @throws ApiError
       */
      listSavedViewsByType(viewType, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/views/{viewType}",
          path: {
            "viewType": viewType
          },
          query: {
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Updates saved view information by id.
       * @param id saved view uuid
       * @param requestBody
       * @returns UpdateResponse
       * @throws ApiError
       */
      updateSavedView(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/views/{id}",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Deletes a saved view information.
       * @param id saved view uuid
       * @returns DeleteResponse
       * @throws ApiError
       */
      deleteSavedView(id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/views/{id}",
          path: {
            "id": id
          }
        });
      }
    };
    exports2.SavedViewsService = SavedViewsService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/services/SearchCreatorService.js
var require_SearchCreatorService = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/services/SearchCreatorService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SearchCreatorService = void 0;
    var SearchCreatorService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Get creators search status.
       * @returns SearchCreatorsStatusResponse
       * @throws ApiError
       */
      creatorsSearchStatus() {
        return this.httpRequest.request({
          method: "GET",
          url: "/search/creators/status"
        });
      }
      /**
       * Search for creators information.
       * @param requestBody
       * @returns SearchCreatorsReaponse
       * @throws ApiError
       */
      searchCreators(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/search/creators/",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Search for creators and their nested channels, inner hits
       * @param requestBody
       * @returns SearchCreatorsReaponse
       * @throws ApiError
       */
      searchCreatorsChannels(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/search/creators/channels",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Count creators by query
       * @param requestBody
       * @returns CountCreatorsReaponse
       * @throws ApiError
       */
      countCreators(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/search/creators/count",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Returns available search creator fields information
       * @returns SearchField
       * @throws ApiError
       */
      getSearchCreatorFields() {
        return this.httpRequest.request({
          method: "GET",
          url: "/search/creators/fields"
        });
      }
      /**
       * Returns value suggestions for provided input
       * @param field
       * @param term
       * @returns GetCreatorFieldTermsResponse
       * @throws ApiError
       */
      getSearchCreatorFieldTerms(field, term) {
        return this.httpRequest.request({
          method: "GET",
          url: "/search/creators/fields/{field}",
          path: {
            "field": field
          },
          query: {
            "term": term
          }
        });
      }
      /**
       * Opens creator search point in time
       * @param keepAlive
       * @returns SuccessIdResponse
       * @throws ApiError
       */
      openCreatorsSearchPit(keepAlive) {
        return this.httpRequest.request({
          method: "POST",
          url: "/search/creators/pit/open",
          query: {
            "keepAlive": keepAlive
          }
        });
      }
      /**
       * Closes creator search point in time
       * @param id
       * @returns UpdateResponse
       * @throws ApiError
       */
      closeCreatorsSearchPit(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/search/creators/pit/close/{id}",
          path: {
            "id": id
          }
        });
      }
    };
    exports2.SearchCreatorService = SearchCreatorService;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/CRM.js
var require_CRM = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/CRM.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CRM = void 0;
    var AxiosHttpRequest_1 = require_AxiosHttpRequest();
    var AgenciesService_1 = require_AgenciesService();
    var AgenciesMutationService_1 = require_AgenciesMutationService();
    var AgencySocialsService_1 = require_AgencySocialsService();
    var AgentsService_1 = require_AgentsService();
    var AgentSocialsService_1 = require_AgentSocialsService();
    var AudienceJourneyService_1 = require_AudienceJourneyService();
    var AuditLogsService_1 = require_AuditLogsService();
    var BlocklistService_1 = require_BlocklistService();
    var ChannelsService_1 = require_ChannelsService();
    var CreatorAgenciesService_1 = require_CreatorAgenciesService();
    var CreatorMergeService_1 = require_CreatorMergeService();
    var CreatorProgramsService_1 = require_CreatorProgramsService();
    var CreatorsService_1 = require_CreatorsService();
    var CreatorSeRelationshipService_1 = require_CreatorSeRelationshipService();
    var CreatorsImportService_1 = require_CreatorsImportService();
    var CreatorsInternalService_1 = require_CreatorsInternalService();
    var CreatorSocialsService_1 = require_CreatorSocialsService();
    var CreatorSuggestedDetailsService_1 = require_CreatorSuggestedDetailsService();
    var HealthService_1 = require_HealthService();
    var JobsService_1 = require_JobsService();
    var ManagersService_1 = require_ManagersService();
    var ManagerSocialsService_1 = require_ManagerSocialsService();
    var ManagersTeamsService_1 = require_ManagersTeamsService();
    var NotesService_1 = require_NotesService();
    var NotesCommentsService_1 = require_NotesCommentsService();
    var NotificationsService_1 = require_NotificationsService();
    var PaymentsService_1 = require_PaymentsService();
    var PermissionsService_1 = require_PermissionsService();
    var ProgramsService_1 = require_ProgramsService();
    var PublicCreatorContactService_1 = require_PublicCreatorContactService();
    var PublicCreatorDetailsService_1 = require_PublicCreatorDetailsService();
    var PublicCreatorOutreachService_1 = require_PublicCreatorOutreachService();
    var PublicCreatorsService_1 = require_PublicCreatorsService();
    var SavedViewsService_1 = require_SavedViewsService();
    var SearchCreatorService_1 = require_SearchCreatorService();
    var CRM2 = class {
      constructor(config, HttpRequest = AxiosHttpRequest_1.AxiosHttpRequest) {
        this.request = new HttpRequest({
          BASE: config?.BASE ?? "",
          VERSION: config?.VERSION ?? "1.0.0",
          WITH_CREDENTIALS: config?.WITH_CREDENTIALS ?? false,
          CREDENTIALS: config?.CREDENTIALS ?? "include",
          TOKEN: config?.TOKEN,
          USERNAME: config?.USERNAME,
          PASSWORD: config?.PASSWORD,
          HEADERS: config?.HEADERS,
          ENCODE_PATH: config?.ENCODE_PATH
        });
        this.agencies = new AgenciesService_1.AgenciesService(this.request);
        this.agenciesMutation = new AgenciesMutationService_1.AgenciesMutationService(this.request);
        this.agencySocials = new AgencySocialsService_1.AgencySocialsService(this.request);
        this.agents = new AgentsService_1.AgentsService(this.request);
        this.agentSocials = new AgentSocialsService_1.AgentSocialsService(this.request);
        this.audienceJourney = new AudienceJourneyService_1.AudienceJourneyService(this.request);
        this.auditLogs = new AuditLogsService_1.AuditLogsService(this.request);
        this.blocklist = new BlocklistService_1.BlocklistService(this.request);
        this.channels = new ChannelsService_1.ChannelsService(this.request);
        this.creatorAgencies = new CreatorAgenciesService_1.CreatorAgenciesService(this.request);
        this.creatorMerge = new CreatorMergeService_1.CreatorMergeService(this.request);
        this.creatorPrograms = new CreatorProgramsService_1.CreatorProgramsService(this.request);
        this.creators = new CreatorsService_1.CreatorsService(this.request);
        this.creatorSeRelationship = new CreatorSeRelationshipService_1.CreatorSeRelationshipService(this.request);
        this.creatorsImport = new CreatorsImportService_1.CreatorsImportService(this.request);
        this.creatorsInternal = new CreatorsInternalService_1.CreatorsInternalService(this.request);
        this.creatorSocials = new CreatorSocialsService_1.CreatorSocialsService(this.request);
        this.creatorSuggestedDetails = new CreatorSuggestedDetailsService_1.CreatorSuggestedDetailsService(this.request);
        this.health = new HealthService_1.HealthService(this.request);
        this.jobs = new JobsService_1.JobsService(this.request);
        this.managers = new ManagersService_1.ManagersService(this.request);
        this.managerSocials = new ManagerSocialsService_1.ManagerSocialsService(this.request);
        this.managersTeams = new ManagersTeamsService_1.ManagersTeamsService(this.request);
        this.notes = new NotesService_1.NotesService(this.request);
        this.notesComments = new NotesCommentsService_1.NotesCommentsService(this.request);
        this.notifications = new NotificationsService_1.NotificationsService(this.request);
        this.payments = new PaymentsService_1.PaymentsService(this.request);
        this.permissions = new PermissionsService_1.PermissionsService(this.request);
        this.programs = new ProgramsService_1.ProgramsService(this.request);
        this.publicCreatorContact = new PublicCreatorContactService_1.PublicCreatorContactService(this.request);
        this.publicCreatorDetails = new PublicCreatorDetailsService_1.PublicCreatorDetailsService(this.request);
        this.publicCreatorOutreach = new PublicCreatorOutreachService_1.PublicCreatorOutreachService(this.request);
        this.publicCreators = new PublicCreatorsService_1.PublicCreatorsService(this.request);
        this.savedViews = new SavedViewsService_1.SavedViewsService(this.request);
        this.searchCreator = new SearchCreatorService_1.SearchCreatorService(this.request);
      }
    };
    exports2.CRM = CRM2;
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/core/OpenAPI.js
var require_OpenAPI = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/core/OpenAPI.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.OpenAPI = void 0;
    exports2.OpenAPI = {
      BASE: "",
      VERSION: "1.0.0",
      WITH_CREDENTIALS: false,
      CREDENTIALS: "include",
      TOKEN: void 0,
      USERNAME: void 0,
      PASSWORD: void 0,
      HEADERS: void 0,
      ENCODE_PATH: void 0
    };
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/AddCreatorSocialRequest.js
var require_AddCreatorSocialRequest = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/AddCreatorSocialRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AddCreatorSocialRequest = void 0;
    var AddCreatorSocialRequest;
    (function(AddCreatorSocialRequest2) {
      let type;
      (function(type2) {
        type2["FACEBOOK"] = "facebook";
        type2["INSTAGRAM"] = "instagram";
        type2["TWITTER"] = "twitter";
        type2["DISCORD"] = "discord";
        type2["TIKTOK"] = "tiktok";
        type2["YOUTUBE"] = "youtube";
        type2["SNAPCHAT"] = "snapchat";
        type2["KICK"] = "kick";
        type2["STEAM"] = "steam";
        type2["TWITCH"] = "twitch";
        type2["UNKNOWN"] = "unknown";
      })(type = AddCreatorSocialRequest2.type || (AddCreatorSocialRequest2.type = {}));
    })(AddCreatorSocialRequest = exports2.AddCreatorSocialRequest || (exports2.AddCreatorSocialRequest = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/AgenciesSEInformation.js
var require_AgenciesSEInformation = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/AgenciesSEInformation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AgenciesSEInformation = void 0;
    var AgenciesSEInformation;
    (function(AgenciesSEInformation2) {
      let contactMethod;
      (function(contactMethod2) {
        contactMethod2["EMAIL"] = "email";
        contactMethod2["PHONE"] = "phone";
      })(contactMethod = AgenciesSEInformation2.contactMethod || (AgenciesSEInformation2.contactMethod = {}));
      let digestFrequency;
      (function(digestFrequency2) {
        digestFrequency2["DAILY"] = "daily";
        digestFrequency2["WEEKLY"] = "weekly";
      })(digestFrequency = AgenciesSEInformation2.digestFrequency || (AgenciesSEInformation2.digestFrequency = {}));
    })(AgenciesSEInformation = exports2.AgenciesSEInformation || (exports2.AgenciesSEInformation = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/AgencyCreatorChannel.js
var require_AgencyCreatorChannel = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/AgencyCreatorChannel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AgencyCreatorChannel = void 0;
    var AgencyCreatorChannel;
    (function(AgencyCreatorChannel2) {
      let spStanding;
      (function(spStanding2) {
        spStanding2["GOOD"] = "good";
        spStanding2["UNKNOWN"] = "unknown";
        spStanding2["SUSPECTED"] = "suspected";
        spStanding2["BANNED"] = "banned";
      })(spStanding = AgencyCreatorChannel2.spStanding || (AgencyCreatorChannel2.spStanding = {}));
    })(AgencyCreatorChannel = exports2.AgencyCreatorChannel || (exports2.AgencyCreatorChannel = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/AgencySocialMedia.js
var require_AgencySocialMedia = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/AgencySocialMedia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AgencySocialMedia = void 0;
    var AgencySocialMedia;
    (function(AgencySocialMedia2) {
      let socialPlatform;
      (function(socialPlatform2) {
        socialPlatform2["FACEBOOK"] = "facebook";
        socialPlatform2["INSTAGRAM"] = "instagram";
        socialPlatform2["TWITTER"] = "twitter";
        socialPlatform2["DISCORD"] = "discord";
        socialPlatform2["TIKTOK"] = "tiktok";
        socialPlatform2["YOUTUBE"] = "youtube";
        socialPlatform2["SNAPCHAT"] = "snapchat";
        socialPlatform2["KICK"] = "kick";
        socialPlatform2["STEAM"] = "steam";
        socialPlatform2["TWITCH"] = "twitch";
        socialPlatform2["UNKNOWN"] = "unknown";
      })(socialPlatform = AgencySocialMedia2.socialPlatform || (AgencySocialMedia2.socialPlatform = {}));
    })(AgencySocialMedia = exports2.AgencySocialMedia || (exports2.AgencySocialMedia = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/AgentSEInformationResponse.js
var require_AgentSEInformationResponse = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/AgentSEInformationResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AgentSEInformationResponse = void 0;
    var AgentSEInformationResponse;
    (function(AgentSEInformationResponse2) {
      let contactMethod;
      (function(contactMethod2) {
        contactMethod2["EMAIL"] = "email";
        contactMethod2["PHONE"] = "phone";
      })(contactMethod = AgentSEInformationResponse2.contactMethod || (AgentSEInformationResponse2.contactMethod = {}));
    })(AgentSEInformationResponse = exports2.AgentSEInformationResponse || (exports2.AgentSEInformationResponse = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/AgentSocialMedia.js
var require_AgentSocialMedia = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/AgentSocialMedia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AgentSocialMedia = void 0;
    var AgentSocialMedia;
    (function(AgentSocialMedia2) {
      let socialPlatform;
      (function(socialPlatform2) {
        socialPlatform2["FACEBOOK"] = "facebook";
        socialPlatform2["INSTAGRAM"] = "instagram";
        socialPlatform2["TWITTER"] = "twitter";
        socialPlatform2["DISCORD"] = "discord";
        socialPlatform2["TIKTOK"] = "tiktok";
        socialPlatform2["YOUTUBE"] = "youtube";
        socialPlatform2["SNAPCHAT"] = "snapchat";
        socialPlatform2["KICK"] = "kick";
        socialPlatform2["STEAM"] = "steam";
        socialPlatform2["TWITCH"] = "twitch";
        socialPlatform2["UNKNOWN"] = "unknown";
      })(socialPlatform = AgentSocialMedia2.socialPlatform || (AgentSocialMedia2.socialPlatform = {}));
    })(AgentSocialMedia = exports2.AgentSocialMedia || (exports2.AgentSocialMedia = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/AuditLogResponse.js
var require_AuditLogResponse = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/AuditLogResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AuditLogResponse = void 0;
    var AuditLogResponse;
    (function(AuditLogResponse2) {
      let type;
      (function(type2) {
        type2["AUTO"] = "Auto";
        type2["MANUAL"] = "Manual";
        type2["CUSTOM"] = "Custom";
        type2["COMMENT"] = "Comment";
      })(type = AuditLogResponse2.type || (AuditLogResponse2.type = {}));
    })(AuditLogResponse = exports2.AuditLogResponse || (exports2.AuditLogResponse = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/BulkUpdateCreatorRequest.js
var require_BulkUpdateCreatorRequest = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/BulkUpdateCreatorRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BulkUpdateCreatorRequest = void 0;
    var BulkUpdateCreatorRequest;
    (function(BulkUpdateCreatorRequest2) {
      let operation;
      (function(operation2) {
        operation2["ADD_LANGUAGES"] = "addLanguages";
        operation2["REMOVE_LANGUAGES"] = "removeLanguages";
        operation2["REPLACE_COUNTRY"] = "replaceCountry";
        operation2["ADD_PRIMARY_MANAGER"] = "addPrimaryManager";
        operation2["REMOVE_PRIMARY_MANAGER"] = "removePrimaryManager";
      })(operation = BulkUpdateCreatorRequest2.operation || (BulkUpdateCreatorRequest2.operation = {}));
    })(BulkUpdateCreatorRequest = exports2.BulkUpdateCreatorRequest || (exports2.BulkUpdateCreatorRequest = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/ChannelAdvertiserStatsResponse.js
var require_ChannelAdvertiserStatsResponse = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/ChannelAdvertiserStatsResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChannelAdvertiserStatsResponse = void 0;
    var ChannelAdvertiserStatsResponse;
    (function(ChannelAdvertiserStatsResponse2) {
      let type;
      (function(type2) {
        type2["HELLOFRESH"] = "hellofresh";
      })(type = ChannelAdvertiserStatsResponse2.type || (ChannelAdvertiserStatsResponse2.type = {}));
      let grade;
      (function(grade2) {
        grade2["GOOD"] = "good";
        grade2["VERY_GOOD"] = "veryGood";
        grade2["NEUTRAL"] = "neutral";
        grade2["BAD"] = "bad";
        grade2["VERY_BAD"] = "veryBad";
      })(grade = ChannelAdvertiserStatsResponse2.grade || (ChannelAdvertiserStatsResponse2.grade = {}));
    })(ChannelAdvertiserStatsResponse = exports2.ChannelAdvertiserStatsResponse || (exports2.ChannelAdvertiserStatsResponse = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/ChannelResponse.js
var require_ChannelResponse = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/ChannelResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChannelResponse = void 0;
    var ChannelResponse;
    (function(ChannelResponse2) {
      let platform;
      (function(platform2) {
        platform2["TWITCH"] = "twitch";
        platform2["YOUTUBE"] = "youtube";
        platform2["FACEBOOK"] = "facebook";
        platform2["TROVO"] = "trovo";
        platform2["TIKTOK"] = "tiktok";
        platform2["KICK"] = "kick";
        platform2["X"] = "x";
      })(platform = ChannelResponse2.platform || (ChannelResponse2.platform = {}));
    })(ChannelResponse = exports2.ChannelResponse || (exports2.ChannelResponse = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/ChannelRevenueFeatureStatsResponse.js
var require_ChannelRevenueFeatureStatsResponse = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/ChannelRevenueFeatureStatsResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChannelRevenueFeatureStatsResponse = void 0;
    var ChannelRevenueFeatureStatsResponse;
    (function(ChannelRevenueFeatureStatsResponse2) {
      let type;
      (function(type2) {
        type2["TIPS"] = "tips";
        type2["MERCH"] = "merch";
        type2["SPONS"] = "spons";
        type2["PAID_SUBS"] = "paidSubs";
        type2["BITS"] = "bits";
        type2["SUPERCHAT"] = "superchat";
      })(type = ChannelRevenueFeatureStatsResponse2.type || (ChannelRevenueFeatureStatsResponse2.type = {}));
    })(ChannelRevenueFeatureStatsResponse = exports2.ChannelRevenueFeatureStatsResponse || (exports2.ChannelRevenueFeatureStatsResponse = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/ChannelSEFeatureResponse.js
var require_ChannelSEFeatureResponse = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/ChannelSEFeatureResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChannelSEFeatureResponse = void 0;
    var ChannelSEFeatureResponse;
    (function(ChannelSEFeatureResponse2) {
      let type;
      (function(type2) {
        type2["BOT"] = "bot";
        type2["OVERLAY"] = "overlay";
        type2["TIPS"] = "tips";
        type2["MERCH"] = "merch";
        type2["MERCURY"] = "mercury";
        type2["VOD_DYNAMIC_BANNER"] = "vodDynamicBanner";
        type2["VOD_DYAMIC_THUMBNAIL"] = "vodDyamicThumbnail";
        type2["VOD_SOG"] = "vodSOG";
        type2["VOD_DYNAMIC_DESCRIPTION"] = "vodDynamicDescription";
        type2["SE_LIVE"] = "seLive";
        type2["ELEMENTS"] = "elements";
        type2["IS_LIVE"] = "isLive";
        type2["ACTIVITY_FEED"] = "activityFeed";
        type2["ALERTS"] = "alerts";
      })(type = ChannelSEFeatureResponse2.type || (ChannelSEFeatureResponse2.type = {}));
      let state;
      (function(state2) {
        state2["ACTIVE"] = "active";
        state2["DISABLED"] = "disabled";
      })(state = ChannelSEFeatureResponse2.state || (ChannelSEFeatureResponse2.state = {}));
    })(ChannelSEFeatureResponse = exports2.ChannelSEFeatureResponse || (exports2.ChannelSEFeatureResponse = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/ChannelStatsResponse.js
var require_ChannelStatsResponse = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/ChannelStatsResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChannelStatsResponse = void 0;
    var ChannelStatsResponse;
    (function(ChannelStatsResponse2) {
      let predictionTier;
      (function(predictionTier2) {
        predictionTier2["TIER_1"] = "tier_1";
        predictionTier2["TIER_2"] = "tier_2";
        predictionTier2["TIER_3"] = "tier_3";
        predictionTier2["TIER_4"] = "tier_4";
      })(predictionTier = ChannelStatsResponse2.predictionTier || (ChannelStatsResponse2.predictionTier = {}));
    })(ChannelStatsResponse = exports2.ChannelStatsResponse || (exports2.ChannelStatsResponse = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/CreateAgenciesSEInformation.js
var require_CreateAgenciesSEInformation = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/CreateAgenciesSEInformation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateAgenciesSEInformation = void 0;
    var CreateAgenciesSEInformation;
    (function(CreateAgenciesSEInformation2) {
      let contactMethod;
      (function(contactMethod2) {
        contactMethod2["EMAIL"] = "email";
        contactMethod2["PHONE"] = "phone";
      })(contactMethod = CreateAgenciesSEInformation2.contactMethod || (CreateAgenciesSEInformation2.contactMethod = {}));
      let digestFrequency;
      (function(digestFrequency2) {
        digestFrequency2["DAILY"] = "daily";
        digestFrequency2["WEEKLY"] = "weekly";
      })(digestFrequency = CreateAgenciesSEInformation2.digestFrequency || (CreateAgenciesSEInformation2.digestFrequency = {}));
    })(CreateAgenciesSEInformation = exports2.CreateAgenciesSEInformation || (exports2.CreateAgenciesSEInformation = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/CreateAgencySocialMedia.js
var require_CreateAgencySocialMedia = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/CreateAgencySocialMedia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateAgencySocialMedia = void 0;
    var CreateAgencySocialMedia;
    (function(CreateAgencySocialMedia2) {
      let socialPlatform;
      (function(socialPlatform2) {
        socialPlatform2["FACEBOOK"] = "facebook";
        socialPlatform2["INSTAGRAM"] = "instagram";
        socialPlatform2["TWITTER"] = "twitter";
        socialPlatform2["DISCORD"] = "discord";
        socialPlatform2["TIKTOK"] = "tiktok";
        socialPlatform2["YOUTUBE"] = "youtube";
        socialPlatform2["SNAPCHAT"] = "snapchat";
        socialPlatform2["KICK"] = "kick";
        socialPlatform2["STEAM"] = "steam";
        socialPlatform2["TWITCH"] = "twitch";
        socialPlatform2["UNKNOWN"] = "unknown";
      })(socialPlatform = CreateAgencySocialMedia2.socialPlatform || (CreateAgencySocialMedia2.socialPlatform = {}));
    })(CreateAgencySocialMedia = exports2.CreateAgencySocialMedia || (exports2.CreateAgencySocialMedia = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/CreateAgencySocialRequest.js
var require_CreateAgencySocialRequest = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/CreateAgencySocialRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateAgencySocialRequest = void 0;
    var CreateAgencySocialRequest;
    (function(CreateAgencySocialRequest2) {
      let socialPlatform;
      (function(socialPlatform2) {
        socialPlatform2["FACEBOOK"] = "facebook";
        socialPlatform2["INSTAGRAM"] = "instagram";
        socialPlatform2["TWITTER"] = "twitter";
        socialPlatform2["DISCORD"] = "discord";
        socialPlatform2["TIKTOK"] = "tiktok";
        socialPlatform2["YOUTUBE"] = "youtube";
        socialPlatform2["SNAPCHAT"] = "snapchat";
        socialPlatform2["KICK"] = "kick";
        socialPlatform2["STEAM"] = "steam";
        socialPlatform2["TWITCH"] = "twitch";
        socialPlatform2["UNKNOWN"] = "unknown";
      })(socialPlatform = CreateAgencySocialRequest2.socialPlatform || (CreateAgencySocialRequest2.socialPlatform = {}));
    })(CreateAgencySocialRequest = exports2.CreateAgencySocialRequest || (exports2.CreateAgencySocialRequest = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/CreateAgentSEInformation.js
var require_CreateAgentSEInformation = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/CreateAgentSEInformation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateAgentSEInformation = void 0;
    var CreateAgentSEInformation;
    (function(CreateAgentSEInformation2) {
      let contactMethod;
      (function(contactMethod2) {
        contactMethod2["EMAIL"] = "email";
        contactMethod2["PHONE"] = "phone";
      })(contactMethod = CreateAgentSEInformation2.contactMethod || (CreateAgentSEInformation2.contactMethod = {}));
    })(CreateAgentSEInformation = exports2.CreateAgentSEInformation || (exports2.CreateAgentSEInformation = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/CreateAgentSocialMedia.js
var require_CreateAgentSocialMedia = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/CreateAgentSocialMedia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateAgentSocialMedia = void 0;
    var CreateAgentSocialMedia;
    (function(CreateAgentSocialMedia2) {
      let socialPlatform;
      (function(socialPlatform2) {
        socialPlatform2["FACEBOOK"] = "facebook";
        socialPlatform2["INSTAGRAM"] = "instagram";
        socialPlatform2["TWITTER"] = "twitter";
        socialPlatform2["DISCORD"] = "discord";
        socialPlatform2["TIKTOK"] = "tiktok";
        socialPlatform2["YOUTUBE"] = "youtube";
        socialPlatform2["SNAPCHAT"] = "snapchat";
        socialPlatform2["KICK"] = "kick";
        socialPlatform2["STEAM"] = "steam";
        socialPlatform2["TWITCH"] = "twitch";
        socialPlatform2["UNKNOWN"] = "unknown";
      })(socialPlatform = CreateAgentSocialMedia2.socialPlatform || (CreateAgentSocialMedia2.socialPlatform = {}));
    })(CreateAgentSocialMedia = exports2.CreateAgentSocialMedia || (exports2.CreateAgentSocialMedia = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/CreateAgentSocialRequest.js
var require_CreateAgentSocialRequest = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/CreateAgentSocialRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateAgentSocialRequest = void 0;
    var CreateAgentSocialRequest;
    (function(CreateAgentSocialRequest2) {
      let socialPlatform;
      (function(socialPlatform2) {
        socialPlatform2["FACEBOOK"] = "facebook";
        socialPlatform2["INSTAGRAM"] = "instagram";
        socialPlatform2["TWITTER"] = "twitter";
        socialPlatform2["DISCORD"] = "discord";
        socialPlatform2["TIKTOK"] = "tiktok";
        socialPlatform2["YOUTUBE"] = "youtube";
        socialPlatform2["SNAPCHAT"] = "snapchat";
        socialPlatform2["KICK"] = "kick";
        socialPlatform2["STEAM"] = "steam";
        socialPlatform2["TWITCH"] = "twitch";
        socialPlatform2["UNKNOWN"] = "unknown";
      })(socialPlatform = CreateAgentSocialRequest2.socialPlatform || (CreateAgentSocialRequest2.socialPlatform = {}));
    })(CreateAgentSocialRequest = exports2.CreateAgentSocialRequest || (exports2.CreateAgentSocialRequest = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/CreateCreatorBlocklistRequest.js
var require_CreateCreatorBlocklistRequest = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/CreateCreatorBlocklistRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateCreatorBlocklistRequest = void 0;
    var CreateCreatorBlocklistRequest;
    (function(CreateCreatorBlocklistRequest2) {
      let spStanding;
      (function(spStanding2) {
        spStanding2["GOOD"] = "good";
        spStanding2["UNKNOWN"] = "unknown";
        spStanding2["SUSPECTED"] = "suspected";
        spStanding2["BANNED"] = "banned";
      })(spStanding = CreateCreatorBlocklistRequest2.spStanding || (CreateCreatorBlocklistRequest2.spStanding = {}));
    })(CreateCreatorBlocklistRequest = exports2.CreateCreatorBlocklistRequest || (exports2.CreateCreatorBlocklistRequest = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/CreateManagerSocialRequest.js
var require_CreateManagerSocialRequest = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/CreateManagerSocialRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateManagerSocialRequest = void 0;
    var CreateManagerSocialRequest;
    (function(CreateManagerSocialRequest2) {
      let socialPlatform;
      (function(socialPlatform2) {
        socialPlatform2["FACEBOOK"] = "facebook";
        socialPlatform2["INSTAGRAM"] = "instagram";
        socialPlatform2["TWITTER"] = "twitter";
        socialPlatform2["DISCORD"] = "discord";
        socialPlatform2["TIKTOK"] = "tiktok";
        socialPlatform2["YOUTUBE"] = "youtube";
        socialPlatform2["SNAPCHAT"] = "snapchat";
        socialPlatform2["KICK"] = "kick";
        socialPlatform2["STEAM"] = "steam";
        socialPlatform2["TWITCH"] = "twitch";
        socialPlatform2["UNKNOWN"] = "unknown";
      })(socialPlatform = CreateManagerSocialRequest2.socialPlatform || (CreateManagerSocialRequest2.socialPlatform = {}));
    })(CreateManagerSocialRequest = exports2.CreateManagerSocialRequest || (exports2.CreateManagerSocialRequest = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/CreateManagerTeamRelationshipRequest.js
var require_CreateManagerTeamRelationshipRequest = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/CreateManagerTeamRelationshipRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateManagerTeamRelationshipRequest = void 0;
    var CreateManagerTeamRelationshipRequest;
    (function(CreateManagerTeamRelationshipRequest2) {
      let role;
      (function(role2) {
        role2["GROWTH"] = "growth";
        role2["TEAM_LEADER"] = "teamLeader";
        role2["RELATIONSHIPS"] = "relationships";
        role2["DEPLOYMENTS"] = "deployments";
        role2["MERCH"] = "merch";
        role2["TRAINING"] = "training";
      })(role = CreateManagerTeamRelationshipRequest2.role || (CreateManagerTeamRelationshipRequest2.role = {}));
    })(CreateManagerTeamRelationshipRequest = exports2.CreateManagerTeamRelationshipRequest || (exports2.CreateManagerTeamRelationshipRequest = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/CreatorChannelResponse.js
var require_CreatorChannelResponse = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/CreatorChannelResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreatorChannelResponse = void 0;
    var CreatorChannelResponse;
    (function(CreatorChannelResponse2) {
      let platform;
      (function(platform2) {
        platform2["TWITCH"] = "twitch";
        platform2["YOUTUBE"] = "youtube";
        platform2["FACEBOOK"] = "facebook";
        platform2["TROVO"] = "trovo";
        platform2["TIKTOK"] = "tiktok";
        platform2["KICK"] = "kick";
        platform2["X"] = "x";
      })(platform = CreatorChannelResponse2.platform || (CreatorChannelResponse2.platform = {}));
    })(CreatorChannelResponse = exports2.CreatorChannelResponse || (exports2.CreatorChannelResponse = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/CreatorContactResponse.js
var require_CreatorContactResponse = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/CreatorContactResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreatorContactResponse = void 0;
    var CreatorContactResponse;
    (function(CreatorContactResponse2) {
      let emailSource;
      (function(emailSource2) {
        emailSource2["MANUAL_MIGRATION"] = "manualMigration";
        emailSource2["CHANNEL_TIKTOK"] = "channel:tiktok";
        emailSource2["CHANNEL_YOUTUBE"] = "channel:youtube";
        emailSource2["CHANNEL_TWITCH"] = "channel:twitch";
        emailSource2["CHANNEL_KICK"] = "channel:kick";
        emailSource2["CHANNEL_X"] = "channel:x";
        emailSource2["CREATOR"] = "creator";
        emailSource2["STAFF"] = "staff";
        emailSource2["SERVICE"] = "service";
        emailSource2["CITADEL"] = "citadel";
        emailSource2["CRM"] = "crm";
        emailSource2["MADMEN"] = "madmen";
        emailSource2["CAIP"] = "caip";
        emailSource2["ROORA"] = "roora";
        emailSource2["CHANNELCRAWLER"] = "channelcrawler";
        emailSource2["CIQ"] = "ciq";
        emailSource2["LINKTREE"] = "linktree";
        emailSource2["MODASH"] = "modash";
        emailSource2["EVENTSMADMEN"] = "eventsmadmen";
        emailSource2["EVENTSLT"] = "eventslt";
        emailSource2["UNKNOWN"] = "unknown";
      })(emailSource = CreatorContactResponse2.emailSource || (CreatorContactResponse2.emailSource = {}));
    })(CreatorContactResponse = exports2.CreatorContactResponse || (exports2.CreatorContactResponse = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/CreatorDetailsResponse.js
var require_CreatorDetailsResponse = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/CreatorDetailsResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreatorDetailsResponse = void 0;
    var CreatorDetailsResponse;
    (function(CreatorDetailsResponse2) {
      let timeZoneSource;
      (function(timeZoneSource2) {
        timeZoneSource2["MANUAL_MIGRATION"] = "manualMigration";
        timeZoneSource2["CHANNEL_TIKTOK"] = "channel:tiktok";
        timeZoneSource2["CHANNEL_YOUTUBE"] = "channel:youtube";
        timeZoneSource2["CHANNEL_TWITCH"] = "channel:twitch";
        timeZoneSource2["CHANNEL_KICK"] = "channel:kick";
        timeZoneSource2["CHANNEL_X"] = "channel:x";
        timeZoneSource2["CREATOR"] = "creator";
        timeZoneSource2["STAFF"] = "staff";
        timeZoneSource2["SERVICE"] = "service";
        timeZoneSource2["CITADEL"] = "citadel";
        timeZoneSource2["CRM"] = "crm";
        timeZoneSource2["MADMEN"] = "madmen";
        timeZoneSource2["CAIP"] = "caip";
        timeZoneSource2["ROORA"] = "roora";
        timeZoneSource2["CHANNELCRAWLER"] = "channelcrawler";
        timeZoneSource2["CIQ"] = "ciq";
        timeZoneSource2["LINKTREE"] = "linktree";
        timeZoneSource2["MODASH"] = "modash";
        timeZoneSource2["EVENTSMADMEN"] = "eventsmadmen";
        timeZoneSource2["EVENTSLT"] = "eventslt";
        timeZoneSource2["UNKNOWN"] = "unknown";
      })(timeZoneSource = CreatorDetailsResponse2.timeZoneSource || (CreatorDetailsResponse2.timeZoneSource = {}));
      let languagesSource;
      (function(languagesSource2) {
        languagesSource2["MANUAL_MIGRATION"] = "manualMigration";
        languagesSource2["CHANNEL_TIKTOK"] = "channel:tiktok";
        languagesSource2["CHANNEL_YOUTUBE"] = "channel:youtube";
        languagesSource2["CHANNEL_TWITCH"] = "channel:twitch";
        languagesSource2["CHANNEL_KICK"] = "channel:kick";
        languagesSource2["CHANNEL_X"] = "channel:x";
        languagesSource2["CREATOR"] = "creator";
        languagesSource2["STAFF"] = "staff";
        languagesSource2["SERVICE"] = "service";
        languagesSource2["CITADEL"] = "citadel";
        languagesSource2["CRM"] = "crm";
        languagesSource2["MADMEN"] = "madmen";
        languagesSource2["CAIP"] = "caip";
        languagesSource2["ROORA"] = "roora";
        languagesSource2["CHANNELCRAWLER"] = "channelcrawler";
        languagesSource2["CIQ"] = "ciq";
        languagesSource2["LINKTREE"] = "linktree";
        languagesSource2["MODASH"] = "modash";
        languagesSource2["EVENTSMADMEN"] = "eventsmadmen";
        languagesSource2["EVENTSLT"] = "eventslt";
        languagesSource2["UNKNOWN"] = "unknown";
      })(languagesSource = CreatorDetailsResponse2.languagesSource || (CreatorDetailsResponse2.languagesSource = {}));
      let audienceCountriesSource;
      (function(audienceCountriesSource2) {
        audienceCountriesSource2["MANUAL_MIGRATION"] = "manualMigration";
        audienceCountriesSource2["CHANNEL_TIKTOK"] = "channel:tiktok";
        audienceCountriesSource2["CHANNEL_YOUTUBE"] = "channel:youtube";
        audienceCountriesSource2["CHANNEL_TWITCH"] = "channel:twitch";
        audienceCountriesSource2["CHANNEL_KICK"] = "channel:kick";
        audienceCountriesSource2["CHANNEL_X"] = "channel:x";
        audienceCountriesSource2["CREATOR"] = "creator";
        audienceCountriesSource2["STAFF"] = "staff";
        audienceCountriesSource2["SERVICE"] = "service";
        audienceCountriesSource2["CITADEL"] = "citadel";
        audienceCountriesSource2["CRM"] = "crm";
        audienceCountriesSource2["MADMEN"] = "madmen";
        audienceCountriesSource2["CAIP"] = "caip";
        audienceCountriesSource2["ROORA"] = "roora";
        audienceCountriesSource2["CHANNELCRAWLER"] = "channelcrawler";
        audienceCountriesSource2["CIQ"] = "ciq";
        audienceCountriesSource2["LINKTREE"] = "linktree";
        audienceCountriesSource2["MODASH"] = "modash";
        audienceCountriesSource2["EVENTSMADMEN"] = "eventsmadmen";
        audienceCountriesSource2["EVENTSLT"] = "eventslt";
        audienceCountriesSource2["UNKNOWN"] = "unknown";
      })(audienceCountriesSource = CreatorDetailsResponse2.audienceCountriesSource || (CreatorDetailsResponse2.audienceCountriesSource = {}));
    })(CreatorDetailsResponse = exports2.CreatorDetailsResponse || (exports2.CreatorDetailsResponse = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/CreatorEmailStatsResponse.js
var require_CreatorEmailStatsResponse = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/CreatorEmailStatsResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreatorEmailStatsResponse = void 0;
    var CreatorEmailStatsResponse;
    (function(CreatorEmailStatsResponse2) {
      let emailCategory;
      (function(emailCategory2) {
        emailCategory2["DIGEST"] = "digest";
        emailCategory2["SPECIAL_OFFER"] = "specialOffer";
        emailCategory2["NOTIFY_ME"] = "notifyMe";
        emailCategory2["INITIAL_OUTREACH"] = "initialOutreach";
        emailCategory2["MANUAL_OUTREACH"] = "manualOutreach";
        emailCategory2["REMINDER"] = "reminder";
        emailCategory2["STREAM_REPORT"] = "streamReport";
        emailCategory2["OTHER"] = "other";
      })(emailCategory = CreatorEmailStatsResponse2.emailCategory || (CreatorEmailStatsResponse2.emailCategory = {}));
    })(CreatorEmailStatsResponse = exports2.CreatorEmailStatsResponse || (exports2.CreatorEmailStatsResponse = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/CreatorOutreachResponse.js
var require_CreatorOutreachResponse = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/CreatorOutreachResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreatorOutreachResponse = void 0;
    var CreatorOutreachResponse;
    (function(CreatorOutreachResponse2) {
      let outreachMedium;
      (function(outreachMedium2) {
        outreachMedium2["DISCORD"] = "discord";
        outreachMedium2["EMAIL"] = "email";
      })(outreachMedium = CreatorOutreachResponse2.outreachMedium || (CreatorOutreachResponse2.outreachMedium = {}));
      let outreachMethod;
      (function(outreachMethod2) {
        outreachMethod2["AUTOMATIC"] = "automatic";
        outreachMethod2["MANUAL"] = "manual";
      })(outreachMethod = CreatorOutreachResponse2.outreachMethod || (CreatorOutreachResponse2.outreachMethod = {}));
      let outreachTarget;
      (function(outreachTarget2) {
        outreachTarget2["AGENCY"] = "agency";
        outreachTarget2["DIRECT"] = "direct";
      })(outreachTarget = CreatorOutreachResponse2.outreachTarget || (CreatorOutreachResponse2.outreachTarget = {}));
      let spContractTarget;
      (function(spContractTarget2) {
        spContractTarget2["AGENCY"] = "agency";
        spContractTarget2["DIRECT"] = "direct";
      })(spContractTarget = CreatorOutreachResponse2.spContractTarget || (CreatorOutreachResponse2.spContractTarget = {}));
      let spStanding;
      (function(spStanding2) {
        spStanding2["GOOD"] = "good";
        spStanding2["UNKNOWN"] = "unknown";
        spStanding2["SUSPECTED"] = "suspected";
        spStanding2["BANNED"] = "banned";
      })(spStanding = CreatorOutreachResponse2.spStanding || (CreatorOutreachResponse2.spStanding = {}));
      let paymentTarget;
      (function(paymentTarget2) {
        paymentTarget2["AGENCY"] = "agency";
        paymentTarget2["DIRECT"] = "direct";
      })(paymentTarget = CreatorOutreachResponse2.paymentTarget || (CreatorOutreachResponse2.paymentTarget = {}));
    })(CreatorOutreachResponse = exports2.CreatorOutreachResponse || (exports2.CreatorOutreachResponse = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/CreatorResponse.js
var require_CreatorResponse = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/CreatorResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreatorResponse = void 0;
    var CreatorResponse;
    (function(CreatorResponse2) {
      let countrySource;
      (function(countrySource2) {
        countrySource2["MANUAL_MIGRATION"] = "manualMigration";
        countrySource2["CHANNEL_TIKTOK"] = "channel:tiktok";
        countrySource2["CHANNEL_YOUTUBE"] = "channel:youtube";
        countrySource2["CHANNEL_TWITCH"] = "channel:twitch";
        countrySource2["CHANNEL_KICK"] = "channel:kick";
        countrySource2["CHANNEL_X"] = "channel:x";
        countrySource2["CREATOR"] = "creator";
        countrySource2["STAFF"] = "staff";
        countrySource2["SERVICE"] = "service";
        countrySource2["CITADEL"] = "citadel";
        countrySource2["CRM"] = "crm";
        countrySource2["MADMEN"] = "madmen";
        countrySource2["CAIP"] = "caip";
        countrySource2["ROORA"] = "roora";
        countrySource2["CHANNELCRAWLER"] = "channelcrawler";
        countrySource2["CIQ"] = "ciq";
        countrySource2["LINKTREE"] = "linktree";
        countrySource2["MODASH"] = "modash";
        countrySource2["EVENTSMADMEN"] = "eventsmadmen";
        countrySource2["EVENTSLT"] = "eventslt";
        countrySource2["UNKNOWN"] = "unknown";
      })(countrySource = CreatorResponse2.countrySource || (CreatorResponse2.countrySource = {}));
    })(CreatorResponse = exports2.CreatorResponse || (exports2.CreatorResponse = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/CreatorSocialResponse.js
var require_CreatorSocialResponse = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/CreatorSocialResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreatorSocialResponse = void 0;
    var CreatorSocialResponse;
    (function(CreatorSocialResponse2) {
      let platform;
      (function(platform2) {
        platform2["FACEBOOK"] = "facebook";
        platform2["INSTAGRAM"] = "instagram";
        platform2["TWITTER"] = "twitter";
        platform2["DISCORD"] = "discord";
        platform2["TIKTOK"] = "tiktok";
        platform2["YOUTUBE"] = "youtube";
        platform2["SNAPCHAT"] = "snapchat";
        platform2["KICK"] = "kick";
        platform2["STEAM"] = "steam";
        platform2["TWITCH"] = "twitch";
        platform2["UNKNOWN"] = "unknown";
      })(platform = CreatorSocialResponse2.platform || (CreatorSocialResponse2.platform = {}));
      let source;
      (function(source2) {
        source2["MANUAL_MIGRATION"] = "manualMigration";
        source2["CHANNEL_TIKTOK"] = "channel:tiktok";
        source2["CHANNEL_YOUTUBE"] = "channel:youtube";
        source2["CHANNEL_TWITCH"] = "channel:twitch";
        source2["CHANNEL_KICK"] = "channel:kick";
        source2["CHANNEL_X"] = "channel:x";
        source2["CREATOR"] = "creator";
        source2["STAFF"] = "staff";
        source2["SERVICE"] = "service";
        source2["CITADEL"] = "citadel";
        source2["CRM"] = "crm";
        source2["MADMEN"] = "madmen";
        source2["CAIP"] = "caip";
        source2["ROORA"] = "roora";
        source2["CHANNELCRAWLER"] = "channelcrawler";
        source2["CIQ"] = "ciq";
        source2["LINKTREE"] = "linktree";
        source2["MODASH"] = "modash";
        source2["EVENTSMADMEN"] = "eventsmadmen";
        source2["EVENTSLT"] = "eventslt";
        source2["UNKNOWN"] = "unknown";
      })(source = CreatorSocialResponse2.source || (CreatorSocialResponse2.source = {}));
    })(CreatorSocialResponse = exports2.CreatorSocialResponse || (exports2.CreatorSocialResponse = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/CreatorSpStatsResponse.js
var require_CreatorSpStatsResponse = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/CreatorSpStatsResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreatorSpStatsResponse = void 0;
    var CreatorSpStatsResponse;
    (function(CreatorSpStatsResponse2) {
      let mrpType;
      (function(mrpType2) {
        mrpType2["MRP_LAST30D"] = "mrpLast30d";
        mrpType2["MRP_LAST90D"] = "mrpLast90d";
        mrpType2["INVITED_LAST90D"] = "invitedLast90d";
        mrpType2["NO_INVITES_LAST90D"] = "noInvitesLast90d";
        mrpType2["NEVER_INVITED"] = "neverInvited";
        mrpType2["MRP_EVER"] = "mrpEver";
        mrpType2["STARTED_NEVER_WON"] = "startedNeverWon";
        mrpType2["VIEWED_NEVER_STARTED"] = "viewedNeverStarted";
      })(mrpType = CreatorSpStatsResponse2.mrpType || (CreatorSpStatsResponse2.mrpType = {}));
    })(CreatorSpStatsResponse = exports2.CreatorSpStatsResponse || (exports2.CreatorSpStatsResponse = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/EmailOutreachPreferencesTos.js
var require_EmailOutreachPreferencesTos = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/EmailOutreachPreferencesTos.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EmailOutreachPreferencesTos = void 0;
    var EmailOutreachPreferencesTos;
    (function(EmailOutreachPreferencesTos2) {
      let optType;
      (function(optType2) {
        optType2["IN"] = "in";
        optType2["OUT"] = "out";
        optType2["INVALID"] = "invalid";
      })(optType = EmailOutreachPreferencesTos2.optType || (EmailOutreachPreferencesTos2.optType = {}));
    })(EmailOutreachPreferencesTos = exports2.EmailOutreachPreferencesTos || (exports2.EmailOutreachPreferencesTos = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/Filter.js
var require_Filter = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/Filter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Filter = void 0;
    var Filter;
    (function(Filter2) {
      let operator;
      (function(operator2) {
        operator2["LT"] = "lt";
        operator2["LTE"] = "lte";
        operator2["EQ"] = "eq";
        operator2["NEQ"] = "neq";
        operator2["GT"] = "gt";
        operator2["GTE"] = "gte";
        operator2["IN"] = "in";
        operator2["IS_EMPTY"] = "isEmpty";
        operator2["NOT_IS_EMPTY"] = "notIsEmpty";
        operator2["CONTAINS"] = "contains";
      })(operator = Filter2.operator || (Filter2.operator = {}));
    })(Filter = exports2.Filter || (exports2.Filter = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/GetAgencyAgentsPaymentsQueryParams.js
var require_GetAgencyAgentsPaymentsQueryParams = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/GetAgencyAgentsPaymentsQueryParams.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetAgencyAgentsPaymentsQueryParams = void 0;
    var GetAgencyAgentsPaymentsQueryParams;
    (function(GetAgencyAgentsPaymentsQueryParams2) {
      let sortColumn;
      (function(sortColumn2) {
        sortColumn2["UNKNOWN_COLUMN"] = "UNKNOWN_COLUMN";
        sortColumn2["CREATED_AT"] = "CREATED_AT";
        sortColumn2["UPDATED_AT"] = "UPDATED_AT";
        sortColumn2["STATUS"] = "STATUS";
        sortColumn2["AMOUNT"] = "AMOUNT";
        sortColumn2["TITLE"] = "TITLE";
        sortColumn2["TARGET_DATE"] = "TARGET_DATE";
      })(sortColumn = GetAgencyAgentsPaymentsQueryParams2.sortColumn || (GetAgencyAgentsPaymentsQueryParams2.sortColumn = {}));
      let sortDir;
      (function(sortDir2) {
        sortDir2["UNKNOWN_DIR"] = "UNKNOWN_DIR";
        sortDir2["ASC"] = "ASC";
        sortDir2["DESC"] = "DESC";
      })(sortDir = GetAgencyAgentsPaymentsQueryParams2.sortDir || (GetAgencyAgentsPaymentsQueryParams2.sortDir = {}));
    })(GetAgencyAgentsPaymentsQueryParams = exports2.GetAgencyAgentsPaymentsQueryParams || (exports2.GetAgencyAgentsPaymentsQueryParams = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/GetAgencyCreatorQueryParams.js
var require_GetAgencyCreatorQueryParams = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/GetAgencyCreatorQueryParams.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetAgencyCreatorQueryParams = void 0;
    var GetAgencyCreatorQueryParams;
    (function(GetAgencyCreatorQueryParams2) {
      let status;
      (function(status2) {
        status2["ACTIVE"] = "active";
        status2["DEPARTED"] = "departed";
        status2["ALL"] = "all";
      })(status = GetAgencyCreatorQueryParams2.status || (GetAgencyCreatorQueryParams2.status = {}));
    })(GetAgencyCreatorQueryParams = exports2.GetAgencyCreatorQueryParams || (exports2.GetAgencyCreatorQueryParams = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/GetCreatorsQueryParams.js
var require_GetCreatorsQueryParams = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/GetCreatorsQueryParams.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetCreatorsQueryParams = void 0;
    var GetCreatorsQueryParams;
    (function(GetCreatorsQueryParams2) {
      let parts;
      (function(parts2) {
        parts2["DETAILS"] = "details";
        parts2["CHANNELS"] = "channels";
        parts2["LABELS"] = "labels";
        parts2["SOCIALS"] = "socials";
        parts2["AGENCY"] = "agency";
        parts2["OUTREACH"] = "outreach";
        parts2["SE_FEATURES"] = "seFeatures";
        parts2["CONTACT"] = "contact";
        parts2["SE_RELATIONSHIP"] = "seRelationship";
        parts2["SE_CREATOR_PROGRAMS"] = "seCreatorPrograms";
        parts2["SP_STATS"] = "spStats";
        parts2["EMAIL_STATS"] = "emailStats";
        parts2["AUDIENCE_STATS"] = "audienceStats";
      })(parts = GetCreatorsQueryParams2.parts || (GetCreatorsQueryParams2.parts = {}));
    })(GetCreatorsQueryParams = exports2.GetCreatorsQueryParams || (exports2.GetCreatorsQueryParams = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/GetCreatorSuggestedDetailsWithReviewRes.js
var require_GetCreatorSuggestedDetailsWithReviewRes = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/GetCreatorSuggestedDetailsWithReviewRes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetCreatorSuggestedDetailsWithReviewRes = void 0;
    var GetCreatorSuggestedDetailsWithReviewRes;
    (function(GetCreatorSuggestedDetailsWithReviewRes2) {
      let reviewStatus;
      (function(reviewStatus2) {
        reviewStatus2["ACCEPT"] = "accept";
        reviewStatus2["REJECT"] = "reject";
      })(reviewStatus = GetCreatorSuggestedDetailsWithReviewRes2.reviewStatus || (GetCreatorSuggestedDetailsWithReviewRes2.reviewStatus = {}));
    })(GetCreatorSuggestedDetailsWithReviewRes = exports2.GetCreatorSuggestedDetailsWithReviewRes || (exports2.GetCreatorSuggestedDetailsWithReviewRes = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/GetJobRes.js
var require_GetJobRes = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/GetJobRes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetJobRes = void 0;
    var GetJobRes;
    (function(GetJobRes2) {
      let status;
      (function(status2) {
        status2["SUCCESS"] = "success";
        status2["FAILED"] = "failed";
        status2["ACCEPTED"] = "accepted";
        status2["STARTED"] = "started";
      })(status = GetJobRes2.status || (GetJobRes2.status = {}));
      let type;
      (function(type2) {
        type2["IMPORT_CREATOR_EMAIL"] = "importCreatorEmail";
      })(type = GetJobRes2.type || (GetJobRes2.type = {}));
    })(GetJobRes = exports2.GetJobRes || (exports2.GetJobRes = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/ImportCreatorCSVLineResponse.js
var require_ImportCreatorCSVLineResponse = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/ImportCreatorCSVLineResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ImportCreatorCSVLineResponse = void 0;
    var ImportCreatorCSVLineResponse;
    (function(ImportCreatorCSVLineResponse2) {
      let platform;
      (function(platform2) {
        platform2["TWITCH"] = "twitch";
        platform2["YOUTUBE"] = "youtube";
        platform2["FACEBOOK"] = "facebook";
        platform2["TROVO"] = "trovo";
        platform2["TIKTOK"] = "tiktok";
        platform2["KICK"] = "kick";
        platform2["X"] = "x";
      })(platform = ImportCreatorCSVLineResponse2.platform || (ImportCreatorCSVLineResponse2.platform = {}));
    })(ImportCreatorCSVLineResponse = exports2.ImportCreatorCSVLineResponse || (exports2.ImportCreatorCSVLineResponse = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/ImportCreatorDetailCSVRequest.js
var require_ImportCreatorDetailCSVRequest = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/ImportCreatorDetailCSVRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ImportCreatorDetailCSVRequest = void 0;
    var ImportCreatorDetailCSVRequest;
    (function(ImportCreatorDetailCSVRequest2) {
      let source;
      (function(source2) {
        source2["MANUAL_MIGRATION"] = "manualMigration";
        source2["CHANNEL_TIKTOK"] = "channel:tiktok";
        source2["CHANNEL_YOUTUBE"] = "channel:youtube";
        source2["CHANNEL_TWITCH"] = "channel:twitch";
        source2["CHANNEL_KICK"] = "channel:kick";
        source2["CHANNEL_X"] = "channel:x";
        source2["CREATOR"] = "creator";
        source2["STAFF"] = "staff";
        source2["SERVICE"] = "service";
        source2["CITADEL"] = "citadel";
        source2["CRM"] = "crm";
        source2["MADMEN"] = "madmen";
        source2["CAIP"] = "caip";
        source2["ROORA"] = "roora";
        source2["CHANNELCRAWLER"] = "channelcrawler";
        source2["CIQ"] = "ciq";
        source2["LINKTREE"] = "linktree";
        source2["MODASH"] = "modash";
        source2["EVENTSMADMEN"] = "eventsmadmen";
        source2["EVENTSLT"] = "eventslt";
        source2["UNKNOWN"] = "unknown";
      })(source = ImportCreatorDetailCSVRequest2.source || (ImportCreatorDetailCSVRequest2.source = {}));
    })(ImportCreatorDetailCSVRequest = exports2.ImportCreatorDetailCSVRequest || (exports2.ImportCreatorDetailCSVRequest = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/ListAgencyRequestFilters.js
var require_ListAgencyRequestFilters = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/ListAgencyRequestFilters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListAgencyRequestFilters = void 0;
    var ListAgencyRequestFilters;
    (function(ListAgencyRequestFilters2) {
      let queryOp;
      (function(queryOp2) {
        queryOp2["AND"] = "AND";
        queryOp2["OR"] = "OR";
      })(queryOp = ListAgencyRequestFilters2.queryOp || (ListAgencyRequestFilters2.queryOp = {}));
    })(ListAgencyRequestFilters = exports2.ListAgencyRequestFilters || (exports2.ListAgencyRequestFilters = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/ListAgentCreatorsQueryParam.js
var require_ListAgentCreatorsQueryParam = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/ListAgentCreatorsQueryParam.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListAgentCreatorsQueryParam = void 0;
    var ListAgentCreatorsQueryParam;
    (function(ListAgentCreatorsQueryParam2) {
      let status;
      (function(status2) {
        status2["ACTIVE"] = "active";
        status2["DEPARTED"] = "departed";
        status2["ALL"] = "all";
      })(status = ListAgentCreatorsQueryParam2.status || (ListAgentCreatorsQueryParam2.status = {}));
    })(ListAgentCreatorsQueryParam = exports2.ListAgentCreatorsQueryParam || (exports2.ListAgentCreatorsQueryParam = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/ListAgentsRequestFilters.js
var require_ListAgentsRequestFilters = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/ListAgentsRequestFilters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListAgentsRequestFilters = void 0;
    var ListAgentsRequestFilters;
    (function(ListAgentsRequestFilters2) {
      let queryOp;
      (function(queryOp2) {
        queryOp2["AND"] = "AND";
        queryOp2["OR"] = "OR";
      })(queryOp = ListAgentsRequestFilters2.queryOp || (ListAgentsRequestFilters2.queryOp = {}));
    })(ListAgentsRequestFilters = exports2.ListAgentsRequestFilters || (exports2.ListAgentsRequestFilters = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/ListAuditLogsQueryParams.js
var require_ListAuditLogsQueryParams = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/ListAuditLogsQueryParams.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListAuditLogsQueryParams = void 0;
    var ListAuditLogsQueryParams;
    (function(ListAuditLogsQueryParams2) {
      let auditType;
      (function(auditType2) {
        auditType2["AUTO"] = "Auto";
        auditType2["MANUAL"] = "Manual";
        auditType2["CUSTOM"] = "Custom";
        auditType2["COMMENT"] = "Comment";
      })(auditType = ListAuditLogsQueryParams2.auditType || (ListAuditLogsQueryParams2.auditType = {}));
    })(ListAuditLogsQueryParams = exports2.ListAuditLogsQueryParams || (exports2.ListAuditLogsQueryParams = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/ListCreatorsBlocklistRequestFilters.js
var require_ListCreatorsBlocklistRequestFilters = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/ListCreatorsBlocklistRequestFilters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListCreatorsBlocklistRequestFilters = void 0;
    var ListCreatorsBlocklistRequestFilters;
    (function(ListCreatorsBlocklistRequestFilters2) {
      let queryOp;
      (function(queryOp2) {
        queryOp2["AND"] = "AND";
        queryOp2["OR"] = "OR";
      })(queryOp = ListCreatorsBlocklistRequestFilters2.queryOp || (ListCreatorsBlocklistRequestFilters2.queryOp = {}));
    })(ListCreatorsBlocklistRequestFilters = exports2.ListCreatorsBlocklistRequestFilters || (exports2.ListCreatorsBlocklistRequestFilters = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/ListManagersRequestFilters.js
var require_ListManagersRequestFilters = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/ListManagersRequestFilters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListManagersRequestFilters = void 0;
    var ListManagersRequestFilters;
    (function(ListManagersRequestFilters2) {
      let queryOp;
      (function(queryOp2) {
        queryOp2["AND"] = "AND";
        queryOp2["OR"] = "OR";
      })(queryOp = ListManagersRequestFilters2.queryOp || (ListManagersRequestFilters2.queryOp = {}));
    })(ListManagersRequestFilters = exports2.ListManagersRequestFilters || (exports2.ListManagersRequestFilters = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/ListManagerTeamsRequestFilters.js
var require_ListManagerTeamsRequestFilters = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/ListManagerTeamsRequestFilters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListManagerTeamsRequestFilters = void 0;
    var ListManagerTeamsRequestFilters;
    (function(ListManagerTeamsRequestFilters2) {
      let queryOp;
      (function(queryOp2) {
        queryOp2["AND"] = "AND";
        queryOp2["OR"] = "OR";
      })(queryOp = ListManagerTeamsRequestFilters2.queryOp || (ListManagerTeamsRequestFilters2.queryOp = {}));
    })(ListManagerTeamsRequestFilters = exports2.ListManagerTeamsRequestFilters || (exports2.ListManagerTeamsRequestFilters = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/ListNotificationsRequest.js
var require_ListNotificationsRequest = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/ListNotificationsRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListNotificationsRequest = void 0;
    var ListNotificationsRequest;
    (function(ListNotificationsRequest2) {
      let status;
      (function(status2) {
        status2["UNREAD"] = "Unread";
        status2["READ"] = "Read";
        status2["UNKNOWN"] = "Unknown";
      })(status = ListNotificationsRequest2.status || (ListNotificationsRequest2.status = {}));
    })(ListNotificationsRequest = exports2.ListNotificationsRequest || (exports2.ListNotificationsRequest = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/ManagerSocialResponse.js
var require_ManagerSocialResponse = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/ManagerSocialResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ManagerSocialResponse = void 0;
    var ManagerSocialResponse;
    (function(ManagerSocialResponse2) {
      let socialPlatform;
      (function(socialPlatform2) {
        socialPlatform2["FACEBOOK"] = "facebook";
        socialPlatform2["INSTAGRAM"] = "instagram";
        socialPlatform2["TWITTER"] = "twitter";
        socialPlatform2["DISCORD"] = "discord";
        socialPlatform2["TIKTOK"] = "tiktok";
        socialPlatform2["YOUTUBE"] = "youtube";
        socialPlatform2["SNAPCHAT"] = "snapchat";
        socialPlatform2["KICK"] = "kick";
        socialPlatform2["STEAM"] = "steam";
        socialPlatform2["TWITCH"] = "twitch";
        socialPlatform2["UNKNOWN"] = "unknown";
      })(socialPlatform = ManagerSocialResponse2.socialPlatform || (ManagerSocialResponse2.socialPlatform = {}));
    })(ManagerSocialResponse = exports2.ManagerSocialResponse || (exports2.ManagerSocialResponse = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/ManagerTeamRelationshipResponse.js
var require_ManagerTeamRelationshipResponse = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/ManagerTeamRelationshipResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ManagerTeamRelationshipResponse = void 0;
    var ManagerTeamRelationshipResponse;
    (function(ManagerTeamRelationshipResponse2) {
      let role;
      (function(role2) {
        role2["GROWTH"] = "growth";
        role2["TEAM_LEADER"] = "teamLeader";
        role2["RELATIONSHIPS"] = "relationships";
        role2["DEPLOYMENTS"] = "deployments";
        role2["MERCH"] = "merch";
        role2["TRAINING"] = "training";
      })(role = ManagerTeamRelationshipResponse2.role || (ManagerTeamRelationshipResponse2.role = {}));
    })(ManagerTeamRelationshipResponse = exports2.ManagerTeamRelationshipResponse || (exports2.ManagerTeamRelationshipResponse = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/ManagerTeamResponse.js
var require_ManagerTeamResponse = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/ManagerTeamResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ManagerTeamResponse = void 0;
    var ManagerTeamResponse;
    (function(ManagerTeamResponse2) {
      let role;
      (function(role2) {
        role2["GROWTH"] = "growth";
        role2["TEAM_LEADER"] = "teamLeader";
        role2["RELATIONSHIPS"] = "relationships";
        role2["DEPLOYMENTS"] = "deployments";
        role2["MERCH"] = "merch";
        role2["TRAINING"] = "training";
      })(role = ManagerTeamResponse2.role || (ManagerTeamResponse2.role = {}));
    })(ManagerTeamResponse = exports2.ManagerTeamResponse || (exports2.ManagerTeamResponse = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/NewImportJobRequest.js
var require_NewImportJobRequest = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/NewImportJobRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NewImportJobRequest = void 0;
    var NewImportJobRequest;
    (function(NewImportJobRequest2) {
      let jobType;
      (function(jobType2) {
        jobType2["IMPORT_CREATOR_EMAIL"] = "importCreatorEmail";
      })(jobType = NewImportJobRequest2.jobType || (NewImportJobRequest2.jobType = {}));
    })(NewImportJobRequest = exports2.NewImportJobRequest || (exports2.NewImportJobRequest = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/NewImportJobResponse.js
var require_NewImportJobResponse = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/NewImportJobResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NewImportJobResponse = void 0;
    var NewImportJobResponse;
    (function(NewImportJobResponse2) {
      let status;
      (function(status2) {
        status2["SUCCESS"] = "success";
        status2["FAILED"] = "failed";
        status2["ACCEPTED"] = "accepted";
        status2["STARTED"] = "started";
      })(status = NewImportJobResponse2.status || (NewImportJobResponse2.status = {}));
    })(NewImportJobResponse = exports2.NewImportJobResponse || (exports2.NewImportJobResponse = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/NotificationResponse.js
var require_NotificationResponse = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/NotificationResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NotificationResponse = void 0;
    var NotificationResponse;
    (function(NotificationResponse2) {
      let status;
      (function(status2) {
        status2["UNREAD"] = "Unread";
        status2["READ"] = "Read";
        status2["UNKNOWN"] = "Unknown";
      })(status = NotificationResponse2.status || (NotificationResponse2.status = {}));
    })(NotificationResponse = exports2.NotificationResponse || (exports2.NotificationResponse = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/PaymentOverviewResponse.js
var require_PaymentOverviewResponse = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/PaymentOverviewResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PaymentOverviewResponse = void 0;
    var PaymentOverviewResponse;
    (function(PaymentOverviewResponse2) {
      let paymentStatus;
      (function(paymentStatus2) {
        paymentStatus2["DELETED"] = "DELETED";
        paymentStatus2["PAID"] = "PAID";
        paymentStatus2["PROCESSING"] = "PROCESSING";
        paymentStatus2["REJECTED"] = "REJECTED";
        paymentStatus2["APPROVED"] = "APPROVED";
        paymentStatus2["PENDING"] = "PENDING";
        paymentStatus2["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
      })(paymentStatus = PaymentOverviewResponse2.paymentStatus || (PaymentOverviewResponse2.paymentStatus = {}));
    })(PaymentOverviewResponse = exports2.PaymentOverviewResponse || (exports2.PaymentOverviewResponse = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/SavedViewResponse.js
var require_SavedViewResponse = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/SavedViewResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SavedViewResponse = void 0;
    var SavedViewResponse;
    (function(SavedViewResponse2) {
      let visibility;
      (function(visibility2) {
        visibility2["PUBLIC"] = "public";
        visibility2["PRIVATE"] = "private";
      })(visibility = SavedViewResponse2.visibility || (SavedViewResponse2.visibility = {}));
      let editableBy;
      (function(editableBy2) {
        editableBy2["ME"] = "me";
        editableBy2["ALL"] = "all";
      })(editableBy = SavedViewResponse2.editableBy || (SavedViewResponse2.editableBy = {}));
    })(SavedViewResponse = exports2.SavedViewResponse || (exports2.SavedViewResponse = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/SearchField.js
var require_SearchField = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/SearchField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SearchField = void 0;
    var SearchField;
    (function(SearchField2) {
      let type;
      (function(type2) {
        type2["DATE"] = "Date";
        type2["NUMBER"] = "Number";
        type2["BOOL"] = "Bool";
        type2["TEXT"] = "Text";
        type2["KEYWORD"] = "keyword";
        type2["UNKNOWN"] = "Unknown";
      })(type = SearchField2.type || (SearchField2.type = {}));
    })(SearchField = exports2.SearchField || (exports2.SearchField = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/SearchFieldArg.js
var require_SearchFieldArg = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/SearchFieldArg.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SearchFieldArg = void 0;
    var SearchFieldArg;
    (function(SearchFieldArg2) {
      let sortDirection;
      (function(sortDirection2) {
        sortDirection2["ASC"] = "Asc";
        sortDirection2["DESC"] = "Desc";
      })(sortDirection = SearchFieldArg2.sortDirection || (SearchFieldArg2.sortDirection = {}));
    })(SearchFieldArg = exports2.SearchFieldArg || (exports2.SearchFieldArg = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/SearchPaymentRequest.js
var require_SearchPaymentRequest = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/SearchPaymentRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SearchPaymentRequest = void 0;
    var SearchPaymentRequest;
    (function(SearchPaymentRequest2) {
      let paymentStatus;
      (function(paymentStatus2) {
        paymentStatus2["DELETED"] = "DELETED";
        paymentStatus2["PAID"] = "PAID";
        paymentStatus2["PROCESSING"] = "PROCESSING";
        paymentStatus2["REJECTED"] = "REJECTED";
        paymentStatus2["APPROVED"] = "APPROVED";
        paymentStatus2["PENDING"] = "PENDING";
        paymentStatus2["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
      })(paymentStatus = SearchPaymentRequest2.paymentStatus || (SearchPaymentRequest2.paymentStatus = {}));
      let sortColumn;
      (function(sortColumn2) {
        sortColumn2["UNKNOWN_COLUMN"] = "UNKNOWN_COLUMN";
        sortColumn2["CREATED_AT"] = "CREATED_AT";
        sortColumn2["UPDATED_AT"] = "UPDATED_AT";
        sortColumn2["STATUS"] = "STATUS";
        sortColumn2["AMOUNT"] = "AMOUNT";
        sortColumn2["TITLE"] = "TITLE";
        sortColumn2["TARGET_DATE"] = "TARGET_DATE";
      })(sortColumn = SearchPaymentRequest2.sortColumn || (SearchPaymentRequest2.sortColumn = {}));
      let sortDir;
      (function(sortDir2) {
        sortDir2["UNKNOWN_DIR"] = "UNKNOWN_DIR";
        sortDir2["ASC"] = "ASC";
        sortDir2["DESC"] = "DESC";
      })(sortDir = SearchPaymentRequest2.sortDir || (SearchPaymentRequest2.sortDir = {}));
    })(SearchPaymentRequest = exports2.SearchPaymentRequest || (exports2.SearchPaymentRequest = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/SearchRequest.js
var require_SearchRequest = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/SearchRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SearchRequest = void 0;
    var SearchRequest;
    (function(SearchRequest2) {
      let queryOp;
      (function(queryOp2) {
        queryOp2["AND"] = "AND";
        queryOp2["OR"] = "OR";
      })(queryOp = SearchRequest2.queryOp || (SearchRequest2.queryOp = {}));
    })(SearchRequest = exports2.SearchRequest || (exports2.SearchRequest = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/SecondaryEmailsMeta.js
var require_SecondaryEmailsMeta = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/SecondaryEmailsMeta.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SecondaryEmailsMeta = void 0;
    var SecondaryEmailsMeta;
    (function(SecondaryEmailsMeta2) {
      let source;
      (function(source2) {
        source2["MANUAL_MIGRATION"] = "manualMigration";
        source2["CHANNEL_TIKTOK"] = "channel:tiktok";
        source2["CHANNEL_YOUTUBE"] = "channel:youtube";
        source2["CHANNEL_TWITCH"] = "channel:twitch";
        source2["CHANNEL_KICK"] = "channel:kick";
        source2["CHANNEL_X"] = "channel:x";
        source2["CREATOR"] = "creator";
        source2["STAFF"] = "staff";
        source2["SERVICE"] = "service";
        source2["CITADEL"] = "citadel";
        source2["CRM"] = "crm";
        source2["MADMEN"] = "madmen";
        source2["CAIP"] = "caip";
        source2["ROORA"] = "roora";
        source2["CHANNELCRAWLER"] = "channelcrawler";
        source2["CIQ"] = "ciq";
        source2["LINKTREE"] = "linktree";
        source2["MODASH"] = "modash";
        source2["EVENTSMADMEN"] = "eventsmadmen";
        source2["EVENTSLT"] = "eventslt";
        source2["UNKNOWN"] = "unknown";
      })(source = SecondaryEmailsMeta2.source || (SecondaryEmailsMeta2.source = {}));
    })(SecondaryEmailsMeta = exports2.SecondaryEmailsMeta || (exports2.SecondaryEmailsMeta = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/SEReviewDetailsRquest.js
var require_SEReviewDetailsRquest = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/SEReviewDetailsRquest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SEReviewDetailsRquest = void 0;
    var SEReviewDetailsRquest;
    (function(SEReviewDetailsRquest2) {
      let status;
      (function(status2) {
        status2["ACCEPT"] = "accept";
        status2["REJECT"] = "reject";
      })(status = SEReviewDetailsRquest2.status || (SEReviewDetailsRquest2.status = {}));
    })(SEReviewDetailsRquest = exports2.SEReviewDetailsRquest || (exports2.SEReviewDetailsRquest = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/UpdateAgenciesSEInformation.js
var require_UpdateAgenciesSEInformation = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/UpdateAgenciesSEInformation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateAgenciesSEInformation = void 0;
    var UpdateAgenciesSEInformation;
    (function(UpdateAgenciesSEInformation2) {
      let contactMethod;
      (function(contactMethod2) {
        contactMethod2["EMAIL"] = "email";
        contactMethod2["PHONE"] = "phone";
      })(contactMethod = UpdateAgenciesSEInformation2.contactMethod || (UpdateAgenciesSEInformation2.contactMethod = {}));
      let digestFrequency;
      (function(digestFrequency2) {
        digestFrequency2["DAILY"] = "daily";
        digestFrequency2["WEEKLY"] = "weekly";
      })(digestFrequency = UpdateAgenciesSEInformation2.digestFrequency || (UpdateAgenciesSEInformation2.digestFrequency = {}));
    })(UpdateAgenciesSEInformation = exports2.UpdateAgenciesSEInformation || (exports2.UpdateAgenciesSEInformation = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/UpdateAgencySocialMedia.js
var require_UpdateAgencySocialMedia = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/UpdateAgencySocialMedia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateAgencySocialMedia = void 0;
    var UpdateAgencySocialMedia;
    (function(UpdateAgencySocialMedia2) {
      let socialPlatform;
      (function(socialPlatform2) {
        socialPlatform2["FACEBOOK"] = "facebook";
        socialPlatform2["INSTAGRAM"] = "instagram";
        socialPlatform2["TWITTER"] = "twitter";
        socialPlatform2["DISCORD"] = "discord";
        socialPlatform2["TIKTOK"] = "tiktok";
        socialPlatform2["YOUTUBE"] = "youtube";
        socialPlatform2["SNAPCHAT"] = "snapchat";
        socialPlatform2["KICK"] = "kick";
        socialPlatform2["STEAM"] = "steam";
        socialPlatform2["TWITCH"] = "twitch";
        socialPlatform2["UNKNOWN"] = "unknown";
      })(socialPlatform = UpdateAgencySocialMedia2.socialPlatform || (UpdateAgencySocialMedia2.socialPlatform = {}));
    })(UpdateAgencySocialMedia = exports2.UpdateAgencySocialMedia || (exports2.UpdateAgencySocialMedia = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/UpdateAgentSEInformation.js
var require_UpdateAgentSEInformation = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/UpdateAgentSEInformation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateAgentSEInformation = void 0;
    var UpdateAgentSEInformation;
    (function(UpdateAgentSEInformation2) {
      let contactMethod;
      (function(contactMethod2) {
        contactMethod2["EMAIL"] = "email";
        contactMethod2["PHONE"] = "phone";
      })(contactMethod = UpdateAgentSEInformation2.contactMethod || (UpdateAgentSEInformation2.contactMethod = {}));
    })(UpdateAgentSEInformation = exports2.UpdateAgentSEInformation || (exports2.UpdateAgentSEInformation = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/UpdateAgentSocialMedia.js
var require_UpdateAgentSocialMedia = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/UpdateAgentSocialMedia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateAgentSocialMedia = void 0;
    var UpdateAgentSocialMedia;
    (function(UpdateAgentSocialMedia2) {
      let socialPlatform;
      (function(socialPlatform2) {
        socialPlatform2["FACEBOOK"] = "facebook";
        socialPlatform2["INSTAGRAM"] = "instagram";
        socialPlatform2["TWITTER"] = "twitter";
        socialPlatform2["DISCORD"] = "discord";
        socialPlatform2["TIKTOK"] = "tiktok";
        socialPlatform2["YOUTUBE"] = "youtube";
        socialPlatform2["SNAPCHAT"] = "snapchat";
        socialPlatform2["KICK"] = "kick";
        socialPlatform2["STEAM"] = "steam";
        socialPlatform2["TWITCH"] = "twitch";
        socialPlatform2["UNKNOWN"] = "unknown";
      })(socialPlatform = UpdateAgentSocialMedia2.socialPlatform || (UpdateAgentSocialMedia2.socialPlatform = {}));
    })(UpdateAgentSocialMedia = exports2.UpdateAgentSocialMedia || (exports2.UpdateAgentSocialMedia = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/UpdateCreatorEmailStats.js
var require_UpdateCreatorEmailStats = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/UpdateCreatorEmailStats.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateCreatorEmailStats = void 0;
    var UpdateCreatorEmailStats;
    (function(UpdateCreatorEmailStats2) {
      let emailCategory;
      (function(emailCategory2) {
        emailCategory2["DIGEST"] = "digest";
        emailCategory2["SPECIAL_OFFER"] = "specialOffer";
        emailCategory2["NOTIFY_ME"] = "notifyMe";
        emailCategory2["INITIAL_OUTREACH"] = "initialOutreach";
        emailCategory2["MANUAL_OUTREACH"] = "manualOutreach";
        emailCategory2["REMINDER"] = "reminder";
        emailCategory2["STREAM_REPORT"] = "streamReport";
        emailCategory2["OTHER"] = "other";
      })(emailCategory = UpdateCreatorEmailStats2.emailCategory || (UpdateCreatorEmailStats2.emailCategory = {}));
    })(UpdateCreatorEmailStats = exports2.UpdateCreatorEmailStats || (exports2.UpdateCreatorEmailStats = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/UpdateCreatorOutreach.js
var require_UpdateCreatorOutreach = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/UpdateCreatorOutreach.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateCreatorOutreach = void 0;
    var UpdateCreatorOutreach;
    (function(UpdateCreatorOutreach2) {
      let outreachMedium;
      (function(outreachMedium2) {
        outreachMedium2["DISCORD"] = "discord";
        outreachMedium2["EMAIL"] = "email";
      })(outreachMedium = UpdateCreatorOutreach2.outreachMedium || (UpdateCreatorOutreach2.outreachMedium = {}));
      let outreachMethod;
      (function(outreachMethod2) {
        outreachMethod2["AUTOMATIC"] = "automatic";
        outreachMethod2["MANUAL"] = "manual";
      })(outreachMethod = UpdateCreatorOutreach2.outreachMethod || (UpdateCreatorOutreach2.outreachMethod = {}));
      let outreachTarget;
      (function(outreachTarget2) {
        outreachTarget2["AGENCY"] = "agency";
        outreachTarget2["DIRECT"] = "direct";
      })(outreachTarget = UpdateCreatorOutreach2.outreachTarget || (UpdateCreatorOutreach2.outreachTarget = {}));
      let spContractTarget;
      (function(spContractTarget2) {
        spContractTarget2["AGENCY"] = "agency";
        spContractTarget2["DIRECT"] = "direct";
      })(spContractTarget = UpdateCreatorOutreach2.spContractTarget || (UpdateCreatorOutreach2.spContractTarget = {}));
      let spStanding;
      (function(spStanding2) {
        spStanding2["GOOD"] = "good";
        spStanding2["UNKNOWN"] = "unknown";
        spStanding2["SUSPECTED"] = "suspected";
        spStanding2["BANNED"] = "banned";
      })(spStanding = UpdateCreatorOutreach2.spStanding || (UpdateCreatorOutreach2.spStanding = {}));
      let paymentTarget;
      (function(paymentTarget2) {
        paymentTarget2["AGENCY"] = "agency";
        paymentTarget2["DIRECT"] = "direct";
      })(paymentTarget = UpdateCreatorOutreach2.paymentTarget || (UpdateCreatorOutreach2.paymentTarget = {}));
    })(UpdateCreatorOutreach = exports2.UpdateCreatorOutreach || (exports2.UpdateCreatorOutreach = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/UpdateCreatorSocial.js
var require_UpdateCreatorSocial = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/UpdateCreatorSocial.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateCreatorSocial = void 0;
    var UpdateCreatorSocial;
    (function(UpdateCreatorSocial2) {
      let platform;
      (function(platform2) {
        platform2["FACEBOOK"] = "facebook";
        platform2["INSTAGRAM"] = "instagram";
        platform2["TWITTER"] = "twitter";
        platform2["DISCORD"] = "discord";
        platform2["TIKTOK"] = "tiktok";
        platform2["YOUTUBE"] = "youtube";
        platform2["SNAPCHAT"] = "snapchat";
        platform2["KICK"] = "kick";
        platform2["STEAM"] = "steam";
        platform2["TWITCH"] = "twitch";
        platform2["UNKNOWN"] = "unknown";
      })(platform = UpdateCreatorSocial2.platform || (UpdateCreatorSocial2.platform = {}));
    })(UpdateCreatorSocial = exports2.UpdateCreatorSocial || (exports2.UpdateCreatorSocial = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/UpdateManagerSocialRequest.js
var require_UpdateManagerSocialRequest = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/UpdateManagerSocialRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateManagerSocialRequest = void 0;
    var UpdateManagerSocialRequest;
    (function(UpdateManagerSocialRequest2) {
      let socialPlatform;
      (function(socialPlatform2) {
        socialPlatform2["FACEBOOK"] = "facebook";
        socialPlatform2["INSTAGRAM"] = "instagram";
        socialPlatform2["TWITTER"] = "twitter";
        socialPlatform2["DISCORD"] = "discord";
        socialPlatform2["TIKTOK"] = "tiktok";
        socialPlatform2["YOUTUBE"] = "youtube";
        socialPlatform2["SNAPCHAT"] = "snapchat";
        socialPlatform2["KICK"] = "kick";
        socialPlatform2["STEAM"] = "steam";
        socialPlatform2["TWITCH"] = "twitch";
        socialPlatform2["UNKNOWN"] = "unknown";
      })(socialPlatform = UpdateManagerSocialRequest2.socialPlatform || (UpdateManagerSocialRequest2.socialPlatform = {}));
    })(UpdateManagerSocialRequest = exports2.UpdateManagerSocialRequest || (exports2.UpdateManagerSocialRequest = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/UpdateManagerSocialResponse.js
var require_UpdateManagerSocialResponse = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/UpdateManagerSocialResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateManagerSocialResponse = void 0;
    var UpdateManagerSocialResponse;
    (function(UpdateManagerSocialResponse2) {
      let type;
      (function(type2) {
        type2["FACEBOOK"] = "facebook";
        type2["INSTAGRAM"] = "instagram";
        type2["TWITTER"] = "twitter";
        type2["DISCORD"] = "discord";
        type2["TIKTOK"] = "tiktok";
        type2["YOUTUBE"] = "youtube";
        type2["SNAPCHAT"] = "snapchat";
        type2["KICK"] = "kick";
        type2["STEAM"] = "steam";
        type2["TWITCH"] = "twitch";
        type2["UNKNOWN"] = "unknown";
      })(type = UpdateManagerSocialResponse2.type || (UpdateManagerSocialResponse2.type = {}));
    })(UpdateManagerSocialResponse = exports2.UpdateManagerSocialResponse || (exports2.UpdateManagerSocialResponse = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/UpdateManagerTeamRelationshipRequest.js
var require_UpdateManagerTeamRelationshipRequest = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/UpdateManagerTeamRelationshipRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateManagerTeamRelationshipRequest = void 0;
    var UpdateManagerTeamRelationshipRequest;
    (function(UpdateManagerTeamRelationshipRequest2) {
      let role;
      (function(role2) {
        role2["GROWTH"] = "growth";
        role2["TEAM_LEADER"] = "teamLeader";
        role2["RELATIONSHIPS"] = "relationships";
        role2["DEPLOYMENTS"] = "deployments";
        role2["MERCH"] = "merch";
        role2["TRAINING"] = "training";
      })(role = UpdateManagerTeamRelationshipRequest2.role || (UpdateManagerTeamRelationshipRequest2.role = {}));
      let teamId;
      (function(teamId2) {
        teamId2["GROWTH"] = "growth";
        teamId2["TEAM_LEADER"] = "teamLeader";
        teamId2["RELATIONSHIPS"] = "relationships";
        teamId2["DEPLOYMENTS"] = "deployments";
        teamId2["MERCH"] = "merch";
        teamId2["TRAINING"] = "training";
      })(teamId = UpdateManagerTeamRelationshipRequest2.teamId || (UpdateManagerTeamRelationshipRequest2.teamId = {}));
    })(UpdateManagerTeamRelationshipRequest = exports2.UpdateManagerTeamRelationshipRequest || (exports2.UpdateManagerTeamRelationshipRequest = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/UpdateNotificationsStatusRequest.js
var require_UpdateNotificationsStatusRequest = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/UpdateNotificationsStatusRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateNotificationsStatusRequest = void 0;
    var UpdateNotificationsStatusRequest;
    (function(UpdateNotificationsStatusRequest2) {
      let status;
      (function(status2) {
        status2["UNREAD"] = "Unread";
        status2["READ"] = "Read";
        status2["UNKNOWN"] = "Unknown";
      })(status = UpdateNotificationsStatusRequest2.status || (UpdateNotificationsStatusRequest2.status = {}));
    })(UpdateNotificationsStatusRequest = exports2.UpdateNotificationsStatusRequest || (exports2.UpdateNotificationsStatusRequest = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/UpsertManagerToTeamRequest.js
var require_UpsertManagerToTeamRequest = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/UpsertManagerToTeamRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpsertManagerToTeamRequest = void 0;
    var UpsertManagerToTeamRequest;
    (function(UpsertManagerToTeamRequest2) {
      let role;
      (function(role2) {
        role2["GROWTH"] = "growth";
        role2["TEAM_LEADER"] = "teamLeader";
        role2["RELATIONSHIPS"] = "relationships";
        role2["DEPLOYMENTS"] = "deployments";
        role2["MERCH"] = "merch";
        role2["TRAINING"] = "training";
      })(role = UpsertManagerToTeamRequest2.role || (UpsertManagerToTeamRequest2.role = {}));
    })(UpsertManagerToTeamRequest = exports2.UpsertManagerToTeamRequest || (exports2.UpsertManagerToTeamRequest = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/UpsertManagerToTeamResponse.js
var require_UpsertManagerToTeamResponse = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/UpsertManagerToTeamResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpsertManagerToTeamResponse = void 0;
    var UpsertManagerToTeamResponse;
    (function(UpsertManagerToTeamResponse2) {
      let role;
      (function(role2) {
        role2["GROWTH"] = "growth";
        role2["TEAM_LEADER"] = "teamLeader";
        role2["RELATIONSHIPS"] = "relationships";
        role2["DEPLOYMENTS"] = "deployments";
        role2["MERCH"] = "merch";
        role2["TRAINING"] = "training";
      })(role = UpsertManagerToTeamResponse2.role || (UpsertManagerToTeamResponse2.role = {}));
    })(UpsertManagerToTeamResponse = exports2.UpsertManagerToTeamResponse || (exports2.UpsertManagerToTeamResponse = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/models/UpsertSavedViewRequest.js
var require_UpsertSavedViewRequest = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/models/UpsertSavedViewRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpsertSavedViewRequest = void 0;
    var UpsertSavedViewRequest;
    (function(UpsertSavedViewRequest2) {
      let visibility;
      (function(visibility2) {
        visibility2["PUBLIC"] = "public";
        visibility2["PRIVATE"] = "private";
      })(visibility = UpsertSavedViewRequest2.visibility || (UpsertSavedViewRequest2.visibility = {}));
      let editableBy;
      (function(editableBy2) {
        editableBy2["ME"] = "me";
        editableBy2["ALL"] = "all";
      })(editableBy = UpsertSavedViewRequest2.editableBy || (UpsertSavedViewRequest2.editableBy = {}));
    })(UpsertSavedViewRequest = exports2.UpsertSavedViewRequest || (exports2.UpsertSavedViewRequest = {}));
  }
});

// node_modules/@streamelements/crm-api-axios-sdk/lib/index.js
var require_lib = __commonJS({
  "node_modules/@streamelements/crm-api-axios-sdk/lib/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListCreatorsBlocklistRequestFilters = exports2.ListAuditLogsQueryParams = exports2.ListAgentsRequestFilters = exports2.ListAgentCreatorsQueryParam = exports2.ListAgencyRequestFilters = exports2.ImportCreatorDetailCSVRequest = exports2.ImportCreatorCSVLineResponse = exports2.GetJobRes = exports2.GetCreatorSuggestedDetailsWithReviewRes = exports2.GetCreatorsQueryParams = exports2.GetAgencyCreatorQueryParams = exports2.GetAgencyAgentsPaymentsQueryParams = exports2.Filter = exports2.EmailOutreachPreferencesTos = exports2.CreatorSpStatsResponse = exports2.CreatorSocialResponse = exports2.CreatorResponse = exports2.CreatorOutreachResponse = exports2.CreatorEmailStatsResponse = exports2.CreatorDetailsResponse = exports2.CreatorContactResponse = exports2.CreatorChannelResponse = exports2.CreateManagerTeamRelationshipRequest = exports2.CreateManagerSocialRequest = exports2.CreateCreatorBlocklistRequest = exports2.CreateAgentSocialRequest = exports2.CreateAgentSocialMedia = exports2.CreateAgentSEInformation = exports2.CreateAgencySocialRequest = exports2.CreateAgencySocialMedia = exports2.CreateAgenciesSEInformation = exports2.ChannelStatsResponse = exports2.ChannelSEFeatureResponse = exports2.ChannelRevenueFeatureStatsResponse = exports2.ChannelResponse = exports2.ChannelAdvertiserStatsResponse = exports2.BulkUpdateCreatorRequest = exports2.AuditLogResponse = exports2.AgentSocialMedia = exports2.AgentSEInformationResponse = exports2.AgencySocialMedia = exports2.AgencyCreatorChannel = exports2.AgenciesSEInformation = exports2.AddCreatorSocialRequest = exports2.OpenAPI = exports2.CancelError = exports2.CancelablePromise = exports2.BaseHttpRequest = exports2.ApiError = exports2.CRM = void 0;
    exports2.HealthService = exports2.CreatorSuggestedDetailsService = exports2.CreatorSocialsService = exports2.CreatorsInternalService = exports2.CreatorsImportService = exports2.CreatorSeRelationshipService = exports2.CreatorsService = exports2.CreatorProgramsService = exports2.CreatorMergeService = exports2.CreatorAgenciesService = exports2.ChannelsService = exports2.BlocklistService = exports2.AuditLogsService = exports2.AudienceJourneyService = exports2.AgentSocialsService = exports2.AgentsService = exports2.AgencySocialsService = exports2.AgenciesMutationService = exports2.AgenciesService = exports2.UpsertSavedViewRequest = exports2.UpsertManagerToTeamResponse = exports2.UpsertManagerToTeamRequest = exports2.UpdateNotificationsStatusRequest = exports2.UpdateManagerTeamRelationshipRequest = exports2.UpdateManagerSocialResponse = exports2.UpdateManagerSocialRequest = exports2.UpdateCreatorSocial = exports2.UpdateCreatorOutreach = exports2.UpdateCreatorEmailStats = exports2.UpdateAgentSocialMedia = exports2.UpdateAgentSEInformation = exports2.UpdateAgencySocialMedia = exports2.UpdateAgenciesSEInformation = exports2.SEReviewDetailsRquest = exports2.SecondaryEmailsMeta = exports2.SearchRequest = exports2.SearchPaymentRequest = exports2.SearchFieldArg = exports2.SearchField = exports2.SavedViewResponse = exports2.PaymentOverviewResponse = exports2.NotificationResponse = exports2.NewImportJobResponse = exports2.NewImportJobRequest = exports2.ManagerTeamResponse = exports2.ManagerTeamRelationshipResponse = exports2.ManagerSocialResponse = exports2.ListNotificationsRequest = exports2.ListManagerTeamsRequestFilters = exports2.ListManagersRequestFilters = void 0;
    exports2.SearchCreatorService = exports2.SavedViewsService = exports2.PublicCreatorsService = exports2.PublicCreatorOutreachService = exports2.PublicCreatorDetailsService = exports2.PublicCreatorContactService = exports2.ProgramsService = exports2.PermissionsService = exports2.PaymentsService = exports2.NotificationsService = exports2.NotesCommentsService = exports2.NotesService = exports2.ManagersTeamsService = exports2.ManagerSocialsService = exports2.ManagersService = exports2.JobsService = void 0;
    var CRM_1 = require_CRM();
    Object.defineProperty(exports2, "CRM", { enumerable: true, get: function() {
      return CRM_1.CRM;
    } });
    var ApiError_1 = require_ApiError();
    Object.defineProperty(exports2, "ApiError", { enumerable: true, get: function() {
      return ApiError_1.ApiError;
    } });
    var BaseHttpRequest_1 = require_BaseHttpRequest();
    Object.defineProperty(exports2, "BaseHttpRequest", { enumerable: true, get: function() {
      return BaseHttpRequest_1.BaseHttpRequest;
    } });
    var CancelablePromise_1 = require_CancelablePromise();
    Object.defineProperty(exports2, "CancelablePromise", { enumerable: true, get: function() {
      return CancelablePromise_1.CancelablePromise;
    } });
    Object.defineProperty(exports2, "CancelError", { enumerable: true, get: function() {
      return CancelablePromise_1.CancelError;
    } });
    var OpenAPI_1 = require_OpenAPI();
    Object.defineProperty(exports2, "OpenAPI", { enumerable: true, get: function() {
      return OpenAPI_1.OpenAPI;
    } });
    var AddCreatorSocialRequest_1 = require_AddCreatorSocialRequest();
    Object.defineProperty(exports2, "AddCreatorSocialRequest", { enumerable: true, get: function() {
      return AddCreatorSocialRequest_1.AddCreatorSocialRequest;
    } });
    var AgenciesSEInformation_1 = require_AgenciesSEInformation();
    Object.defineProperty(exports2, "AgenciesSEInformation", { enumerable: true, get: function() {
      return AgenciesSEInformation_1.AgenciesSEInformation;
    } });
    var AgencyCreatorChannel_1 = require_AgencyCreatorChannel();
    Object.defineProperty(exports2, "AgencyCreatorChannel", { enumerable: true, get: function() {
      return AgencyCreatorChannel_1.AgencyCreatorChannel;
    } });
    var AgencySocialMedia_1 = require_AgencySocialMedia();
    Object.defineProperty(exports2, "AgencySocialMedia", { enumerable: true, get: function() {
      return AgencySocialMedia_1.AgencySocialMedia;
    } });
    var AgentSEInformationResponse_1 = require_AgentSEInformationResponse();
    Object.defineProperty(exports2, "AgentSEInformationResponse", { enumerable: true, get: function() {
      return AgentSEInformationResponse_1.AgentSEInformationResponse;
    } });
    var AgentSocialMedia_1 = require_AgentSocialMedia();
    Object.defineProperty(exports2, "AgentSocialMedia", { enumerable: true, get: function() {
      return AgentSocialMedia_1.AgentSocialMedia;
    } });
    var AuditLogResponse_1 = require_AuditLogResponse();
    Object.defineProperty(exports2, "AuditLogResponse", { enumerable: true, get: function() {
      return AuditLogResponse_1.AuditLogResponse;
    } });
    var BulkUpdateCreatorRequest_1 = require_BulkUpdateCreatorRequest();
    Object.defineProperty(exports2, "BulkUpdateCreatorRequest", { enumerable: true, get: function() {
      return BulkUpdateCreatorRequest_1.BulkUpdateCreatorRequest;
    } });
    var ChannelAdvertiserStatsResponse_1 = require_ChannelAdvertiserStatsResponse();
    Object.defineProperty(exports2, "ChannelAdvertiserStatsResponse", { enumerable: true, get: function() {
      return ChannelAdvertiserStatsResponse_1.ChannelAdvertiserStatsResponse;
    } });
    var ChannelResponse_1 = require_ChannelResponse();
    Object.defineProperty(exports2, "ChannelResponse", { enumerable: true, get: function() {
      return ChannelResponse_1.ChannelResponse;
    } });
    var ChannelRevenueFeatureStatsResponse_1 = require_ChannelRevenueFeatureStatsResponse();
    Object.defineProperty(exports2, "ChannelRevenueFeatureStatsResponse", { enumerable: true, get: function() {
      return ChannelRevenueFeatureStatsResponse_1.ChannelRevenueFeatureStatsResponse;
    } });
    var ChannelSEFeatureResponse_1 = require_ChannelSEFeatureResponse();
    Object.defineProperty(exports2, "ChannelSEFeatureResponse", { enumerable: true, get: function() {
      return ChannelSEFeatureResponse_1.ChannelSEFeatureResponse;
    } });
    var ChannelStatsResponse_1 = require_ChannelStatsResponse();
    Object.defineProperty(exports2, "ChannelStatsResponse", { enumerable: true, get: function() {
      return ChannelStatsResponse_1.ChannelStatsResponse;
    } });
    var CreateAgenciesSEInformation_1 = require_CreateAgenciesSEInformation();
    Object.defineProperty(exports2, "CreateAgenciesSEInformation", { enumerable: true, get: function() {
      return CreateAgenciesSEInformation_1.CreateAgenciesSEInformation;
    } });
    var CreateAgencySocialMedia_1 = require_CreateAgencySocialMedia();
    Object.defineProperty(exports2, "CreateAgencySocialMedia", { enumerable: true, get: function() {
      return CreateAgencySocialMedia_1.CreateAgencySocialMedia;
    } });
    var CreateAgencySocialRequest_1 = require_CreateAgencySocialRequest();
    Object.defineProperty(exports2, "CreateAgencySocialRequest", { enumerable: true, get: function() {
      return CreateAgencySocialRequest_1.CreateAgencySocialRequest;
    } });
    var CreateAgentSEInformation_1 = require_CreateAgentSEInformation();
    Object.defineProperty(exports2, "CreateAgentSEInformation", { enumerable: true, get: function() {
      return CreateAgentSEInformation_1.CreateAgentSEInformation;
    } });
    var CreateAgentSocialMedia_1 = require_CreateAgentSocialMedia();
    Object.defineProperty(exports2, "CreateAgentSocialMedia", { enumerable: true, get: function() {
      return CreateAgentSocialMedia_1.CreateAgentSocialMedia;
    } });
    var CreateAgentSocialRequest_1 = require_CreateAgentSocialRequest();
    Object.defineProperty(exports2, "CreateAgentSocialRequest", { enumerable: true, get: function() {
      return CreateAgentSocialRequest_1.CreateAgentSocialRequest;
    } });
    var CreateCreatorBlocklistRequest_1 = require_CreateCreatorBlocklistRequest();
    Object.defineProperty(exports2, "CreateCreatorBlocklistRequest", { enumerable: true, get: function() {
      return CreateCreatorBlocklistRequest_1.CreateCreatorBlocklistRequest;
    } });
    var CreateManagerSocialRequest_1 = require_CreateManagerSocialRequest();
    Object.defineProperty(exports2, "CreateManagerSocialRequest", { enumerable: true, get: function() {
      return CreateManagerSocialRequest_1.CreateManagerSocialRequest;
    } });
    var CreateManagerTeamRelationshipRequest_1 = require_CreateManagerTeamRelationshipRequest();
    Object.defineProperty(exports2, "CreateManagerTeamRelationshipRequest", { enumerable: true, get: function() {
      return CreateManagerTeamRelationshipRequest_1.CreateManagerTeamRelationshipRequest;
    } });
    var CreatorChannelResponse_1 = require_CreatorChannelResponse();
    Object.defineProperty(exports2, "CreatorChannelResponse", { enumerable: true, get: function() {
      return CreatorChannelResponse_1.CreatorChannelResponse;
    } });
    var CreatorContactResponse_1 = require_CreatorContactResponse();
    Object.defineProperty(exports2, "CreatorContactResponse", { enumerable: true, get: function() {
      return CreatorContactResponse_1.CreatorContactResponse;
    } });
    var CreatorDetailsResponse_1 = require_CreatorDetailsResponse();
    Object.defineProperty(exports2, "CreatorDetailsResponse", { enumerable: true, get: function() {
      return CreatorDetailsResponse_1.CreatorDetailsResponse;
    } });
    var CreatorEmailStatsResponse_1 = require_CreatorEmailStatsResponse();
    Object.defineProperty(exports2, "CreatorEmailStatsResponse", { enumerable: true, get: function() {
      return CreatorEmailStatsResponse_1.CreatorEmailStatsResponse;
    } });
    var CreatorOutreachResponse_1 = require_CreatorOutreachResponse();
    Object.defineProperty(exports2, "CreatorOutreachResponse", { enumerable: true, get: function() {
      return CreatorOutreachResponse_1.CreatorOutreachResponse;
    } });
    var CreatorResponse_1 = require_CreatorResponse();
    Object.defineProperty(exports2, "CreatorResponse", { enumerable: true, get: function() {
      return CreatorResponse_1.CreatorResponse;
    } });
    var CreatorSocialResponse_1 = require_CreatorSocialResponse();
    Object.defineProperty(exports2, "CreatorSocialResponse", { enumerable: true, get: function() {
      return CreatorSocialResponse_1.CreatorSocialResponse;
    } });
    var CreatorSpStatsResponse_1 = require_CreatorSpStatsResponse();
    Object.defineProperty(exports2, "CreatorSpStatsResponse", { enumerable: true, get: function() {
      return CreatorSpStatsResponse_1.CreatorSpStatsResponse;
    } });
    var EmailOutreachPreferencesTos_1 = require_EmailOutreachPreferencesTos();
    Object.defineProperty(exports2, "EmailOutreachPreferencesTos", { enumerable: true, get: function() {
      return EmailOutreachPreferencesTos_1.EmailOutreachPreferencesTos;
    } });
    var Filter_1 = require_Filter();
    Object.defineProperty(exports2, "Filter", { enumerable: true, get: function() {
      return Filter_1.Filter;
    } });
    var GetAgencyAgentsPaymentsQueryParams_1 = require_GetAgencyAgentsPaymentsQueryParams();
    Object.defineProperty(exports2, "GetAgencyAgentsPaymentsQueryParams", { enumerable: true, get: function() {
      return GetAgencyAgentsPaymentsQueryParams_1.GetAgencyAgentsPaymentsQueryParams;
    } });
    var GetAgencyCreatorQueryParams_1 = require_GetAgencyCreatorQueryParams();
    Object.defineProperty(exports2, "GetAgencyCreatorQueryParams", { enumerable: true, get: function() {
      return GetAgencyCreatorQueryParams_1.GetAgencyCreatorQueryParams;
    } });
    var GetCreatorsQueryParams_1 = require_GetCreatorsQueryParams();
    Object.defineProperty(exports2, "GetCreatorsQueryParams", { enumerable: true, get: function() {
      return GetCreatorsQueryParams_1.GetCreatorsQueryParams;
    } });
    var GetCreatorSuggestedDetailsWithReviewRes_1 = require_GetCreatorSuggestedDetailsWithReviewRes();
    Object.defineProperty(exports2, "GetCreatorSuggestedDetailsWithReviewRes", { enumerable: true, get: function() {
      return GetCreatorSuggestedDetailsWithReviewRes_1.GetCreatorSuggestedDetailsWithReviewRes;
    } });
    var GetJobRes_1 = require_GetJobRes();
    Object.defineProperty(exports2, "GetJobRes", { enumerable: true, get: function() {
      return GetJobRes_1.GetJobRes;
    } });
    var ImportCreatorCSVLineResponse_1 = require_ImportCreatorCSVLineResponse();
    Object.defineProperty(exports2, "ImportCreatorCSVLineResponse", { enumerable: true, get: function() {
      return ImportCreatorCSVLineResponse_1.ImportCreatorCSVLineResponse;
    } });
    var ImportCreatorDetailCSVRequest_1 = require_ImportCreatorDetailCSVRequest();
    Object.defineProperty(exports2, "ImportCreatorDetailCSVRequest", { enumerable: true, get: function() {
      return ImportCreatorDetailCSVRequest_1.ImportCreatorDetailCSVRequest;
    } });
    var ListAgencyRequestFilters_1 = require_ListAgencyRequestFilters();
    Object.defineProperty(exports2, "ListAgencyRequestFilters", { enumerable: true, get: function() {
      return ListAgencyRequestFilters_1.ListAgencyRequestFilters;
    } });
    var ListAgentCreatorsQueryParam_1 = require_ListAgentCreatorsQueryParam();
    Object.defineProperty(exports2, "ListAgentCreatorsQueryParam", { enumerable: true, get: function() {
      return ListAgentCreatorsQueryParam_1.ListAgentCreatorsQueryParam;
    } });
    var ListAgentsRequestFilters_1 = require_ListAgentsRequestFilters();
    Object.defineProperty(exports2, "ListAgentsRequestFilters", { enumerable: true, get: function() {
      return ListAgentsRequestFilters_1.ListAgentsRequestFilters;
    } });
    var ListAuditLogsQueryParams_1 = require_ListAuditLogsQueryParams();
    Object.defineProperty(exports2, "ListAuditLogsQueryParams", { enumerable: true, get: function() {
      return ListAuditLogsQueryParams_1.ListAuditLogsQueryParams;
    } });
    var ListCreatorsBlocklistRequestFilters_1 = require_ListCreatorsBlocklistRequestFilters();
    Object.defineProperty(exports2, "ListCreatorsBlocklistRequestFilters", { enumerable: true, get: function() {
      return ListCreatorsBlocklistRequestFilters_1.ListCreatorsBlocklistRequestFilters;
    } });
    var ListManagersRequestFilters_1 = require_ListManagersRequestFilters();
    Object.defineProperty(exports2, "ListManagersRequestFilters", { enumerable: true, get: function() {
      return ListManagersRequestFilters_1.ListManagersRequestFilters;
    } });
    var ListManagerTeamsRequestFilters_1 = require_ListManagerTeamsRequestFilters();
    Object.defineProperty(exports2, "ListManagerTeamsRequestFilters", { enumerable: true, get: function() {
      return ListManagerTeamsRequestFilters_1.ListManagerTeamsRequestFilters;
    } });
    var ListNotificationsRequest_1 = require_ListNotificationsRequest();
    Object.defineProperty(exports2, "ListNotificationsRequest", { enumerable: true, get: function() {
      return ListNotificationsRequest_1.ListNotificationsRequest;
    } });
    var ManagerSocialResponse_1 = require_ManagerSocialResponse();
    Object.defineProperty(exports2, "ManagerSocialResponse", { enumerable: true, get: function() {
      return ManagerSocialResponse_1.ManagerSocialResponse;
    } });
    var ManagerTeamRelationshipResponse_1 = require_ManagerTeamRelationshipResponse();
    Object.defineProperty(exports2, "ManagerTeamRelationshipResponse", { enumerable: true, get: function() {
      return ManagerTeamRelationshipResponse_1.ManagerTeamRelationshipResponse;
    } });
    var ManagerTeamResponse_1 = require_ManagerTeamResponse();
    Object.defineProperty(exports2, "ManagerTeamResponse", { enumerable: true, get: function() {
      return ManagerTeamResponse_1.ManagerTeamResponse;
    } });
    var NewImportJobRequest_1 = require_NewImportJobRequest();
    Object.defineProperty(exports2, "NewImportJobRequest", { enumerable: true, get: function() {
      return NewImportJobRequest_1.NewImportJobRequest;
    } });
    var NewImportJobResponse_1 = require_NewImportJobResponse();
    Object.defineProperty(exports2, "NewImportJobResponse", { enumerable: true, get: function() {
      return NewImportJobResponse_1.NewImportJobResponse;
    } });
    var NotificationResponse_1 = require_NotificationResponse();
    Object.defineProperty(exports2, "NotificationResponse", { enumerable: true, get: function() {
      return NotificationResponse_1.NotificationResponse;
    } });
    var PaymentOverviewResponse_1 = require_PaymentOverviewResponse();
    Object.defineProperty(exports2, "PaymentOverviewResponse", { enumerable: true, get: function() {
      return PaymentOverviewResponse_1.PaymentOverviewResponse;
    } });
    var SavedViewResponse_1 = require_SavedViewResponse();
    Object.defineProperty(exports2, "SavedViewResponse", { enumerable: true, get: function() {
      return SavedViewResponse_1.SavedViewResponse;
    } });
    var SearchField_1 = require_SearchField();
    Object.defineProperty(exports2, "SearchField", { enumerable: true, get: function() {
      return SearchField_1.SearchField;
    } });
    var SearchFieldArg_1 = require_SearchFieldArg();
    Object.defineProperty(exports2, "SearchFieldArg", { enumerable: true, get: function() {
      return SearchFieldArg_1.SearchFieldArg;
    } });
    var SearchPaymentRequest_1 = require_SearchPaymentRequest();
    Object.defineProperty(exports2, "SearchPaymentRequest", { enumerable: true, get: function() {
      return SearchPaymentRequest_1.SearchPaymentRequest;
    } });
    var SearchRequest_1 = require_SearchRequest();
    Object.defineProperty(exports2, "SearchRequest", { enumerable: true, get: function() {
      return SearchRequest_1.SearchRequest;
    } });
    var SecondaryEmailsMeta_1 = require_SecondaryEmailsMeta();
    Object.defineProperty(exports2, "SecondaryEmailsMeta", { enumerable: true, get: function() {
      return SecondaryEmailsMeta_1.SecondaryEmailsMeta;
    } });
    var SEReviewDetailsRquest_1 = require_SEReviewDetailsRquest();
    Object.defineProperty(exports2, "SEReviewDetailsRquest", { enumerable: true, get: function() {
      return SEReviewDetailsRquest_1.SEReviewDetailsRquest;
    } });
    var UpdateAgenciesSEInformation_1 = require_UpdateAgenciesSEInformation();
    Object.defineProperty(exports2, "UpdateAgenciesSEInformation", { enumerable: true, get: function() {
      return UpdateAgenciesSEInformation_1.UpdateAgenciesSEInformation;
    } });
    var UpdateAgencySocialMedia_1 = require_UpdateAgencySocialMedia();
    Object.defineProperty(exports2, "UpdateAgencySocialMedia", { enumerable: true, get: function() {
      return UpdateAgencySocialMedia_1.UpdateAgencySocialMedia;
    } });
    var UpdateAgentSEInformation_1 = require_UpdateAgentSEInformation();
    Object.defineProperty(exports2, "UpdateAgentSEInformation", { enumerable: true, get: function() {
      return UpdateAgentSEInformation_1.UpdateAgentSEInformation;
    } });
    var UpdateAgentSocialMedia_1 = require_UpdateAgentSocialMedia();
    Object.defineProperty(exports2, "UpdateAgentSocialMedia", { enumerable: true, get: function() {
      return UpdateAgentSocialMedia_1.UpdateAgentSocialMedia;
    } });
    var UpdateCreatorEmailStats_1 = require_UpdateCreatorEmailStats();
    Object.defineProperty(exports2, "UpdateCreatorEmailStats", { enumerable: true, get: function() {
      return UpdateCreatorEmailStats_1.UpdateCreatorEmailStats;
    } });
    var UpdateCreatorOutreach_1 = require_UpdateCreatorOutreach();
    Object.defineProperty(exports2, "UpdateCreatorOutreach", { enumerable: true, get: function() {
      return UpdateCreatorOutreach_1.UpdateCreatorOutreach;
    } });
    var UpdateCreatorSocial_1 = require_UpdateCreatorSocial();
    Object.defineProperty(exports2, "UpdateCreatorSocial", { enumerable: true, get: function() {
      return UpdateCreatorSocial_1.UpdateCreatorSocial;
    } });
    var UpdateManagerSocialRequest_1 = require_UpdateManagerSocialRequest();
    Object.defineProperty(exports2, "UpdateManagerSocialRequest", { enumerable: true, get: function() {
      return UpdateManagerSocialRequest_1.UpdateManagerSocialRequest;
    } });
    var UpdateManagerSocialResponse_1 = require_UpdateManagerSocialResponse();
    Object.defineProperty(exports2, "UpdateManagerSocialResponse", { enumerable: true, get: function() {
      return UpdateManagerSocialResponse_1.UpdateManagerSocialResponse;
    } });
    var UpdateManagerTeamRelationshipRequest_1 = require_UpdateManagerTeamRelationshipRequest();
    Object.defineProperty(exports2, "UpdateManagerTeamRelationshipRequest", { enumerable: true, get: function() {
      return UpdateManagerTeamRelationshipRequest_1.UpdateManagerTeamRelationshipRequest;
    } });
    var UpdateNotificationsStatusRequest_1 = require_UpdateNotificationsStatusRequest();
    Object.defineProperty(exports2, "UpdateNotificationsStatusRequest", { enumerable: true, get: function() {
      return UpdateNotificationsStatusRequest_1.UpdateNotificationsStatusRequest;
    } });
    var UpsertManagerToTeamRequest_1 = require_UpsertManagerToTeamRequest();
    Object.defineProperty(exports2, "UpsertManagerToTeamRequest", { enumerable: true, get: function() {
      return UpsertManagerToTeamRequest_1.UpsertManagerToTeamRequest;
    } });
    var UpsertManagerToTeamResponse_1 = require_UpsertManagerToTeamResponse();
    Object.defineProperty(exports2, "UpsertManagerToTeamResponse", { enumerable: true, get: function() {
      return UpsertManagerToTeamResponse_1.UpsertManagerToTeamResponse;
    } });
    var UpsertSavedViewRequest_1 = require_UpsertSavedViewRequest();
    Object.defineProperty(exports2, "UpsertSavedViewRequest", { enumerable: true, get: function() {
      return UpsertSavedViewRequest_1.UpsertSavedViewRequest;
    } });
    var AgenciesService_1 = require_AgenciesService();
    Object.defineProperty(exports2, "AgenciesService", { enumerable: true, get: function() {
      return AgenciesService_1.AgenciesService;
    } });
    var AgenciesMutationService_1 = require_AgenciesMutationService();
    Object.defineProperty(exports2, "AgenciesMutationService", { enumerable: true, get: function() {
      return AgenciesMutationService_1.AgenciesMutationService;
    } });
    var AgencySocialsService_1 = require_AgencySocialsService();
    Object.defineProperty(exports2, "AgencySocialsService", { enumerable: true, get: function() {
      return AgencySocialsService_1.AgencySocialsService;
    } });
    var AgentsService_1 = require_AgentsService();
    Object.defineProperty(exports2, "AgentsService", { enumerable: true, get: function() {
      return AgentsService_1.AgentsService;
    } });
    var AgentSocialsService_1 = require_AgentSocialsService();
    Object.defineProperty(exports2, "AgentSocialsService", { enumerable: true, get: function() {
      return AgentSocialsService_1.AgentSocialsService;
    } });
    var AudienceJourneyService_1 = require_AudienceJourneyService();
    Object.defineProperty(exports2, "AudienceJourneyService", { enumerable: true, get: function() {
      return AudienceJourneyService_1.AudienceJourneyService;
    } });
    var AuditLogsService_1 = require_AuditLogsService();
    Object.defineProperty(exports2, "AuditLogsService", { enumerable: true, get: function() {
      return AuditLogsService_1.AuditLogsService;
    } });
    var BlocklistService_1 = require_BlocklistService();
    Object.defineProperty(exports2, "BlocklistService", { enumerable: true, get: function() {
      return BlocklistService_1.BlocklistService;
    } });
    var ChannelsService_1 = require_ChannelsService();
    Object.defineProperty(exports2, "ChannelsService", { enumerable: true, get: function() {
      return ChannelsService_1.ChannelsService;
    } });
    var CreatorAgenciesService_1 = require_CreatorAgenciesService();
    Object.defineProperty(exports2, "CreatorAgenciesService", { enumerable: true, get: function() {
      return CreatorAgenciesService_1.CreatorAgenciesService;
    } });
    var CreatorMergeService_1 = require_CreatorMergeService();
    Object.defineProperty(exports2, "CreatorMergeService", { enumerable: true, get: function() {
      return CreatorMergeService_1.CreatorMergeService;
    } });
    var CreatorProgramsService_1 = require_CreatorProgramsService();
    Object.defineProperty(exports2, "CreatorProgramsService", { enumerable: true, get: function() {
      return CreatorProgramsService_1.CreatorProgramsService;
    } });
    var CreatorsService_1 = require_CreatorsService();
    Object.defineProperty(exports2, "CreatorsService", { enumerable: true, get: function() {
      return CreatorsService_1.CreatorsService;
    } });
    var CreatorSeRelationshipService_1 = require_CreatorSeRelationshipService();
    Object.defineProperty(exports2, "CreatorSeRelationshipService", { enumerable: true, get: function() {
      return CreatorSeRelationshipService_1.CreatorSeRelationshipService;
    } });
    var CreatorsImportService_1 = require_CreatorsImportService();
    Object.defineProperty(exports2, "CreatorsImportService", { enumerable: true, get: function() {
      return CreatorsImportService_1.CreatorsImportService;
    } });
    var CreatorsInternalService_1 = require_CreatorsInternalService();
    Object.defineProperty(exports2, "CreatorsInternalService", { enumerable: true, get: function() {
      return CreatorsInternalService_1.CreatorsInternalService;
    } });
    var CreatorSocialsService_1 = require_CreatorSocialsService();
    Object.defineProperty(exports2, "CreatorSocialsService", { enumerable: true, get: function() {
      return CreatorSocialsService_1.CreatorSocialsService;
    } });
    var CreatorSuggestedDetailsService_1 = require_CreatorSuggestedDetailsService();
    Object.defineProperty(exports2, "CreatorSuggestedDetailsService", { enumerable: true, get: function() {
      return CreatorSuggestedDetailsService_1.CreatorSuggestedDetailsService;
    } });
    var HealthService_1 = require_HealthService();
    Object.defineProperty(exports2, "HealthService", { enumerable: true, get: function() {
      return HealthService_1.HealthService;
    } });
    var JobsService_1 = require_JobsService();
    Object.defineProperty(exports2, "JobsService", { enumerable: true, get: function() {
      return JobsService_1.JobsService;
    } });
    var ManagersService_1 = require_ManagersService();
    Object.defineProperty(exports2, "ManagersService", { enumerable: true, get: function() {
      return ManagersService_1.ManagersService;
    } });
    var ManagerSocialsService_1 = require_ManagerSocialsService();
    Object.defineProperty(exports2, "ManagerSocialsService", { enumerable: true, get: function() {
      return ManagerSocialsService_1.ManagerSocialsService;
    } });
    var ManagersTeamsService_1 = require_ManagersTeamsService();
    Object.defineProperty(exports2, "ManagersTeamsService", { enumerable: true, get: function() {
      return ManagersTeamsService_1.ManagersTeamsService;
    } });
    var NotesService_1 = require_NotesService();
    Object.defineProperty(exports2, "NotesService", { enumerable: true, get: function() {
      return NotesService_1.NotesService;
    } });
    var NotesCommentsService_1 = require_NotesCommentsService();
    Object.defineProperty(exports2, "NotesCommentsService", { enumerable: true, get: function() {
      return NotesCommentsService_1.NotesCommentsService;
    } });
    var NotificationsService_1 = require_NotificationsService();
    Object.defineProperty(exports2, "NotificationsService", { enumerable: true, get: function() {
      return NotificationsService_1.NotificationsService;
    } });
    var PaymentsService_1 = require_PaymentsService();
    Object.defineProperty(exports2, "PaymentsService", { enumerable: true, get: function() {
      return PaymentsService_1.PaymentsService;
    } });
    var PermissionsService_1 = require_PermissionsService();
    Object.defineProperty(exports2, "PermissionsService", { enumerable: true, get: function() {
      return PermissionsService_1.PermissionsService;
    } });
    var ProgramsService_1 = require_ProgramsService();
    Object.defineProperty(exports2, "ProgramsService", { enumerable: true, get: function() {
      return ProgramsService_1.ProgramsService;
    } });
    var PublicCreatorContactService_1 = require_PublicCreatorContactService();
    Object.defineProperty(exports2, "PublicCreatorContactService", { enumerable: true, get: function() {
      return PublicCreatorContactService_1.PublicCreatorContactService;
    } });
    var PublicCreatorDetailsService_1 = require_PublicCreatorDetailsService();
    Object.defineProperty(exports2, "PublicCreatorDetailsService", { enumerable: true, get: function() {
      return PublicCreatorDetailsService_1.PublicCreatorDetailsService;
    } });
    var PublicCreatorOutreachService_1 = require_PublicCreatorOutreachService();
    Object.defineProperty(exports2, "PublicCreatorOutreachService", { enumerable: true, get: function() {
      return PublicCreatorOutreachService_1.PublicCreatorOutreachService;
    } });
    var PublicCreatorsService_1 = require_PublicCreatorsService();
    Object.defineProperty(exports2, "PublicCreatorsService", { enumerable: true, get: function() {
      return PublicCreatorsService_1.PublicCreatorsService;
    } });
    var SavedViewsService_1 = require_SavedViewsService();
    Object.defineProperty(exports2, "SavedViewsService", { enumerable: true, get: function() {
      return SavedViewsService_1.SavedViewsService;
    } });
    var SearchCreatorService_1 = require_SearchCreatorService();
    Object.defineProperty(exports2, "SearchCreatorService", { enumerable: true, get: function() {
      return SearchCreatorService_1.SearchCreatorService;
    } });
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/core/BaseHttpRequest.js
var require_BaseHttpRequest2 = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/core/BaseHttpRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BaseHttpRequest = void 0;
    var BaseHttpRequest = class {
      constructor(config) {
        this.config = config;
      }
    };
    exports2.BaseHttpRequest = BaseHttpRequest;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/core/ApiError.js
var require_ApiError2 = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/core/ApiError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ApiError = void 0;
    var ApiError = class extends Error {
      constructor(response, message) {
        super(message);
        this.name = "ApiError";
        this.url = response.url;
        this.status = response.status;
        this.statusText = response.statusText;
        this.body = response.body;
      }
    };
    exports2.ApiError = ApiError;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/core/CancelablePromise.js
var require_CancelablePromise2 = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/core/CancelablePromise.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CancelablePromise = exports2.CancelError = void 0;
    var CancelError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "CancelError";
      }
      get isCancelled() {
        return true;
      }
    };
    exports2.CancelError = CancelError;
    var CancelablePromise = class {
      constructor(executor) {
        this._isResolved = false;
        this._isRejected = false;
        this._isCancelled = false;
        this._cancelHandlers = [];
        this._promise = new Promise((resolve, reject) => {
          this._resolve = resolve;
          this._reject = reject;
          const onResolve = (value) => {
            if (this._isResolved || this._isRejected || this._isCancelled) {
              return;
            }
            this._isResolved = true;
            this._resolve?.(value);
          };
          const onReject = (reason) => {
            if (this._isResolved || this._isRejected || this._isCancelled) {
              return;
            }
            this._isRejected = true;
            this._reject?.(reason);
          };
          const onCancel = (cancelHandler) => {
            if (this._isResolved || this._isRejected || this._isCancelled) {
              return;
            }
            this._cancelHandlers.push(cancelHandler);
          };
          Object.defineProperty(onCancel, "isResolved", {
            get: () => this._isResolved
          });
          Object.defineProperty(onCancel, "isRejected", {
            get: () => this._isRejected
          });
          Object.defineProperty(onCancel, "isCancelled", {
            get: () => this._isCancelled
          });
          return executor(onResolve, onReject, onCancel);
        });
      }
      then(onFulfilled, onRejected) {
        return this._promise.then(onFulfilled, onRejected);
      }
      catch(onRejected) {
        return this._promise.catch(onRejected);
      }
      finally(onFinally) {
        return this._promise.finally(onFinally);
      }
      cancel() {
        if (this._isResolved || this._isRejected || this._isCancelled) {
          return;
        }
        this._isCancelled = true;
        if (this._cancelHandlers.length) {
          try {
            for (const cancelHandler of this._cancelHandlers) {
              cancelHandler();
            }
          } catch (error) {
            console.warn("Cancellation threw an error", error);
            return;
          }
        }
        this._cancelHandlers.length = 0;
        this._reject?.(new CancelError("Request aborted"));
      }
      get isCancelled() {
        return this._isCancelled;
      }
    };
    exports2.CancelablePromise = CancelablePromise;
  }
});

// node_modules/es-errors/type.js
var require_type = __commonJS({
  "node_modules/es-errors/type.js"(exports2, module2) {
    "use strict";
    module2.exports = TypeError;
  }
});

// node_modules/object-inspect/util.inspect.js
var require_util_inspect = __commonJS({
  "node_modules/object-inspect/util.inspect.js"(exports2, module2) {
    module2.exports = require("util").inspect;
  }
});

// node_modules/object-inspect/index.js
var require_object_inspect = __commonJS({
  "node_modules/object-inspect/index.js"(exports2, module2) {
    var hasMap = typeof Map === "function" && Map.prototype;
    var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null;
    var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === "function" ? mapSizeDescriptor.get : null;
    var mapForEach = hasMap && Map.prototype.forEach;
    var hasSet = typeof Set === "function" && Set.prototype;
    var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null;
    var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === "function" ? setSizeDescriptor.get : null;
    var setForEach = hasSet && Set.prototype.forEach;
    var hasWeakMap = typeof WeakMap === "function" && WeakMap.prototype;
    var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
    var hasWeakSet = typeof WeakSet === "function" && WeakSet.prototype;
    var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
    var hasWeakRef = typeof WeakRef === "function" && WeakRef.prototype;
    var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
    var booleanValueOf = Boolean.prototype.valueOf;
    var objectToString = Object.prototype.toString;
    var functionToString = Function.prototype.toString;
    var $match = String.prototype.match;
    var $slice = String.prototype.slice;
    var $replace = String.prototype.replace;
    var $toUpperCase = String.prototype.toUpperCase;
    var $toLowerCase = String.prototype.toLowerCase;
    var $test = RegExp.prototype.test;
    var $concat = Array.prototype.concat;
    var $join = Array.prototype.join;
    var $arrSlice = Array.prototype.slice;
    var $floor = Math.floor;
    var bigIntValueOf = typeof BigInt === "function" ? BigInt.prototype.valueOf : null;
    var gOPS = Object.getOwnPropertySymbols;
    var symToString = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol.prototype.toString : null;
    var hasShammedSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "object";
    var toStringTag = typeof Symbol === "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? "object" : "symbol") ? Symbol.toStringTag : null;
    var isEnumerable = Object.prototype.propertyIsEnumerable;
    var gPO = (typeof Reflect === "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(O) {
      return O.__proto__;
    } : null);
    function addNumericSeparator(num, str) {
      if (num === Infinity || num === -Infinity || num !== num || num && num > -1e3 && num < 1e3 || $test.call(/e/, str)) {
        return str;
      }
      var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
      if (typeof num === "number") {
        var int = num < 0 ? -$floor(-num) : $floor(num);
        if (int !== num) {
          var intStr = String(int);
          var dec = $slice.call(str, intStr.length + 1);
          return $replace.call(intStr, sepRegex, "$&_") + "." + $replace.call($replace.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
        }
      }
      return $replace.call(str, sepRegex, "$&_");
    }
    var utilInspect = require_util_inspect();
    var inspectCustom = utilInspect.custom;
    var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;
    var quotes = {
      __proto__: null,
      "double": '"',
      single: "'"
    };
    var quoteREs = {
      __proto__: null,
      "double": /(["\\])/g,
      single: /(['\\])/g
    };
    module2.exports = function inspect_(obj, options, depth, seen) {
      var opts = options || {};
      if (has(opts, "quoteStyle") && !has(quotes, opts.quoteStyle)) {
        throw new TypeError('option "quoteStyle" must be "single" or "double"');
      }
      if (has(opts, "maxStringLength") && (typeof opts.maxStringLength === "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
        throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
      }
      var customInspect = has(opts, "customInspect") ? opts.customInspect : true;
      if (typeof customInspect !== "boolean" && customInspect !== "symbol") {
        throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");
      }
      if (has(opts, "indent") && opts.indent !== null && opts.indent !== "	" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
        throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
      }
      if (has(opts, "numericSeparator") && typeof opts.numericSeparator !== "boolean") {
        throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
      }
      var numericSeparator = opts.numericSeparator;
      if (typeof obj === "undefined") {
        return "undefined";
      }
      if (obj === null) {
        return "null";
      }
      if (typeof obj === "boolean") {
        return obj ? "true" : "false";
      }
      if (typeof obj === "string") {
        return inspectString(obj, opts);
      }
      if (typeof obj === "number") {
        if (obj === 0) {
          return Infinity / obj > 0 ? "0" : "-0";
        }
        var str = String(obj);
        return numericSeparator ? addNumericSeparator(obj, str) : str;
      }
      if (typeof obj === "bigint") {
        var bigIntStr = String(obj) + "n";
        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
      }
      var maxDepth = typeof opts.depth === "undefined" ? 5 : opts.depth;
      if (typeof depth === "undefined") {
        depth = 0;
      }
      if (depth >= maxDepth && maxDepth > 0 && typeof obj === "object") {
        return isArray(obj) ? "[Array]" : "[Object]";
      }
      var indent = getIndent(opts, depth);
      if (typeof seen === "undefined") {
        seen = [];
      } else if (indexOf(seen, obj) >= 0) {
        return "[Circular]";
      }
      function inspect(value, from, noIndent) {
        if (from) {
          seen = $arrSlice.call(seen);
          seen.push(from);
        }
        if (noIndent) {
          var newOpts = {
            depth: opts.depth
          };
          if (has(opts, "quoteStyle")) {
            newOpts.quoteStyle = opts.quoteStyle;
          }
          return inspect_(value, newOpts, depth + 1, seen);
        }
        return inspect_(value, opts, depth + 1, seen);
      }
      if (typeof obj === "function" && !isRegExp(obj)) {
        var name = nameOf(obj);
        var keys = arrObjKeys(obj, inspect);
        return "[Function" + (name ? ": " + name : " (anonymous)") + "]" + (keys.length > 0 ? " { " + $join.call(keys, ", ") + " }" : "");
      }
      if (isSymbol(obj)) {
        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
        return typeof obj === "object" && !hasShammedSymbols ? markBoxed(symString) : symString;
      }
      if (isElement(obj)) {
        var s = "<" + $toLowerCase.call(String(obj.nodeName));
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
          s += " " + attrs[i].name + "=" + wrapQuotes(quote(attrs[i].value), "double", opts);
        }
        s += ">";
        if (obj.childNodes && obj.childNodes.length) {
          s += "...";
        }
        s += "</" + $toLowerCase.call(String(obj.nodeName)) + ">";
        return s;
      }
      if (isArray(obj)) {
        if (obj.length === 0) {
          return "[]";
        }
        var xs = arrObjKeys(obj, inspect);
        if (indent && !singleLineValues(xs)) {
          return "[" + indentedJoin(xs, indent) + "]";
        }
        return "[ " + $join.call(xs, ", ") + " ]";
      }
      if (isError(obj)) {
        var parts = arrObjKeys(obj, inspect);
        if (!("cause" in Error.prototype) && "cause" in obj && !isEnumerable.call(obj, "cause")) {
          return "{ [" + String(obj) + "] " + $join.call($concat.call("[cause]: " + inspect(obj.cause), parts), ", ") + " }";
        }
        if (parts.length === 0) {
          return "[" + String(obj) + "]";
        }
        return "{ [" + String(obj) + "] " + $join.call(parts, ", ") + " }";
      }
      if (typeof obj === "object" && customInspect) {
        if (inspectSymbol && typeof obj[inspectSymbol] === "function" && utilInspect) {
          return utilInspect(obj, { depth: maxDepth - depth });
        } else if (customInspect !== "symbol" && typeof obj.inspect === "function") {
          return obj.inspect();
        }
      }
      if (isMap(obj)) {
        var mapParts = [];
        if (mapForEach) {
          mapForEach.call(obj, function(value, key) {
            mapParts.push(inspect(key, obj, true) + " => " + inspect(value, obj));
          });
        }
        return collectionOf("Map", mapSize.call(obj), mapParts, indent);
      }
      if (isSet(obj)) {
        var setParts = [];
        if (setForEach) {
          setForEach.call(obj, function(value) {
            setParts.push(inspect(value, obj));
          });
        }
        return collectionOf("Set", setSize.call(obj), setParts, indent);
      }
      if (isWeakMap(obj)) {
        return weakCollectionOf("WeakMap");
      }
      if (isWeakSet(obj)) {
        return weakCollectionOf("WeakSet");
      }
      if (isWeakRef(obj)) {
        return weakCollectionOf("WeakRef");
      }
      if (isNumber(obj)) {
        return markBoxed(inspect(Number(obj)));
      }
      if (isBigInt(obj)) {
        return markBoxed(inspect(bigIntValueOf.call(obj)));
      }
      if (isBoolean(obj)) {
        return markBoxed(booleanValueOf.call(obj));
      }
      if (isString(obj)) {
        return markBoxed(inspect(String(obj)));
      }
      if (typeof window !== "undefined" && obj === window) {
        return "{ [object Window] }";
      }
      if (typeof globalThis !== "undefined" && obj === globalThis || typeof global !== "undefined" && obj === global) {
        return "{ [object globalThis] }";
      }
      if (!isDate(obj) && !isRegExp(obj)) {
        var ys = arrObjKeys(obj, inspect);
        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
        var protoTag = obj instanceof Object ? "" : "null prototype";
        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? "Object" : "";
        var constructorTag = isPlainObject || typeof obj.constructor !== "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "";
        var tag = constructorTag + (stringTag || protoTag ? "[" + $join.call($concat.call([], stringTag || [], protoTag || []), ": ") + "] " : "");
        if (ys.length === 0) {
          return tag + "{}";
        }
        if (indent) {
          return tag + "{" + indentedJoin(ys, indent) + "}";
        }
        return tag + "{ " + $join.call(ys, ", ") + " }";
      }
      return String(obj);
    };
    function wrapQuotes(s, defaultStyle, opts) {
      var style = opts.quoteStyle || defaultStyle;
      var quoteChar = quotes[style];
      return quoteChar + s + quoteChar;
    }
    function quote(s) {
      return $replace.call(String(s), /"/g, "&quot;");
    }
    function isArray(obj) {
      return toStr(obj) === "[object Array]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isDate(obj) {
      return toStr(obj) === "[object Date]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isRegExp(obj) {
      return toStr(obj) === "[object RegExp]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isError(obj) {
      return toStr(obj) === "[object Error]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isString(obj) {
      return toStr(obj) === "[object String]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isNumber(obj) {
      return toStr(obj) === "[object Number]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isBoolean(obj) {
      return toStr(obj) === "[object Boolean]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isSymbol(obj) {
      if (hasShammedSymbols) {
        return obj && typeof obj === "object" && obj instanceof Symbol;
      }
      if (typeof obj === "symbol") {
        return true;
      }
      if (!obj || typeof obj !== "object" || !symToString) {
        return false;
      }
      try {
        symToString.call(obj);
        return true;
      } catch (e) {
      }
      return false;
    }
    function isBigInt(obj) {
      if (!obj || typeof obj !== "object" || !bigIntValueOf) {
        return false;
      }
      try {
        bigIntValueOf.call(obj);
        return true;
      } catch (e) {
      }
      return false;
    }
    var hasOwn = Object.prototype.hasOwnProperty || function(key) {
      return key in this;
    };
    function has(obj, key) {
      return hasOwn.call(obj, key);
    }
    function toStr(obj) {
      return objectToString.call(obj);
    }
    function nameOf(f) {
      if (f.name) {
        return f.name;
      }
      var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
      if (m) {
        return m[1];
      }
      return null;
    }
    function indexOf(xs, x) {
      if (xs.indexOf) {
        return xs.indexOf(x);
      }
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) {
          return i;
        }
      }
      return -1;
    }
    function isMap(x) {
      if (!mapSize || !x || typeof x !== "object") {
        return false;
      }
      try {
        mapSize.call(x);
        try {
          setSize.call(x);
        } catch (s) {
          return true;
        }
        return x instanceof Map;
      } catch (e) {
      }
      return false;
    }
    function isWeakMap(x) {
      if (!weakMapHas || !x || typeof x !== "object") {
        return false;
      }
      try {
        weakMapHas.call(x, weakMapHas);
        try {
          weakSetHas.call(x, weakSetHas);
        } catch (s) {
          return true;
        }
        return x instanceof WeakMap;
      } catch (e) {
      }
      return false;
    }
    function isWeakRef(x) {
      if (!weakRefDeref || !x || typeof x !== "object") {
        return false;
      }
      try {
        weakRefDeref.call(x);
        return true;
      } catch (e) {
      }
      return false;
    }
    function isSet(x) {
      if (!setSize || !x || typeof x !== "object") {
        return false;
      }
      try {
        setSize.call(x);
        try {
          mapSize.call(x);
        } catch (m) {
          return true;
        }
        return x instanceof Set;
      } catch (e) {
      }
      return false;
    }
    function isWeakSet(x) {
      if (!weakSetHas || !x || typeof x !== "object") {
        return false;
      }
      try {
        weakSetHas.call(x, weakSetHas);
        try {
          weakMapHas.call(x, weakMapHas);
        } catch (s) {
          return true;
        }
        return x instanceof WeakSet;
      } catch (e) {
      }
      return false;
    }
    function isElement(x) {
      if (!x || typeof x !== "object") {
        return false;
      }
      if (typeof HTMLElement !== "undefined" && x instanceof HTMLElement) {
        return true;
      }
      return typeof x.nodeName === "string" && typeof x.getAttribute === "function";
    }
    function inspectString(str, opts) {
      if (str.length > opts.maxStringLength) {
        var remaining = str.length - opts.maxStringLength;
        var trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
      }
      var quoteRE = quoteREs[opts.quoteStyle || "single"];
      quoteRE.lastIndex = 0;
      var s = $replace.call($replace.call(str, quoteRE, "\\$1"), /[\x00-\x1f]/g, lowbyte);
      return wrapQuotes(s, "single", opts);
    }
    function lowbyte(c) {
      var n = c.charCodeAt(0);
      var x = {
        8: "b",
        9: "t",
        10: "n",
        12: "f",
        13: "r"
      }[n];
      if (x) {
        return "\\" + x;
      }
      return "\\x" + (n < 16 ? "0" : "") + $toUpperCase.call(n.toString(16));
    }
    function markBoxed(str) {
      return "Object(" + str + ")";
    }
    function weakCollectionOf(type) {
      return type + " { ? }";
    }
    function collectionOf(type, size, entries, indent) {
      var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ", ");
      return type + " (" + size + ") {" + joinedEntries + "}";
    }
    function singleLineValues(xs) {
      for (var i = 0; i < xs.length; i++) {
        if (indexOf(xs[i], "\n") >= 0) {
          return false;
        }
      }
      return true;
    }
    function getIndent(opts, depth) {
      var baseIndent;
      if (opts.indent === "	") {
        baseIndent = "	";
      } else if (typeof opts.indent === "number" && opts.indent > 0) {
        baseIndent = $join.call(Array(opts.indent + 1), " ");
      } else {
        return null;
      }
      return {
        base: baseIndent,
        prev: $join.call(Array(depth + 1), baseIndent)
      };
    }
    function indentedJoin(xs, indent) {
      if (xs.length === 0) {
        return "";
      }
      var lineJoiner = "\n" + indent.prev + indent.base;
      return lineJoiner + $join.call(xs, "," + lineJoiner) + "\n" + indent.prev;
    }
    function arrObjKeys(obj, inspect) {
      var isArr = isArray(obj);
      var xs = [];
      if (isArr) {
        xs.length = obj.length;
        for (var i = 0; i < obj.length; i++) {
          xs[i] = has(obj, i) ? inspect(obj[i], obj) : "";
        }
      }
      var syms = typeof gOPS === "function" ? gOPS(obj) : [];
      var symMap;
      if (hasShammedSymbols) {
        symMap = {};
        for (var k = 0; k < syms.length; k++) {
          symMap["$" + syms[k]] = syms[k];
        }
      }
      for (var key in obj) {
        if (!has(obj, key)) {
          continue;
        }
        if (isArr && String(Number(key)) === key && key < obj.length) {
          continue;
        }
        if (hasShammedSymbols && symMap["$" + key] instanceof Symbol) {
          continue;
        } else if ($test.call(/[^\w$]/, key)) {
          xs.push(inspect(key, obj) + ": " + inspect(obj[key], obj));
        } else {
          xs.push(key + ": " + inspect(obj[key], obj));
        }
      }
      if (typeof gOPS === "function") {
        for (var j = 0; j < syms.length; j++) {
          if (isEnumerable.call(obj, syms[j])) {
            xs.push("[" + inspect(syms[j]) + "]: " + inspect(obj[syms[j]], obj));
          }
        }
      }
      return xs;
    }
  }
});

// node_modules/side-channel-list/index.js
var require_side_channel_list = __commonJS({
  "node_modules/side-channel-list/index.js"(exports2, module2) {
    "use strict";
    var inspect = require_object_inspect();
    var $TypeError = require_type();
    var listGetNode = function(list, key, isDelete) {
      var prev = list;
      var curr;
      for (; (curr = prev.next) != null; prev = curr) {
        if (curr.key === key) {
          prev.next = curr.next;
          if (!isDelete) {
            curr.next = /** @type {NonNullable<typeof list.next>} */
            list.next;
            list.next = curr;
          }
          return curr;
        }
      }
    };
    var listGet = function(objects, key) {
      if (!objects) {
        return void 0;
      }
      var node = listGetNode(objects, key);
      return node && node.value;
    };
    var listSet = function(objects, key, value) {
      var node = listGetNode(objects, key);
      if (node) {
        node.value = value;
      } else {
        objects.next = /** @type {import('./list.d.ts').ListNode<typeof value, typeof key>} */
        {
          // eslint-disable-line no-param-reassign, no-extra-parens
          key,
          next: objects.next,
          value
        };
      }
    };
    var listHas = function(objects, key) {
      if (!objects) {
        return false;
      }
      return !!listGetNode(objects, key);
    };
    var listDelete = function(objects, key) {
      if (objects) {
        return listGetNode(objects, key, true);
      }
    };
    module2.exports = function getSideChannelList() {
      var $o;
      var channel = {
        assert: function(key) {
          if (!channel.has(key)) {
            throw new $TypeError("Side channel does not contain " + inspect(key));
          }
        },
        "delete": function(key) {
          var root = $o && $o.next;
          var deletedNode = listDelete($o, key);
          if (deletedNode && root && root === deletedNode) {
            $o = void 0;
          }
          return !!deletedNode;
        },
        get: function(key) {
          return listGet($o, key);
        },
        has: function(key) {
          return listHas($o, key);
        },
        set: function(key, value) {
          if (!$o) {
            $o = {
              next: void 0
            };
          }
          listSet(
            /** @type {NonNullable<typeof $o>} */
            $o,
            key,
            value
          );
        }
      };
      return channel;
    };
  }
});

// node_modules/es-object-atoms/index.js
var require_es_object_atoms = __commonJS({
  "node_modules/es-object-atoms/index.js"(exports2, module2) {
    "use strict";
    module2.exports = Object;
  }
});

// node_modules/es-errors/index.js
var require_es_errors = __commonJS({
  "node_modules/es-errors/index.js"(exports2, module2) {
    "use strict";
    module2.exports = Error;
  }
});

// node_modules/es-errors/eval.js
var require_eval = __commonJS({
  "node_modules/es-errors/eval.js"(exports2, module2) {
    "use strict";
    module2.exports = EvalError;
  }
});

// node_modules/es-errors/range.js
var require_range = __commonJS({
  "node_modules/es-errors/range.js"(exports2, module2) {
    "use strict";
    module2.exports = RangeError;
  }
});

// node_modules/es-errors/ref.js
var require_ref = __commonJS({
  "node_modules/es-errors/ref.js"(exports2, module2) {
    "use strict";
    module2.exports = ReferenceError;
  }
});

// node_modules/es-errors/syntax.js
var require_syntax = __commonJS({
  "node_modules/es-errors/syntax.js"(exports2, module2) {
    "use strict";
    module2.exports = SyntaxError;
  }
});

// node_modules/es-errors/uri.js
var require_uri = __commonJS({
  "node_modules/es-errors/uri.js"(exports2, module2) {
    "use strict";
    module2.exports = URIError;
  }
});

// node_modules/math-intrinsics/abs.js
var require_abs = __commonJS({
  "node_modules/math-intrinsics/abs.js"(exports2, module2) {
    "use strict";
    module2.exports = Math.abs;
  }
});

// node_modules/math-intrinsics/floor.js
var require_floor = __commonJS({
  "node_modules/math-intrinsics/floor.js"(exports2, module2) {
    "use strict";
    module2.exports = Math.floor;
  }
});

// node_modules/math-intrinsics/max.js
var require_max = __commonJS({
  "node_modules/math-intrinsics/max.js"(exports2, module2) {
    "use strict";
    module2.exports = Math.max;
  }
});

// node_modules/math-intrinsics/min.js
var require_min = __commonJS({
  "node_modules/math-intrinsics/min.js"(exports2, module2) {
    "use strict";
    module2.exports = Math.min;
  }
});

// node_modules/math-intrinsics/pow.js
var require_pow = __commonJS({
  "node_modules/math-intrinsics/pow.js"(exports2, module2) {
    "use strict";
    module2.exports = Math.pow;
  }
});

// node_modules/gopd/gOPD.js
var require_gOPD = __commonJS({
  "node_modules/gopd/gOPD.js"(exports2, module2) {
    "use strict";
    module2.exports = Object.getOwnPropertyDescriptor;
  }
});

// node_modules/gopd/index.js
var require_gopd = __commonJS({
  "node_modules/gopd/index.js"(exports2, module2) {
    "use strict";
    var $gOPD = require_gOPD();
    if ($gOPD) {
      try {
        $gOPD([], "length");
      } catch (e) {
        $gOPD = null;
      }
    }
    module2.exports = $gOPD;
  }
});

// node_modules/es-define-property/index.js
var require_es_define_property = __commonJS({
  "node_modules/es-define-property/index.js"(exports2, module2) {
    "use strict";
    var $defineProperty = Object.defineProperty || false;
    if ($defineProperty) {
      try {
        $defineProperty({}, "a", { value: 1 });
      } catch (e) {
        $defineProperty = false;
      }
    }
    module2.exports = $defineProperty;
  }
});

// node_modules/has-symbols/shams.js
var require_shams = __commonJS({
  "node_modules/has-symbols/shams.js"(exports2, module2) {
    "use strict";
    module2.exports = function hasSymbols() {
      if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
        return false;
      }
      if (typeof Symbol.iterator === "symbol") {
        return true;
      }
      var obj = {};
      var sym = Symbol("test");
      var symObj = Object(sym);
      if (typeof sym === "string") {
        return false;
      }
      if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
        return false;
      }
      if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
        return false;
      }
      var symVal = 42;
      obj[sym] = symVal;
      for (var _ in obj) {
        return false;
      }
      if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
        return false;
      }
      if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
        return false;
      }
      var syms = Object.getOwnPropertySymbols(obj);
      if (syms.length !== 1 || syms[0] !== sym) {
        return false;
      }
      if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
        return false;
      }
      if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = (
          /** @type {PropertyDescriptor} */
          Object.getOwnPropertyDescriptor(obj, sym)
        );
        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
          return false;
        }
      }
      return true;
    };
  }
});

// node_modules/has-symbols/index.js
var require_has_symbols = __commonJS({
  "node_modules/has-symbols/index.js"(exports2, module2) {
    "use strict";
    var origSymbol = typeof Symbol !== "undefined" && Symbol;
    var hasSymbolSham = require_shams();
    module2.exports = function hasNativeSymbols() {
      if (typeof origSymbol !== "function") {
        return false;
      }
      if (typeof Symbol !== "function") {
        return false;
      }
      if (typeof origSymbol("foo") !== "symbol") {
        return false;
      }
      if (typeof Symbol("bar") !== "symbol") {
        return false;
      }
      return hasSymbolSham();
    };
  }
});

// node_modules/function-bind/implementation.js
var require_implementation = __commonJS({
  "node_modules/function-bind/implementation.js"(exports2, module2) {
    "use strict";
    var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
    var toStr = Object.prototype.toString;
    var max = Math.max;
    var funcType = "[object Function]";
    var concatty = function concatty2(a, b) {
      var arr = [];
      for (var i = 0; i < a.length; i += 1) {
        arr[i] = a[i];
      }
      for (var j = 0; j < b.length; j += 1) {
        arr[j + a.length] = b[j];
      }
      return arr;
    };
    var slicy = function slicy2(arrLike, offset) {
      var arr = [];
      for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
        arr[j] = arrLike[i];
      }
      return arr;
    };
    var joiny = function(arr, joiner) {
      var str = "";
      for (var i = 0; i < arr.length; i += 1) {
        str += arr[i];
        if (i + 1 < arr.length) {
          str += joiner;
        }
      }
      return str;
    };
    module2.exports = function bind(that) {
      var target = this;
      if (typeof target !== "function" || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
      }
      var args = slicy(arguments, 1);
      var bound;
      var binder = function() {
        if (this instanceof bound) {
          var result = target.apply(
            this,
            concatty(args, arguments)
          );
          if (Object(result) === result) {
            return result;
          }
          return this;
        }
        return target.apply(
          that,
          concatty(args, arguments)
        );
      };
      var boundLength = max(0, target.length - args.length);
      var boundArgs = [];
      for (var i = 0; i < boundLength; i++) {
        boundArgs[i] = "$" + i;
      }
      bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
      if (target.prototype) {
        var Empty = function Empty2() {
        };
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
      }
      return bound;
    };
  }
});

// node_modules/function-bind/index.js
var require_function_bind = __commonJS({
  "node_modules/function-bind/index.js"(exports2, module2) {
    "use strict";
    var implementation = require_implementation();
    module2.exports = Function.prototype.bind || implementation;
  }
});

// node_modules/call-bind-apply-helpers/functionCall.js
var require_functionCall = __commonJS({
  "node_modules/call-bind-apply-helpers/functionCall.js"(exports2, module2) {
    "use strict";
    module2.exports = Function.prototype.call;
  }
});

// node_modules/call-bind-apply-helpers/functionApply.js
var require_functionApply = __commonJS({
  "node_modules/call-bind-apply-helpers/functionApply.js"(exports2, module2) {
    "use strict";
    module2.exports = Function.prototype.apply;
  }
});

// node_modules/call-bind-apply-helpers/reflectApply.js
var require_reflectApply = __commonJS({
  "node_modules/call-bind-apply-helpers/reflectApply.js"(exports2, module2) {
    "use strict";
    module2.exports = typeof Reflect !== "undefined" && Reflect && Reflect.apply;
  }
});

// node_modules/call-bind-apply-helpers/actualApply.js
var require_actualApply = __commonJS({
  "node_modules/call-bind-apply-helpers/actualApply.js"(exports2, module2) {
    "use strict";
    var bind = require_function_bind();
    var $apply = require_functionApply();
    var $call = require_functionCall();
    var $reflectApply = require_reflectApply();
    module2.exports = $reflectApply || bind.call($call, $apply);
  }
});

// node_modules/call-bind-apply-helpers/index.js
var require_call_bind_apply_helpers = __commonJS({
  "node_modules/call-bind-apply-helpers/index.js"(exports2, module2) {
    "use strict";
    var bind = require_function_bind();
    var $TypeError = require_type();
    var $call = require_functionCall();
    var $actualApply = require_actualApply();
    module2.exports = function callBindBasic(args) {
      if (args.length < 1 || typeof args[0] !== "function") {
        throw new $TypeError("a function is required");
      }
      return $actualApply(bind, $call, args);
    };
  }
});

// node_modules/dunder-proto/get.js
var require_get = __commonJS({
  "node_modules/dunder-proto/get.js"(exports2, module2) {
    "use strict";
    var callBind = require_call_bind_apply_helpers();
    var gOPD = require_gopd();
    var hasProtoAccessor = (
      /** @type {{ __proto__?: typeof Array.prototype }} */
      [].__proto__ === Array.prototype
    );
    var desc = hasProtoAccessor && gOPD && gOPD(
      Object.prototype,
      /** @type {keyof typeof Object.prototype} */
      "__proto__"
    );
    var $Object = Object;
    var $getPrototypeOf = $Object.getPrototypeOf;
    module2.exports = desc && typeof desc.get === "function" ? callBind([desc.get]) : typeof $getPrototypeOf === "function" ? (
      /** @type {import('./get')} */
      function getDunder(value) {
        return $getPrototypeOf(value == null ? value : $Object(value));
      }
    ) : false;
  }
});

// node_modules/hasown/index.js
var require_hasown = __commonJS({
  "node_modules/hasown/index.js"(exports2, module2) {
    "use strict";
    var call = Function.prototype.call;
    var $hasOwn = Object.prototype.hasOwnProperty;
    var bind = require_function_bind();
    module2.exports = bind.call(call, $hasOwn);
  }
});

// node_modules/get-intrinsic/index.js
var require_get_intrinsic = __commonJS({
  "node_modules/get-intrinsic/index.js"(exports2, module2) {
    "use strict";
    var undefined2;
    var $Object = require_es_object_atoms();
    var $Error = require_es_errors();
    var $EvalError = require_eval();
    var $RangeError = require_range();
    var $ReferenceError = require_ref();
    var $SyntaxError = require_syntax();
    var $TypeError = require_type();
    var $URIError = require_uri();
    var abs = require_abs();
    var floor = require_floor();
    var max = require_max();
    var min = require_min();
    var pow = require_pow();
    var $Function = Function;
    var getEvalledConstructor = function(expressionSyntax) {
      try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
      } catch (e) {
      }
    };
    var $gOPD = require_gopd();
    var $defineProperty = require_es_define_property();
    var throwTypeError = function() {
      throw new $TypeError();
    };
    var ThrowTypeError = $gOPD ? function() {
      try {
        arguments.callee;
        return throwTypeError;
      } catch (calleeThrows) {
        try {
          return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
          return throwTypeError;
        }
      }
    }() : throwTypeError;
    var hasSymbols = require_has_symbols()();
    var getDunderProto = require_get();
    var getProto = typeof Reflect === "function" && Reflect.getPrototypeOf || $Object.getPrototypeOf || getDunderProto;
    var $apply = require_functionApply();
    var $call = require_functionCall();
    var needsEval = {};
    var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined2 : getProto(Uint8Array);
    var INTRINSICS = {
      __proto__: null,
      "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
      "%Array%": Array,
      "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
      "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined2,
      "%AsyncFromSyncIteratorPrototype%": undefined2,
      "%AsyncFunction%": needsEval,
      "%AsyncGenerator%": needsEval,
      "%AsyncGeneratorFunction%": needsEval,
      "%AsyncIteratorPrototype%": needsEval,
      "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
      "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
      "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined2 : BigInt64Array,
      "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined2 : BigUint64Array,
      "%Boolean%": Boolean,
      "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
      "%Date%": Date,
      "%decodeURI%": decodeURI,
      "%decodeURIComponent%": decodeURIComponent,
      "%encodeURI%": encodeURI,
      "%encodeURIComponent%": encodeURIComponent,
      "%Error%": $Error,
      "%eval%": eval,
      // eslint-disable-line no-eval
      "%EvalError%": $EvalError,
      "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
      "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
      "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
      "%Function%": $Function,
      "%GeneratorFunction%": needsEval,
      "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
      "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
      "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
      "%isFinite%": isFinite,
      "%isNaN%": isNaN,
      "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined2,
      "%JSON%": typeof JSON === "object" ? JSON : undefined2,
      "%Map%": typeof Map === "undefined" ? undefined2 : Map,
      "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
      "%Math%": Math,
      "%Number%": Number,
      "%Object%": $Object,
      "%Object.getOwnPropertyDescriptor%": $gOPD,
      "%parseFloat%": parseFloat,
      "%parseInt%": parseInt,
      "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
      "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
      "%RangeError%": $RangeError,
      "%ReferenceError%": $ReferenceError,
      "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
      "%RegExp%": RegExp,
      "%Set%": typeof Set === "undefined" ? undefined2 : Set,
      "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
      "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
      "%String%": String,
      "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined2,
      "%Symbol%": hasSymbols ? Symbol : undefined2,
      "%SyntaxError%": $SyntaxError,
      "%ThrowTypeError%": ThrowTypeError,
      "%TypedArray%": TypedArray,
      "%TypeError%": $TypeError,
      "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
      "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
      "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
      "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
      "%URIError%": $URIError,
      "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
      "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
      "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet,
      "%Function.prototype.call%": $call,
      "%Function.prototype.apply%": $apply,
      "%Object.defineProperty%": $defineProperty,
      "%Math.abs%": abs,
      "%Math.floor%": floor,
      "%Math.max%": max,
      "%Math.min%": min,
      "%Math.pow%": pow
    };
    if (getProto) {
      try {
        null.error;
      } catch (e) {
        errorProto = getProto(getProto(e));
        INTRINSICS["%Error.prototype%"] = errorProto;
      }
    }
    var errorProto;
    var doEval = function doEval2(name) {
      var value;
      if (name === "%AsyncFunction%") {
        value = getEvalledConstructor("async function () {}");
      } else if (name === "%GeneratorFunction%") {
        value = getEvalledConstructor("function* () {}");
      } else if (name === "%AsyncGeneratorFunction%") {
        value = getEvalledConstructor("async function* () {}");
      } else if (name === "%AsyncGenerator%") {
        var fn = doEval2("%AsyncGeneratorFunction%");
        if (fn) {
          value = fn.prototype;
        }
      } else if (name === "%AsyncIteratorPrototype%") {
        var gen = doEval2("%AsyncGenerator%");
        if (gen && getProto) {
          value = getProto(gen.prototype);
        }
      }
      INTRINSICS[name] = value;
      return value;
    };
    var LEGACY_ALIASES = {
      __proto__: null,
      "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
      "%ArrayPrototype%": ["Array", "prototype"],
      "%ArrayProto_entries%": ["Array", "prototype", "entries"],
      "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
      "%ArrayProto_keys%": ["Array", "prototype", "keys"],
      "%ArrayProto_values%": ["Array", "prototype", "values"],
      "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
      "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
      "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
      "%BooleanPrototype%": ["Boolean", "prototype"],
      "%DataViewPrototype%": ["DataView", "prototype"],
      "%DatePrototype%": ["Date", "prototype"],
      "%ErrorPrototype%": ["Error", "prototype"],
      "%EvalErrorPrototype%": ["EvalError", "prototype"],
      "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
      "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
      "%FunctionPrototype%": ["Function", "prototype"],
      "%Generator%": ["GeneratorFunction", "prototype"],
      "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
      "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
      "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
      "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
      "%JSONParse%": ["JSON", "parse"],
      "%JSONStringify%": ["JSON", "stringify"],
      "%MapPrototype%": ["Map", "prototype"],
      "%NumberPrototype%": ["Number", "prototype"],
      "%ObjectPrototype%": ["Object", "prototype"],
      "%ObjProto_toString%": ["Object", "prototype", "toString"],
      "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
      "%PromisePrototype%": ["Promise", "prototype"],
      "%PromiseProto_then%": ["Promise", "prototype", "then"],
      "%Promise_all%": ["Promise", "all"],
      "%Promise_reject%": ["Promise", "reject"],
      "%Promise_resolve%": ["Promise", "resolve"],
      "%RangeErrorPrototype%": ["RangeError", "prototype"],
      "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
      "%RegExpPrototype%": ["RegExp", "prototype"],
      "%SetPrototype%": ["Set", "prototype"],
      "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
      "%StringPrototype%": ["String", "prototype"],
      "%SymbolPrototype%": ["Symbol", "prototype"],
      "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
      "%TypedArrayPrototype%": ["TypedArray", "prototype"],
      "%TypeErrorPrototype%": ["TypeError", "prototype"],
      "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
      "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
      "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
      "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
      "%URIErrorPrototype%": ["URIError", "prototype"],
      "%WeakMapPrototype%": ["WeakMap", "prototype"],
      "%WeakSetPrototype%": ["WeakSet", "prototype"]
    };
    var bind = require_function_bind();
    var hasOwn = require_hasown();
    var $concat = bind.call($call, Array.prototype.concat);
    var $spliceApply = bind.call($apply, Array.prototype.splice);
    var $replace = bind.call($call, String.prototype.replace);
    var $strSlice = bind.call($call, String.prototype.slice);
    var $exec = bind.call($call, RegExp.prototype.exec);
    var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = function stringToPath2(string) {
      var first = $strSlice(string, 0, 1);
      var last = $strSlice(string, -1);
      if (first === "%" && last !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
      } else if (last === "%" && first !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
      }
      var result = [];
      $replace(string, rePropName, function(match, number, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
      });
      return result;
    };
    var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
      var intrinsicName = name;
      var alias;
      if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
      }
      if (hasOwn(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) {
          value = doEval(intrinsicName);
        }
        if (typeof value === "undefined" && !allowMissing) {
          throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
        }
        return {
          alias,
          name: intrinsicName,
          value
        };
      }
      throw new $SyntaxError("intrinsic " + name + " does not exist!");
    };
    module2.exports = function GetIntrinsic(name, allowMissing) {
      if (typeof name !== "string" || name.length === 0) {
        throw new $TypeError("intrinsic name must be a non-empty string");
      }
      if (arguments.length > 1 && typeof allowMissing !== "boolean") {
        throw new $TypeError('"allowMissing" argument must be a boolean');
      }
      if ($exec(/^%?[^%]*%?$/, name) === null) {
        throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
      }
      var parts = stringToPath(name);
      var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
      var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
      var intrinsicRealName = intrinsic.name;
      var value = intrinsic.value;
      var skipFurtherCaching = false;
      var alias = intrinsic.alias;
      if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([0, 1], alias));
      }
      for (var i = 1, isOwn = true; i < parts.length; i += 1) {
        var part = parts[i];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
          throw new $SyntaxError("property names with quotes must have matching quotes");
        }
        if (part === "constructor" || !isOwn) {
          skipFurtherCaching = true;
        }
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn(INTRINSICS, intrinsicRealName)) {
          value = INTRINSICS[intrinsicRealName];
        } else if (value != null) {
          if (!(part in value)) {
            if (!allowMissing) {
              throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
            }
            return void 0;
          }
          if ($gOPD && i + 1 >= parts.length) {
            var desc = $gOPD(value, part);
            isOwn = !!desc;
            if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
              value = desc.get;
            } else {
              value = value[part];
            }
          } else {
            isOwn = hasOwn(value, part);
            value = value[part];
          }
          if (isOwn && !skipFurtherCaching) {
            INTRINSICS[intrinsicRealName] = value;
          }
        }
      }
      return value;
    };
  }
});

// node_modules/define-data-property/index.js
var require_define_data_property = __commonJS({
  "node_modules/define-data-property/index.js"(exports2, module2) {
    "use strict";
    var $defineProperty = require_es_define_property();
    var $SyntaxError = require_syntax();
    var $TypeError = require_type();
    var gopd = require_gopd();
    module2.exports = function defineDataProperty(obj, property, value) {
      if (!obj || typeof obj !== "object" && typeof obj !== "function") {
        throw new $TypeError("`obj` must be an object or a function`");
      }
      if (typeof property !== "string" && typeof property !== "symbol") {
        throw new $TypeError("`property` must be a string or a symbol`");
      }
      if (arguments.length > 3 && typeof arguments[3] !== "boolean" && arguments[3] !== null) {
        throw new $TypeError("`nonEnumerable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 4 && typeof arguments[4] !== "boolean" && arguments[4] !== null) {
        throw new $TypeError("`nonWritable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 5 && typeof arguments[5] !== "boolean" && arguments[5] !== null) {
        throw new $TypeError("`nonConfigurable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 6 && typeof arguments[6] !== "boolean") {
        throw new $TypeError("`loose`, if provided, must be a boolean");
      }
      var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
      var nonWritable = arguments.length > 4 ? arguments[4] : null;
      var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
      var loose = arguments.length > 6 ? arguments[6] : false;
      var desc = !!gopd && gopd(obj, property);
      if ($defineProperty) {
        $defineProperty(obj, property, {
          configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
          enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
          value,
          writable: nonWritable === null && desc ? desc.writable : !nonWritable
        });
      } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {
        obj[property] = value;
      } else {
        throw new $SyntaxError("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
      }
    };
  }
});

// node_modules/has-property-descriptors/index.js
var require_has_property_descriptors = __commonJS({
  "node_modules/has-property-descriptors/index.js"(exports2, module2) {
    "use strict";
    var $defineProperty = require_es_define_property();
    var hasPropertyDescriptors = function hasPropertyDescriptors2() {
      return !!$defineProperty;
    };
    hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
      if (!$defineProperty) {
        return null;
      }
      try {
        return $defineProperty([], "length", { value: 1 }).length !== 1;
      } catch (e) {
        return true;
      }
    };
    module2.exports = hasPropertyDescriptors;
  }
});

// node_modules/set-function-length/index.js
var require_set_function_length = __commonJS({
  "node_modules/set-function-length/index.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var define = require_define_data_property();
    var hasDescriptors = require_has_property_descriptors()();
    var gOPD = require_gopd();
    var $TypeError = require_type();
    var $floor = GetIntrinsic("%Math.floor%");
    module2.exports = function setFunctionLength(fn, length) {
      if (typeof fn !== "function") {
        throw new $TypeError("`fn` is not a function");
      }
      if (typeof length !== "number" || length < 0 || length > 4294967295 || $floor(length) !== length) {
        throw new $TypeError("`length` must be a positive 32-bit integer");
      }
      var loose = arguments.length > 2 && !!arguments[2];
      var functionLengthIsConfigurable = true;
      var functionLengthIsWritable = true;
      if ("length" in fn && gOPD) {
        var desc = gOPD(fn, "length");
        if (desc && !desc.configurable) {
          functionLengthIsConfigurable = false;
        }
        if (desc && !desc.writable) {
          functionLengthIsWritable = false;
        }
      }
      if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
        if (hasDescriptors) {
          define(
            /** @type {Parameters<define>[0]} */
            fn,
            "length",
            length,
            true,
            true
          );
        } else {
          define(
            /** @type {Parameters<define>[0]} */
            fn,
            "length",
            length
          );
        }
      }
      return fn;
    };
  }
});

// node_modules/call-bind-apply-helpers/applyBind.js
var require_applyBind = __commonJS({
  "node_modules/call-bind-apply-helpers/applyBind.js"(exports2, module2) {
    "use strict";
    var bind = require_function_bind();
    var $apply = require_functionApply();
    var actualApply = require_actualApply();
    module2.exports = function applyBind() {
      return actualApply(bind, $apply, arguments);
    };
  }
});

// node_modules/call-bind/index.js
var require_call_bind = __commonJS({
  "node_modules/call-bind/index.js"(exports2, module2) {
    "use strict";
    var setFunctionLength = require_set_function_length();
    var $defineProperty = require_es_define_property();
    var callBindBasic = require_call_bind_apply_helpers();
    var applyBind = require_applyBind();
    module2.exports = function callBind(originalFunction) {
      var func = callBindBasic(arguments);
      var adjustedLength = originalFunction.length - (arguments.length - 1);
      return setFunctionLength(
        func,
        1 + (adjustedLength > 0 ? adjustedLength : 0),
        true
      );
    };
    if ($defineProperty) {
      $defineProperty(module2.exports, "apply", { value: applyBind });
    } else {
      module2.exports.apply = applyBind;
    }
  }
});

// node_modules/call-bound/index.js
var require_call_bound = __commonJS({
  "node_modules/call-bound/index.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBind = require_call_bind();
    var $indexOf = callBind(
      /** @type {typeof String.prototype.indexOf} */
      GetIntrinsic("String.prototype.indexOf")
    );
    module2.exports = function callBoundIntrinsic(name, allowMissing) {
      var intrinsic = (
        /** @type {Parameters<typeof callBind>[0]} */
        GetIntrinsic(name, !!allowMissing)
      );
      if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
        return callBind(intrinsic);
      }
      return intrinsic;
    };
  }
});

// node_modules/side-channel-map/index.js
var require_side_channel_map = __commonJS({
  "node_modules/side-channel-map/index.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBound = require_call_bound();
    var inspect = require_object_inspect();
    var $TypeError = require_type();
    var $Map = GetIntrinsic("%Map%", true);
    var $mapGet = callBound("Map.prototype.get", true);
    var $mapSet = callBound("Map.prototype.set", true);
    var $mapHas = callBound("Map.prototype.has", true);
    var $mapDelete = callBound("Map.prototype.delete", true);
    var $mapSize = callBound("Map.prototype.size", true);
    module2.exports = !!$Map && /** @type {Exclude<import('.'), false>} */
    function getSideChannelMap() {
      var $m;
      var channel = {
        assert: function(key) {
          if (!channel.has(key)) {
            throw new $TypeError("Side channel does not contain " + inspect(key));
          }
        },
        "delete": function(key) {
          if ($m) {
            var result = $mapDelete($m, key);
            if ($mapSize($m) === 0) {
              $m = void 0;
            }
            return result;
          }
          return false;
        },
        get: function(key) {
          if ($m) {
            return $mapGet($m, key);
          }
        },
        has: function(key) {
          if ($m) {
            return $mapHas($m, key);
          }
          return false;
        },
        set: function(key, value) {
          if (!$m) {
            $m = new $Map();
          }
          $mapSet($m, key, value);
        }
      };
      return channel;
    };
  }
});

// node_modules/side-channel-weakmap/index.js
var require_side_channel_weakmap = __commonJS({
  "node_modules/side-channel-weakmap/index.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBound = require_call_bound();
    var inspect = require_object_inspect();
    var getSideChannelMap = require_side_channel_map();
    var $TypeError = require_type();
    var $WeakMap = GetIntrinsic("%WeakMap%", true);
    var $weakMapGet = callBound("WeakMap.prototype.get", true);
    var $weakMapSet = callBound("WeakMap.prototype.set", true);
    var $weakMapHas = callBound("WeakMap.prototype.has", true);
    var $weakMapDelete = callBound("WeakMap.prototype.delete", true);
    module2.exports = $WeakMap ? (
      /** @type {Exclude<import('.'), false>} */
      function getSideChannelWeakMap() {
        var $wm;
        var $m;
        var channel = {
          assert: function(key) {
            if (!channel.has(key)) {
              throw new $TypeError("Side channel does not contain " + inspect(key));
            }
          },
          "delete": function(key) {
            if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
              if ($wm) {
                return $weakMapDelete($wm, key);
              }
            } else if (getSideChannelMap) {
              if ($m) {
                return $m["delete"](key);
              }
            }
            return false;
          },
          get: function(key) {
            if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
              if ($wm) {
                return $weakMapGet($wm, key);
              }
            }
            return $m && $m.get(key);
          },
          has: function(key) {
            if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
              if ($wm) {
                return $weakMapHas($wm, key);
              }
            }
            return !!$m && $m.has(key);
          },
          set: function(key, value) {
            if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
              if (!$wm) {
                $wm = new $WeakMap();
              }
              $weakMapSet($wm, key, value);
            } else if (getSideChannelMap) {
              if (!$m) {
                $m = getSideChannelMap();
              }
              $m.set(key, value);
            }
          }
        };
        return channel;
      }
    ) : getSideChannelMap;
  }
});

// node_modules/side-channel/index.js
var require_side_channel = __commonJS({
  "node_modules/side-channel/index.js"(exports2, module2) {
    "use strict";
    var $TypeError = require_type();
    var inspect = require_object_inspect();
    var getSideChannelList = require_side_channel_list();
    var getSideChannelMap = require_side_channel_map();
    var getSideChannelWeakMap = require_side_channel_weakmap();
    var makeChannel = getSideChannelWeakMap || getSideChannelMap || getSideChannelList;
    module2.exports = function getSideChannel() {
      var $channelData;
      var channel = {
        assert: function(key) {
          if (!channel.has(key)) {
            throw new $TypeError("Side channel does not contain " + inspect(key));
          }
        },
        "delete": function(key) {
          return !!$channelData && $channelData["delete"](key);
        },
        get: function(key) {
          return $channelData && $channelData.get(key);
        },
        has: function(key) {
          return !!$channelData && $channelData.has(key);
        },
        set: function(key, value) {
          if (!$channelData) {
            $channelData = makeChannel();
          }
          $channelData.set(key, value);
        }
      };
      return channel;
    };
  }
});

// node_modules/qs/lib/formats.js
var require_formats = __commonJS({
  "node_modules/qs/lib/formats.js"(exports2, module2) {
    "use strict";
    var replace = String.prototype.replace;
    var percentTwenties = /%20/g;
    var Format = {
      RFC1738: "RFC1738",
      RFC3986: "RFC3986"
    };
    module2.exports = {
      "default": Format.RFC3986,
      formatters: {
        RFC1738: function(value) {
          return replace.call(value, percentTwenties, "+");
        },
        RFC3986: function(value) {
          return String(value);
        }
      },
      RFC1738: Format.RFC1738,
      RFC3986: Format.RFC3986
    };
  }
});

// node_modules/qs/lib/utils.js
var require_utils2 = __commonJS({
  "node_modules/qs/lib/utils.js"(exports2, module2) {
    "use strict";
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var isArray = Array.isArray;
    var hexTable = function() {
      var array = [];
      for (var i = 0; i < 256; ++i) {
        array.push("%" + ((i < 16 ? "0" : "") + i.toString(16)).toUpperCase());
      }
      return array;
    }();
    var compactQueue = function compactQueue2(queue) {
      while (queue.length > 1) {
        var item = queue.pop();
        var obj = item.obj[item.prop];
        if (isArray(obj)) {
          var compacted = [];
          for (var j = 0; j < obj.length; ++j) {
            if (typeof obj[j] !== "undefined") {
              compacted.push(obj[j]);
            }
          }
          item.obj[item.prop] = compacted;
        }
      }
    };
    var arrayToObject = function arrayToObject2(source, options) {
      var obj = options && options.plainObjects ? { __proto__: null } : {};
      for (var i = 0; i < source.length; ++i) {
        if (typeof source[i] !== "undefined") {
          obj[i] = source[i];
        }
      }
      return obj;
    };
    var merge = function merge2(target, source, options) {
      if (!source) {
        return target;
      }
      if (typeof source !== "object" && typeof source !== "function") {
        if (isArray(target)) {
          target.push(source);
        } else if (target && typeof target === "object") {
          if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {
            target[source] = true;
          }
        } else {
          return [target, source];
        }
        return target;
      }
      if (!target || typeof target !== "object") {
        return [target].concat(source);
      }
      var mergeTarget = target;
      if (isArray(target) && !isArray(source)) {
        mergeTarget = arrayToObject(target, options);
      }
      if (isArray(target) && isArray(source)) {
        source.forEach(function(item, i) {
          if (has.call(target, i)) {
            var targetItem = target[i];
            if (targetItem && typeof targetItem === "object" && item && typeof item === "object") {
              target[i] = merge2(targetItem, item, options);
            } else {
              target.push(item);
            }
          } else {
            target[i] = item;
          }
        });
        return target;
      }
      return Object.keys(source).reduce(function(acc, key) {
        var value = source[key];
        if (has.call(acc, key)) {
          acc[key] = merge2(acc[key], value, options);
        } else {
          acc[key] = value;
        }
        return acc;
      }, mergeTarget);
    };
    var assign = function assignSingleSource(target, source) {
      return Object.keys(source).reduce(function(acc, key) {
        acc[key] = source[key];
        return acc;
      }, target);
    };
    var decode = function(str, defaultDecoder, charset) {
      var strWithoutPlus = str.replace(/\+/g, " ");
      if (charset === "iso-8859-1") {
        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
      }
      try {
        return decodeURIComponent(strWithoutPlus);
      } catch (e) {
        return strWithoutPlus;
      }
    };
    var limit = 1024;
    var encode = function encode2(str, defaultEncoder, charset, kind, format) {
      if (str.length === 0) {
        return str;
      }
      var string = str;
      if (typeof str === "symbol") {
        string = Symbol.prototype.toString.call(str);
      } else if (typeof str !== "string") {
        string = String(str);
      }
      if (charset === "iso-8859-1") {
        return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {
          return "%26%23" + parseInt($0.slice(2), 16) + "%3B";
        });
      }
      var out = "";
      for (var j = 0; j < string.length; j += limit) {
        var segment = string.length >= limit ? string.slice(j, j + limit) : string;
        var arr = [];
        for (var i = 0; i < segment.length; ++i) {
          var c = segment.charCodeAt(i);
          if (c === 45 || c === 46 || c === 95 || c === 126 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122 || format === formats.RFC1738 && (c === 40 || c === 41)) {
            arr[arr.length] = segment.charAt(i);
            continue;
          }
          if (c < 128) {
            arr[arr.length] = hexTable[c];
            continue;
          }
          if (c < 2048) {
            arr[arr.length] = hexTable[192 | c >> 6] + hexTable[128 | c & 63];
            continue;
          }
          if (c < 55296 || c >= 57344) {
            arr[arr.length] = hexTable[224 | c >> 12] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63];
            continue;
          }
          i += 1;
          c = 65536 + ((c & 1023) << 10 | segment.charCodeAt(i) & 1023);
          arr[arr.length] = hexTable[240 | c >> 18] + hexTable[128 | c >> 12 & 63] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63];
        }
        out += arr.join("");
      }
      return out;
    };
    var compact = function compact2(value) {
      var queue = [{ obj: { o: value }, prop: "o" }];
      var refs = [];
      for (var i = 0; i < queue.length; ++i) {
        var item = queue[i];
        var obj = item.obj[item.prop];
        var keys = Object.keys(obj);
        for (var j = 0; j < keys.length; ++j) {
          var key = keys[j];
          var val = obj[key];
          if (typeof val === "object" && val !== null && refs.indexOf(val) === -1) {
            queue.push({ obj, prop: key });
            refs.push(val);
          }
        }
      }
      compactQueue(queue);
      return value;
    };
    var isRegExp = function isRegExp2(obj) {
      return Object.prototype.toString.call(obj) === "[object RegExp]";
    };
    var isBuffer = function isBuffer2(obj) {
      if (!obj || typeof obj !== "object") {
        return false;
      }
      return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
    };
    var combine = function combine2(a, b) {
      return [].concat(a, b);
    };
    var maybeMap = function maybeMap2(val, fn) {
      if (isArray(val)) {
        var mapped = [];
        for (var i = 0; i < val.length; i += 1) {
          mapped.push(fn(val[i]));
        }
        return mapped;
      }
      return fn(val);
    };
    module2.exports = {
      arrayToObject,
      assign,
      combine,
      compact,
      decode,
      encode,
      isBuffer,
      isRegExp,
      maybeMap,
      merge
    };
  }
});

// node_modules/qs/lib/stringify.js
var require_stringify = __commonJS({
  "node_modules/qs/lib/stringify.js"(exports2, module2) {
    "use strict";
    var getSideChannel = require_side_channel();
    var utils = require_utils2();
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var arrayPrefixGenerators = {
      brackets: function brackets(prefix) {
        return prefix + "[]";
      },
      comma: "comma",
      indices: function indices(prefix, key) {
        return prefix + "[" + key + "]";
      },
      repeat: function repeat(prefix) {
        return prefix;
      }
    };
    var isArray = Array.isArray;
    var push = Array.prototype.push;
    var pushToArray = function(arr, valueOrArray) {
      push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
    };
    var toISO = Date.prototype.toISOString;
    var defaultFormat = formats["default"];
    var defaults = {
      addQueryPrefix: false,
      allowDots: false,
      allowEmptyArrays: false,
      arrayFormat: "indices",
      charset: "utf-8",
      charsetSentinel: false,
      commaRoundTrip: false,
      delimiter: "&",
      encode: true,
      encodeDotInKeys: false,
      encoder: utils.encode,
      encodeValuesOnly: false,
      filter: void 0,
      format: defaultFormat,
      formatter: formats.formatters[defaultFormat],
      // deprecated
      indices: false,
      serializeDate: function serializeDate(date) {
        return toISO.call(date);
      },
      skipNulls: false,
      strictNullHandling: false
    };
    var isNonNullishPrimitive = function isNonNullishPrimitive2(v) {
      return typeof v === "string" || typeof v === "number" || typeof v === "boolean" || typeof v === "symbol" || typeof v === "bigint";
    };
    var sentinel = {};
    var stringify = function stringify2(object, prefix, generateArrayPrefix, commaRoundTrip, allowEmptyArrays, strictNullHandling, skipNulls, encodeDotInKeys, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {
      var obj = object;
      var tmpSc = sideChannel;
      var step = 0;
      var findFlag = false;
      while ((tmpSc = tmpSc.get(sentinel)) !== void 0 && !findFlag) {
        var pos = tmpSc.get(object);
        step += 1;
        if (typeof pos !== "undefined") {
          if (pos === step) {
            throw new RangeError("Cyclic object value");
          } else {
            findFlag = true;
          }
        }
        if (typeof tmpSc.get(sentinel) === "undefined") {
          step = 0;
        }
      }
      if (typeof filter === "function") {
        obj = filter(prefix, obj);
      } else if (obj instanceof Date) {
        obj = serializeDate(obj);
      } else if (generateArrayPrefix === "comma" && isArray(obj)) {
        obj = utils.maybeMap(obj, function(value2) {
          if (value2 instanceof Date) {
            return serializeDate(value2);
          }
          return value2;
        });
      }
      if (obj === null) {
        if (strictNullHandling) {
          return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, "key", format) : prefix;
        }
        obj = "";
      }
      if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
        if (encoder) {
          var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, "key", format);
          return [formatter(keyValue) + "=" + formatter(encoder(obj, defaults.encoder, charset, "value", format))];
        }
        return [formatter(prefix) + "=" + formatter(String(obj))];
      }
      var values = [];
      if (typeof obj === "undefined") {
        return values;
      }
      var objKeys;
      if (generateArrayPrefix === "comma" && isArray(obj)) {
        if (encodeValuesOnly && encoder) {
          obj = utils.maybeMap(obj, encoder);
        }
        objKeys = [{ value: obj.length > 0 ? obj.join(",") || null : void 0 }];
      } else if (isArray(filter)) {
        objKeys = filter;
      } else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
      }
      var encodedPrefix = encodeDotInKeys ? String(prefix).replace(/\./g, "%2E") : String(prefix);
      var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? encodedPrefix + "[]" : encodedPrefix;
      if (allowEmptyArrays && isArray(obj) && obj.length === 0) {
        return adjustedPrefix + "[]";
      }
      for (var j = 0; j < objKeys.length; ++j) {
        var key = objKeys[j];
        var value = typeof key === "object" && key && typeof key.value !== "undefined" ? key.value : obj[key];
        if (skipNulls && value === null) {
          continue;
        }
        var encodedKey = allowDots && encodeDotInKeys ? String(key).replace(/\./g, "%2E") : String(key);
        var keyPrefix = isArray(obj) ? typeof generateArrayPrefix === "function" ? generateArrayPrefix(adjustedPrefix, encodedKey) : adjustedPrefix : adjustedPrefix + (allowDots ? "." + encodedKey : "[" + encodedKey + "]");
        sideChannel.set(object, step);
        var valueSideChannel = getSideChannel();
        valueSideChannel.set(sentinel, sideChannel);
        pushToArray(values, stringify2(
          value,
          keyPrefix,
          generateArrayPrefix,
          commaRoundTrip,
          allowEmptyArrays,
          strictNullHandling,
          skipNulls,
          encodeDotInKeys,
          generateArrayPrefix === "comma" && encodeValuesOnly && isArray(obj) ? null : encoder,
          filter,
          sort,
          allowDots,
          serializeDate,
          format,
          formatter,
          encodeValuesOnly,
          charset,
          valueSideChannel
        ));
      }
      return values;
    };
    var normalizeStringifyOptions = function normalizeStringifyOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (typeof opts.allowEmptyArrays !== "undefined" && typeof opts.allowEmptyArrays !== "boolean") {
        throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");
      }
      if (typeof opts.encodeDotInKeys !== "undefined" && typeof opts.encodeDotInKeys !== "boolean") {
        throw new TypeError("`encodeDotInKeys` option can only be `true` or `false`, when provided");
      }
      if (opts.encoder !== null && typeof opts.encoder !== "undefined" && typeof opts.encoder !== "function") {
        throw new TypeError("Encoder has to be a function.");
      }
      var charset = opts.charset || defaults.charset;
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      var format = formats["default"];
      if (typeof opts.format !== "undefined") {
        if (!has.call(formats.formatters, opts.format)) {
          throw new TypeError("Unknown format option provided.");
        }
        format = opts.format;
      }
      var formatter = formats.formatters[format];
      var filter = defaults.filter;
      if (typeof opts.filter === "function" || isArray(opts.filter)) {
        filter = opts.filter;
      }
      var arrayFormat;
      if (opts.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = opts.arrayFormat;
      } else if ("indices" in opts) {
        arrayFormat = opts.indices ? "indices" : "repeat";
      } else {
        arrayFormat = defaults.arrayFormat;
      }
      if ("commaRoundTrip" in opts && typeof opts.commaRoundTrip !== "boolean") {
        throw new TypeError("`commaRoundTrip` must be a boolean, or absent");
      }
      var allowDots = typeof opts.allowDots === "undefined" ? opts.encodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;
      return {
        addQueryPrefix: typeof opts.addQueryPrefix === "boolean" ? opts.addQueryPrefix : defaults.addQueryPrefix,
        allowDots,
        allowEmptyArrays: typeof opts.allowEmptyArrays === "boolean" ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,
        arrayFormat,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        commaRoundTrip: !!opts.commaRoundTrip,
        delimiter: typeof opts.delimiter === "undefined" ? defaults.delimiter : opts.delimiter,
        encode: typeof opts.encode === "boolean" ? opts.encode : defaults.encode,
        encodeDotInKeys: typeof opts.encodeDotInKeys === "boolean" ? opts.encodeDotInKeys : defaults.encodeDotInKeys,
        encoder: typeof opts.encoder === "function" ? opts.encoder : defaults.encoder,
        encodeValuesOnly: typeof opts.encodeValuesOnly === "boolean" ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
        filter,
        format,
        formatter,
        serializeDate: typeof opts.serializeDate === "function" ? opts.serializeDate : defaults.serializeDate,
        skipNulls: typeof opts.skipNulls === "boolean" ? opts.skipNulls : defaults.skipNulls,
        sort: typeof opts.sort === "function" ? opts.sort : null,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
      };
    };
    module2.exports = function(object, opts) {
      var obj = object;
      var options = normalizeStringifyOptions(opts);
      var objKeys;
      var filter;
      if (typeof options.filter === "function") {
        filter = options.filter;
        obj = filter("", obj);
      } else if (isArray(options.filter)) {
        filter = options.filter;
        objKeys = filter;
      }
      var keys = [];
      if (typeof obj !== "object" || obj === null) {
        return "";
      }
      var generateArrayPrefix = arrayPrefixGenerators[options.arrayFormat];
      var commaRoundTrip = generateArrayPrefix === "comma" && options.commaRoundTrip;
      if (!objKeys) {
        objKeys = Object.keys(obj);
      }
      if (options.sort) {
        objKeys.sort(options.sort);
      }
      var sideChannel = getSideChannel();
      for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];
        var value = obj[key];
        if (options.skipNulls && value === null) {
          continue;
        }
        pushToArray(keys, stringify(
          value,
          key,
          generateArrayPrefix,
          commaRoundTrip,
          options.allowEmptyArrays,
          options.strictNullHandling,
          options.skipNulls,
          options.encodeDotInKeys,
          options.encode ? options.encoder : null,
          options.filter,
          options.sort,
          options.allowDots,
          options.serializeDate,
          options.format,
          options.formatter,
          options.encodeValuesOnly,
          options.charset,
          sideChannel
        ));
      }
      var joined = keys.join(options.delimiter);
      var prefix = options.addQueryPrefix === true ? "?" : "";
      if (options.charsetSentinel) {
        if (options.charset === "iso-8859-1") {
          prefix += "utf8=%26%2310003%3B&";
        } else {
          prefix += "utf8=%E2%9C%93&";
        }
      }
      return joined.length > 0 ? prefix + joined : "";
    };
  }
});

// node_modules/qs/lib/parse.js
var require_parse = __commonJS({
  "node_modules/qs/lib/parse.js"(exports2, module2) {
    "use strict";
    var utils = require_utils2();
    var has = Object.prototype.hasOwnProperty;
    var isArray = Array.isArray;
    var defaults = {
      allowDots: false,
      allowEmptyArrays: false,
      allowPrototypes: false,
      allowSparse: false,
      arrayLimit: 20,
      charset: "utf-8",
      charsetSentinel: false,
      comma: false,
      decodeDotInKeys: false,
      decoder: utils.decode,
      delimiter: "&",
      depth: 5,
      duplicates: "combine",
      ignoreQueryPrefix: false,
      interpretNumericEntities: false,
      parameterLimit: 1e3,
      parseArrays: true,
      plainObjects: false,
      strictDepth: false,
      strictNullHandling: false
    };
    var interpretNumericEntities = function(str) {
      return str.replace(/&#(\d+);/g, function($0, numberStr) {
        return String.fromCharCode(parseInt(numberStr, 10));
      });
    };
    var parseArrayValue = function(val, options) {
      if (val && typeof val === "string" && options.comma && val.indexOf(",") > -1) {
        return val.split(",");
      }
      return val;
    };
    var isoSentinel = "utf8=%26%2310003%3B";
    var charsetSentinel = "utf8=%E2%9C%93";
    var parseValues = function parseQueryStringValues(str, options) {
      var obj = { __proto__: null };
      var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, "") : str;
      cleanStr = cleanStr.replace(/%5B/gi, "[").replace(/%5D/gi, "]");
      var limit = options.parameterLimit === Infinity ? void 0 : options.parameterLimit;
      var parts = cleanStr.split(options.delimiter, limit);
      var skipIndex = -1;
      var i;
      var charset = options.charset;
      if (options.charsetSentinel) {
        for (i = 0; i < parts.length; ++i) {
          if (parts[i].indexOf("utf8=") === 0) {
            if (parts[i] === charsetSentinel) {
              charset = "utf-8";
            } else if (parts[i] === isoSentinel) {
              charset = "iso-8859-1";
            }
            skipIndex = i;
            i = parts.length;
          }
        }
      }
      for (i = 0; i < parts.length; ++i) {
        if (i === skipIndex) {
          continue;
        }
        var part = parts[i];
        var bracketEqualsPos = part.indexOf("]=");
        var pos = bracketEqualsPos === -1 ? part.indexOf("=") : bracketEqualsPos + 1;
        var key;
        var val;
        if (pos === -1) {
          key = options.decoder(part, defaults.decoder, charset, "key");
          val = options.strictNullHandling ? null : "";
        } else {
          key = options.decoder(part.slice(0, pos), defaults.decoder, charset, "key");
          val = utils.maybeMap(
            parseArrayValue(part.slice(pos + 1), options),
            function(encodedVal) {
              return options.decoder(encodedVal, defaults.decoder, charset, "value");
            }
          );
        }
        if (val && options.interpretNumericEntities && charset === "iso-8859-1") {
          val = interpretNumericEntities(String(val));
        }
        if (part.indexOf("[]=") > -1) {
          val = isArray(val) ? [val] : val;
        }
        var existing = has.call(obj, key);
        if (existing && options.duplicates === "combine") {
          obj[key] = utils.combine(obj[key], val);
        } else if (!existing || options.duplicates === "last") {
          obj[key] = val;
        }
      }
      return obj;
    };
    var parseObject = function(chain, val, options, valuesParsed) {
      var leaf = valuesParsed ? val : parseArrayValue(val, options);
      for (var i = chain.length - 1; i >= 0; --i) {
        var obj;
        var root = chain[i];
        if (root === "[]" && options.parseArrays) {
          obj = options.allowEmptyArrays && (leaf === "" || options.strictNullHandling && leaf === null) ? [] : [].concat(leaf);
        } else {
          obj = options.plainObjects ? { __proto__: null } : {};
          var cleanRoot = root.charAt(0) === "[" && root.charAt(root.length - 1) === "]" ? root.slice(1, -1) : root;
          var decodedRoot = options.decodeDotInKeys ? cleanRoot.replace(/%2E/g, ".") : cleanRoot;
          var index = parseInt(decodedRoot, 10);
          if (!options.parseArrays && decodedRoot === "") {
            obj = { 0: leaf };
          } else if (!isNaN(index) && root !== decodedRoot && String(index) === decodedRoot && index >= 0 && (options.parseArrays && index <= options.arrayLimit)) {
            obj = [];
            obj[index] = leaf;
          } else if (decodedRoot !== "__proto__") {
            obj[decodedRoot] = leaf;
          }
        }
        leaf = obj;
      }
      return leaf;
    };
    var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
      if (!givenKey) {
        return;
      }
      var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, "[$1]") : givenKey;
      var brackets = /(\[[^[\]]*])/;
      var child = /(\[[^[\]]*])/g;
      var segment = options.depth > 0 && brackets.exec(key);
      var parent = segment ? key.slice(0, segment.index) : key;
      var keys = [];
      if (parent) {
        if (!options.plainObjects && has.call(Object.prototype, parent)) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys.push(parent);
      }
      var i = 0;
      while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {
        i += 1;
        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys.push(segment[1]);
      }
      if (segment) {
        if (options.strictDepth === true) {
          throw new RangeError("Input depth exceeded depth option of " + options.depth + " and strictDepth is true");
        }
        keys.push("[" + key.slice(segment.index) + "]");
      }
      return parseObject(keys, val, options, valuesParsed);
    };
    var normalizeParseOptions = function normalizeParseOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (typeof opts.allowEmptyArrays !== "undefined" && typeof opts.allowEmptyArrays !== "boolean") {
        throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");
      }
      if (typeof opts.decodeDotInKeys !== "undefined" && typeof opts.decodeDotInKeys !== "boolean") {
        throw new TypeError("`decodeDotInKeys` option can only be `true` or `false`, when provided");
      }
      if (opts.decoder !== null && typeof opts.decoder !== "undefined" && typeof opts.decoder !== "function") {
        throw new TypeError("Decoder has to be a function.");
      }
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      var charset = typeof opts.charset === "undefined" ? defaults.charset : opts.charset;
      var duplicates = typeof opts.duplicates === "undefined" ? defaults.duplicates : opts.duplicates;
      if (duplicates !== "combine" && duplicates !== "first" && duplicates !== "last") {
        throw new TypeError("The duplicates option must be either combine, first, or last");
      }
      var allowDots = typeof opts.allowDots === "undefined" ? opts.decodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;
      return {
        allowDots,
        allowEmptyArrays: typeof opts.allowEmptyArrays === "boolean" ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,
        allowPrototypes: typeof opts.allowPrototypes === "boolean" ? opts.allowPrototypes : defaults.allowPrototypes,
        allowSparse: typeof opts.allowSparse === "boolean" ? opts.allowSparse : defaults.allowSparse,
        arrayLimit: typeof opts.arrayLimit === "number" ? opts.arrayLimit : defaults.arrayLimit,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        comma: typeof opts.comma === "boolean" ? opts.comma : defaults.comma,
        decodeDotInKeys: typeof opts.decodeDotInKeys === "boolean" ? opts.decodeDotInKeys : defaults.decodeDotInKeys,
        decoder: typeof opts.decoder === "function" ? opts.decoder : defaults.decoder,
        delimiter: typeof opts.delimiter === "string" || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
        // eslint-disable-next-line no-implicit-coercion, no-extra-parens
        depth: typeof opts.depth === "number" || opts.depth === false ? +opts.depth : defaults.depth,
        duplicates,
        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
        interpretNumericEntities: typeof opts.interpretNumericEntities === "boolean" ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
        parameterLimit: typeof opts.parameterLimit === "number" ? opts.parameterLimit : defaults.parameterLimit,
        parseArrays: opts.parseArrays !== false,
        plainObjects: typeof opts.plainObjects === "boolean" ? opts.plainObjects : defaults.plainObjects,
        strictDepth: typeof opts.strictDepth === "boolean" ? !!opts.strictDepth : defaults.strictDepth,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
      };
    };
    module2.exports = function(str, opts) {
      var options = normalizeParseOptions(opts);
      if (str === "" || str === null || typeof str === "undefined") {
        return options.plainObjects ? { __proto__: null } : {};
      }
      var tempObj = typeof str === "string" ? parseValues(str, options) : str;
      var obj = options.plainObjects ? { __proto__: null } : {};
      var keys = Object.keys(tempObj);
      for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        var newObj = parseKeys(key, tempObj[key], options, typeof str === "string");
        obj = utils.merge(obj, newObj, options);
      }
      if (options.allowSparse === true) {
        return obj;
      }
      return utils.compact(obj);
    };
  }
});

// node_modules/qs/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/qs/lib/index.js"(exports2, module2) {
    "use strict";
    var stringify = require_stringify();
    var parse = require_parse();
    var formats = require_formats();
    module2.exports = {
      formats,
      parse,
      stringify
    };
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/core/request.js
var require_request2 = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/core/request.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.request = void 0;
    var axios_1 = __importDefault(require_axios2());
    var form_data_1 = __importDefault(require_form_data());
    var ApiError_1 = require_ApiError2();
    var CancelablePromise_1 = require_CancelablePromise2();
    var qs_1 = __importDefault(require_lib2());
    var isDefined = (value) => {
      return value !== void 0 && value !== null;
    };
    var isString = (value) => {
      return typeof value === "string";
    };
    var isStringWithValue = (value) => {
      return isString(value) && value !== "";
    };
    var isBlob = (value) => {
      return typeof value === "object" && typeof value.type === "string" && typeof value.stream === "function" && typeof value.arrayBuffer === "function" && typeof value.constructor === "function" && typeof value.constructor.name === "string" && /^(Blob|File)$/.test(value.constructor.name) && /^(Blob|File)$/.test(value[Symbol.toStringTag]);
    };
    var isSuccess = (status) => {
      return status >= 200 && status < 300;
    };
    var base64 = (str) => {
      try {
        return btoa(str);
      } catch (err) {
        return Buffer.from(str).toString("base64");
      }
    };
    var getQueryString = (params) => {
      const str = qs_1.default.stringify(params);
      if (str.length > 0) {
        return `?${str}`;
      }
      return "";
    };
    var getUrl = (config, options) => {
      const encoder = config.ENCODE_PATH || encodeURI;
      const path = options.url.replace("{api-version}", config.VERSION).replace(/{(.*?)}/g, (substring, group) => {
        if (options.path?.hasOwnProperty(group)) {
          return encoder(String(options.path[group]));
        }
        return substring;
      });
      const url = `${config.BASE}${path}`;
      if (options.query) {
        return `${url}${getQueryString(options.query)}`;
      }
      return url;
    };
    var getFormData = (options) => {
      if (options.formData) {
        const formData = new form_data_1.default();
        const process2 = (key, value) => {
          if (isString(value) || isBlob(value)) {
            formData.append(key, value);
          } else {
            formData.append(key, JSON.stringify(value));
          }
        };
        Object.entries(options.formData).filter(([_, value]) => isDefined(value)).forEach(([key, value]) => {
          if (Array.isArray(value)) {
            value.forEach((v) => process2(key, v));
          } else {
            process2(key, value);
          }
        });
        return formData;
      }
      return;
    };
    var resolve = async (options, resolver) => {
      if (typeof resolver === "function") {
        return resolver(options);
      }
      return resolver;
    };
    var getHeaders = async (config, options, formData) => {
      const token = await resolve(options, config.TOKEN);
      const username = await resolve(options, config.USERNAME);
      const password = await resolve(options, config.PASSWORD);
      const additionalHeaders = await resolve(options, config.HEADERS);
      const formHeaders = typeof formData?.getHeaders === "function" && formData?.getHeaders() || {};
      const headers = Object.entries({
        Accept: "application/json",
        ...additionalHeaders,
        ...options.headers,
        ...formHeaders
      }).filter(([_, value]) => isDefined(value)).reduce((headers2, [key, value]) => ({
        ...headers2,
        [key]: String(value)
      }), {});
      if (isStringWithValue(token)) {
        headers["Authorization"] = `Bearer ${token}`;
      }
      if (isStringWithValue(username) && isStringWithValue(password)) {
        const credentials = base64(`${username}:${password}`);
        headers["Authorization"] = `Basic ${credentials}`;
      }
      return headers;
    };
    var getRequestBody = (options) => {
      if (options.body) {
        return options.body;
      }
      return;
    };
    var sendRequest = async (config, options, url, body, formData, headers, onCancel) => {
      const source = axios_1.default.CancelToken.source();
      const requestConfig = {
        url,
        headers,
        data: body ?? formData,
        method: options.method,
        withCredentials: config.WITH_CREDENTIALS,
        cancelToken: source.token
      };
      onCancel(() => source.cancel("The user aborted a request."));
      try {
        return await axios_1.default.request(requestConfig);
      } catch (error) {
        const axiosError = error;
        if (axiosError.response) {
          return axiosError.response;
        }
        throw error;
      }
    };
    var getResponseHeader = (response, responseHeader) => {
      if (responseHeader) {
        const content = response.headers[responseHeader];
        if (isString(content)) {
          return content;
        }
      }
      return;
    };
    var getResponseBody = (response) => {
      if (response.status !== 204) {
        return response.data;
      }
      return;
    };
    var catchErrorCodes = (options, result) => {
      const errors = {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Internal Server Error",
        502: "Bad Gateway",
        503: "Service Unavailable",
        ...options.errors
      };
      let error = errors[result.status];
      if (error) {
        if (result.body.message) {
          error = error + " - " + result.body.message;
        }
        throw new ApiError_1.ApiError(result, `${options.method} ${result.url}: ${error}`);
      }
      if (!result.ok) {
        throw new ApiError_1.ApiError(result, "Generic Error");
      }
    };
    var request = (config, options) => {
      return new CancelablePromise_1.CancelablePromise(async (resolve2, reject, onCancel) => {
        try {
          const url = getUrl(config, options);
          const formData = getFormData(options);
          const body = getRequestBody(options);
          const headers = await getHeaders(config, options, formData);
          if (!onCancel.isCancelled) {
            const response = await sendRequest(config, options, url, body, formData, headers, onCancel);
            const responseBody = getResponseBody(response);
            const responseHeader = getResponseHeader(response, options.responseHeader);
            const result = {
              url,
              ok: isSuccess(response.status),
              status: response.status,
              statusText: response.statusText,
              body: responseHeader ?? responseBody
            };
            catchErrorCodes(options, result);
            resolve2(result.body);
          }
        } catch (error) {
          reject(error);
        }
      });
    };
    exports2.request = request;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/core/AxiosHttpRequest.js
var require_AxiosHttpRequest2 = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/core/AxiosHttpRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AxiosHttpRequest = void 0;
    var BaseHttpRequest_1 = require_BaseHttpRequest2();
    var request_1 = require_request2();
    var AxiosHttpRequest = class extends BaseHttpRequest_1.BaseHttpRequest {
      constructor(config) {
        super(config);
      }
      /**
       * Request method
       * @param options The request options from the service
       * @returns CancelablePromise<T>
       * @throws ApiError
       */
      request(options) {
        return (0, request_1.request)(this.config, options);
      }
    };
    exports2.AxiosHttpRequest = AxiosHttpRequest;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/AccountsService.js
var require_AccountsService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/AccountsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AccountsService = void 0;
    var AccountsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Returns a list of accounts.
       * @param page 'Page number (default 1)
       * @param count Number of results per page (default 10)
       * @param q Query to filter the results on
       * @returns AccountsResponse
       * @throws ApiError
       */
      getAccounts(page, count, q) {
        return this.httpRequest.request({
          method: "GET",
          url: "/accounts",
          query: {
            "page": page,
            "count": count,
            "q": q
          }
        });
      }
      /**
       * Create a new account.
       * @param requestBody
       * @returns AccountResponse
       * @throws ApiError
       */
      createAccount(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/accounts",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Return a list of account industries.
       * @returns AccountsIndustries
       * @throws ApiError
       */
      getAccountsIndustries() {
        return this.httpRequest.request({
          method: "GET",
          url: "/accounts/industries"
        });
      }
      /**
       * Returns specific account details by id.
       * @param id Identifier (uuid format)
       * @returns AccountResponse
       * @throws ApiError
       */
      getAccount(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/accounts/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Update an existing account.
       * @param id
       * @param requestBody
       * @returns AccountResponse
       * @throws ApiError
       */
      updateAccount(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/accounts/{id}",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Delete an existing account.
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      deleteAccount(id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/accounts/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Returns account details by account fields
       * @param requestBody
       * @returns AccountResponse
       * @throws ApiError
       */
      getAccountBy(requestBody) {
        return this.httpRequest.request({
          method: "GET",
          url: "/accounts-by",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Generates a new account API KEY.
       * @param id
       * @returns AccountResponse
       * @throws ApiError
       */
      generateApiKey(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/accounts/{id}/generate-api-key",
          path: {
            "id": id
          }
        });
      }
      /**
       * Get array of advertiser for the specified account.
       * @param accountId
       * @returns AdvertisersResponse
       * @throws ApiError
       */
      getAdvertisers(accountId) {
        return this.httpRequest.request({
          method: "GET",
          url: "/accounts/{accountId}/advertisers",
          path: {
            "accountId": accountId
          }
        });
      }
      /**
       * Create a advertiser to an account
       * @param accountId
       * @param requestBody
       * @returns AdvertiserResponse
       * @throws ApiError
       */
      createAdvertiser(accountId, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/accounts/{accountId}/advertisers",
          path: {
            "accountId": accountId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.AccountsService = AccountsService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/ActionsService.js
var require_ActionsService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/ActionsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ActionsService = void 0;
    var ActionsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Send a slack message
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      sendSlackMessage(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/actions/slack",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Send a notification regarding a deployment
       * @param requestBody
       * @returns DeploymentNotificationResponse
       * @throws ApiError
       */
      sendDeploymentNotification(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/actions/notification",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Send deployment post start email
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      sendDeploymentPostStartEmail(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/actions/post-start-email",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Send an email reminder regarding a deployment
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      sendDeploymentReminder(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/actions/reminder",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Send a severe (last chance) email reminder regarding a deployment
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      sendDeploymentReminderSevere(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/actions/reminder-severe",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Detect abuse on a deployment
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      detectDeploymentAbuse(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/actions/detect-abuse",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Update sub per event deliverable status
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      updateSubPerEventStatus(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/actions/update-sub-per-event-status",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Test workflow automation for outreach in scale
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      testOutreachUsingWorkflow(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/actions/test",
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.ActionsService = ActionsService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/AdvertisersService.js
var require_AdvertisersService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/AdvertisersService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AdvertisersService = void 0;
    var AdvertisersService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Returns a list of advertisers.
       * @param page 'Page number (default 1)
       * @param count Number of results per page (default 10)
       * @param q Query to filter the results on
       * @returns AdvertisersResponse
       * @throws ApiError
       */
      getAllAdvertisers(page, count, q) {
        return this.httpRequest.request({
          method: "GET",
          url: "/advers",
          query: {
            "page": page,
            "count": count,
            "q": q
          }
        });
      }
      /**
       * Returns specific account details by id.
       * @param id
       * @returns AdvertiserResponse
       * @throws ApiError
       */
      getAdvertiser(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/advers/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Update an advertiser
       * @param id
       * @param requestBody
       * @returns AdvertiserResponse
       * @throws ApiError
       */
      updateAdvertiser(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/advers/{id}",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Delete an advertiser
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      deleteAdvertiser(id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/advers/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Returns advertisers for GrabTap
       * @param requestBody
       * @returns GrabTapAdvertisersResponse
       * @throws ApiError
       */
      getAdvertisersForGrabTap(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/advertisers-for-grabtap",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Returns account details by advertiser fields
       * @param requestBody
       * @returns AdvertiserResponse
       * @throws ApiError
       */
      getAdvertiserBy(requestBody) {
        return this.httpRequest.request({
          method: "GET",
          url: "/advers-by",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Returns a list of advertisers assets
       * @param advertiserId
       * @param page
       * @param count
       * @returns AdvertiserAssetsResponse
       * @throws ApiError
       */
      getAdvertiserAssets(advertiserId, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/advers/{advertiserId}/assets",
          path: {
            "advertiserId": advertiserId
          },
          query: {
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Create an asset for an advertiser
       * @param advertiserId
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      createAdvertiserAsset(advertiserId, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/advers/{advertiserId}/assets",
          path: {
            "advertiserId": advertiserId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get specific advertisers asset
       * @param advertiserId
       * @param id
       * @returns AdvertiserAssetResponse
       * @throws ApiError
       */
      getAdvertiserAsset(advertiserId, id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/advers/{advertiserId}/assets/{id}",
          path: {
            "advertiserId": advertiserId,
            "id": id
          }
        });
      }
      /**
       * Update an asset of an advertiser
       * @param advertiserId
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      updateAdvertiserAsset(advertiserId, id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/advers/{advertiserId}/assets/{id}",
          path: {
            "advertiserId": advertiserId,
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Delete an asset for an advertiser
       * @param advertiserId
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      deleteAdvertiserAsset(advertiserId, id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/advers/{advertiserId}/assets/{id}",
          path: {
            "advertiserId": advertiserId,
            "id": id
          }
        });
      }
      /**
       * Create an asset upload url for an offering
       * @param advertiserId
       * @param requestBody
       * @returns GetFileSignedUrlResponse
       * @throws ApiError
       */
      createAdvertiserAssetUploadUrl(advertiserId, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/advers/{advertiserId}/assets/generate-asset-upload-signed-url",
          path: {
            "advertiserId": advertiserId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Returns a list of advertisers workflows
       * @param advertiserId
       * @param page
       * @param count
       * @returns AdvertisersWorkflowInfosResponse
       * @throws ApiError
       */
      getAdvertiserWorkflows(advertiserId, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/advers/{advertiserId}/workflows",
          path: {
            "advertiserId": advertiserId
          },
          query: {
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Create a workflow for an advertiser
       * @param advertiserId
       * @param requestBody
       * @returns AdvertiserWorkflowResponse
       * @throws ApiError
       */
      createAdvertiserWorkflow(advertiserId, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/advers/{advertiserId}/workflows",
          path: {
            "advertiserId": advertiserId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Returns a an advertisers workflow
       * @param advertiserId
       * @param id
       * @returns AdvertiserWorkflowResponse
       * @throws ApiError
       */
      getAdvertiserWorkflow(advertiserId, id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/advers/{advertiserId}/workflows/{id}",
          path: {
            "advertiserId": advertiserId,
            "id": id
          }
        });
      }
      /**
       * Update a workflow of an advertiser
       * @param advertiserId
       * @param id
       * @param requestBody
       * @returns AdvertiserWorkflowResponse
       * @throws ApiError
       */
      updateAdvertiserWorkflow(advertiserId, id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/advers/{advertiserId}/workflows/{id}",
          path: {
            "advertiserId": advertiserId,
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Add a deliverable to workflow
       * @param advertiserId
       * @param id
       * @param requestBody
       * @returns CampaignDeliverableParam
       * @throws ApiError
       */
      addWorkflowDeliverable(advertiserId, id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/advers/{advertiserId}/workflows/{id}/deliverables",
          path: {
            "advertiserId": advertiserId,
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Delete a workflow for an advertiser
       * @param advertiserId
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      deleteAdvertiserWorkflow(advertiserId, id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/advers/{advertiserId}/workflow/{id}",
          path: {
            "advertiserId": advertiserId,
            "id": id
          }
        });
      }
      /**
       * Set up the attribution for an advertiser
       * @param id
       * @param requestBody
       * @returns AttributionSetupResponse
       * @throws ApiError
       */
      setupAdvertiserAttribution(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/advers/{id}/attribution/setup",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Searches for advertiser integrations
       * @param type
       * @param advertiserId
       * @param page
       * @param count
       * @returns GetAdvertiserIntegrationResponse
       * @throws ApiError
       */
      searchAdvertiserIntegrations(type, advertiserId, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/advertiserIntegrations",
          query: {
            "type": type,
            "advertiserId": advertiserId,
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Returns a list of advertiser integrations
       * @param id
       * @returns AdvertiserIntegration
       * @throws ApiError
       */
      getAdvertiserIntegrations(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/advers/{id}/integrations",
          path: {
            "id": id
          }
        });
      }
      /**
       * Creates a new advertiser integration
       * @param id
       * @param requestBody
       * @returns AdvertiserIntegration
       * @throws ApiError
       */
      createAdvertiserIntegration(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/advers/{id}/integrations",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Updates an advertiser integration
       * @param id
       * @param integrationId
       * @param requestBody
       * @returns AdvertiserIntegration
       * @throws ApiError
       */
      updateAdvertiserIntegration(id, integrationId, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/advers/{id}/integrations/{integrationId}",
          path: {
            "id": id,
            "integrationId": integrationId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Deletes an advertiser integration
       * @param id
       * @param integrationId
       * @returns any Successful response
       * @throws ApiError
       */
      deleteAdvertiserIntegration(id, integrationId) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/advers/{id}/integrations/{integrationId}",
          path: {
            "id": id,
            "integrationId": integrationId
          }
        });
      }
      /**
       * Migrate advertiser attribution data from old model to new model
       * @returns any Successful response
       * @throws ApiError
       */
      migrateAdvertiserAttributionData() {
        return this.httpRequest.request({
          method: "POST",
          url: "/advers/migrate-attribution-data"
        });
      }
      /**
       * Refresh views for advertiser stats
       * @returns any Successful response
       * @throws ApiError
       */
      refreshAdvertiserStatsMaterializedViews() {
        return this.httpRequest.request({
          method: "POST",
          url: "/advers/refresh-views"
        });
      }
    };
    exports2.AdvertisersService = AdvertisersService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/AdvertisersBrandSafetyService.js
var require_AdvertisersBrandSafetyService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/AdvertisersBrandSafetyService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AdvertisersBrandSafetyService = void 0;
    var AdvertisersBrandSafetyService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Get advertiser brand safety
       * @param id
       * @returns AdvertiserBrandSafetyResponse
       * @throws ApiError
       */
      getAdvertiserBrandSafety(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/advertiser-brand-safety/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Creates or update a new advertiser brand safety
       * @param id
       * @param requestBody
       * @returns AdvertiserBrandSafetyResponse
       * @throws ApiError
       */
      createAdvertiserBrandSafety(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/advertiser-brand-safety/{id}",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.AdvertisersBrandSafetyService = AdvertisersBrandSafetyService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/AdvertisersRegionService.js
var require_AdvertisersRegionService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/AdvertisersRegionService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AdvertisersRegionService = void 0;
    var AdvertisersRegionService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Returns a list of advertiser regions
       * @param id
       * @returns AdvertiserRegionResponse
       * @throws ApiError
       */
      getAdvertiserRegions(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/advers/{id}/regions",
          path: {
            "id": id
          }
        });
      }
      /**
       * Creates a new advertiser region
       * @param id
       * @param requestBody
       * @returns AdvertiserRegionResponse
       * @throws ApiError
       */
      createAdvertiserRegion(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/advers/{id}/regions",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Updates an advertiser region
       * @param id
       * @param regionId
       * @param requestBody
       * @returns AdvertiserRegionResponse
       * @throws ApiError
       */
      updateAdvertiserRegion(id, regionId, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/advers/{id}/regions/{regionId}",
          path: {
            "id": id,
            "regionId": regionId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Deletes an advertiser region
       * @param id
       * @param regionId
       * @returns any Successful response
       * @throws ApiError
       */
      deleteAdvertiserRegion(id, regionId) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/advers/{id}/regions/{regionId}",
          path: {
            "id": id,
            "regionId": regionId
          }
        });
      }
    };
    exports2.AdvertisersRegionService = AdvertisersRegionService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/AgenciesService.js
var require_AgenciesService2 = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/AgenciesService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AgenciesService = void 0;
    var AgenciesService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Returns information about the agency of the current user
       * @returns MyAgencyResponse
       * @throws ApiError
       */
      getMyAgency() {
        return this.httpRequest.request({
          method: "GET",
          url: "/agencies/me"
        });
      }
      /**
       * Returns the invite code for an agency
       * @param id
       * @returns AgencyCreatorInviteCodeResponse
       * @throws ApiError
       */
      getAgencyInviteCode(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/agencies/{id}/invite-code",
          path: {
            "id": id
          }
        });
      }
      /**
       * Deletes the invite code for an agency
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      deleteAgencyInviteCode(id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/agencies/{id}/invite-code",
          path: {
            "id": id
          }
        });
      }
      /**
       * Creator joins an agency
       * @param code
       * @returns CreatorJoinAgencyResponse
       * @throws ApiError
       */
      creatorJoinAgency(code) {
        return this.httpRequest.request({
          method: "POST",
          url: "/agencies/creator-join-agency",
          query: {
            "code": code
          }
        });
      }
      /**
       * Returns creators for an agency
       * @param id
       * @param status
       * @param page
       * @param count
       * @returns AgencyCreatorsResponse
       * @throws ApiError
       */
      getAgencyCreators(id, status, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/agencies/{id}/creators",
          path: {
            "id": id
          },
          query: {
            "status": status,
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Returns agency creators with open sponsorships
       * @param id
       * @param page
       * @param count
       * @param withBase
       * @param platform
       * @param isNew
       * @returns AgencyCreatorsResponse
       * @throws ApiError
       */
      getAgencyCreatorsByOpenSponsorships(id, page, count, withBase, platform, isNew) {
        return this.httpRequest.request({
          method: "GET",
          url: "/agencies/{id}/creators-by-sponsorships",
          path: {
            "id": id
          },
          query: {
            "page": page,
            "count": count,
            "withBase": withBase,
            "platform": platform,
            "isNew": isNew
          }
        });
      }
      /**
       * Returns agency campaigns with open sponsorships
       * @param id
       * @param page
       * @param count
       * @param withBase
       * @param platform
       * @param isNew
       * @returns AgencyCampaignsResponse
       * @throws ApiError
       */
      getAgencyCampaignsByOpenSponsorships(id, page, count, withBase, platform, isNew) {
        return this.httpRequest.request({
          method: "GET",
          url: "/agencies/{id}/campaigns-by-sponsorships",
          path: {
            "id": id
          },
          query: {
            "page": page,
            "count": count,
            "withBase": withBase,
            "platform": platform,
            "isNew": isNew
          }
        });
      }
      /**
       * Returns sponsorships for an agency
       * @param id
       * @param page
       * @param count
       * @param withBase
       * @param platform
       * @param isNew
       * @returns AgencySponsorshipsResponse
       * @throws ApiError
       */
      getAgencySponsorships(id, page, count, withBase, platform, isNew) {
        return this.httpRequest.request({
          method: "GET",
          url: "/agencies/{id}/sponsorships",
          path: {
            "id": id
          },
          query: {
            "page": page,
            "count": count,
            "withBase": withBase,
            "platform": platform,
            "isNew": isNew
          }
        });
      }
      /**
       * Returns the sponsorships of a creator
       * @param id
       * @param creatorId
       * @param page
       * @param count
       * @param withBase
       * @param platform
       * @param isNew
       * @returns AgencySponsorshipsResponse
       * @throws ApiError
       */
      getAgencyCreatorSponsorships(id, creatorId, page, count, withBase, platform, isNew) {
        return this.httpRequest.request({
          method: "GET",
          url: "/agencies/{id}/creators/{creatorId}/sponsorships",
          path: {
            "id": id,
            "creatorId": creatorId
          },
          query: {
            "page": page,
            "count": count,
            "withBase": withBase,
            "platform": platform,
            "isNew": isNew
          }
        });
      }
      /**
       * Returns the sponsorships of a campaign
       * @param id
       * @param campaignId
       * @param page
       * @param count
       * @param withBase
       * @param platform
       * @param isNew
       * @returns AgencySponsorshipsResponse
       * @throws ApiError
       */
      getAgencyCampaignSponsorships(id, campaignId, page, count, withBase, platform, isNew) {
        return this.httpRequest.request({
          method: "GET",
          url: "/agencies/{id}/campaigns/{campaignId}/sponsorships",
          path: {
            "id": id,
            "campaignId": campaignId
          },
          query: {
            "page": page,
            "count": count,
            "withBase": withBase,
            "platform": platform,
            "isNew": isNew
          }
        });
      }
      /**
       * Get agency running sponsorships
       * @param id
       * @param page
       * @param count
       * @returns SponsorshipsResponse
       * @throws ApiError
       */
      getAgencyRunningSponsorships(id, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/agencies/{id}/running-sponsorships",
          path: {
            "id": id
          },
          query: {
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Get agency completed sponsorships
       * @param id
       * @param page
       * @param count
       * @returns SponsorshipsResponse
       * @throws ApiError
       */
      getAgencyCompletedSponsorships(id, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/agencies/{id}/completed-sponsorships",
          path: {
            "id": id
          },
          query: {
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Get agency sponsorships summary
       * @param id
       * @returns AgencySponsorshipsSummary
       * @throws ApiError
       */
      getAgencySponsorshipsSummary(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/agencies/{id}/sponsorships-summary",
          path: {
            "id": id
          }
        });
      }
      /**
       * Get agency sponsorship by id
       * @param id
       * @param sponsorshipId
       * @returns SponsorshipResponse
       * @throws ApiError
       */
      getAgencySponsorshipById(id, sponsorshipId) {
        return this.httpRequest.request({
          method: "GET",
          url: "/agencies/{id}/sponsorships/{sponsorshipId}",
          path: {
            "id": id,
            "sponsorshipId": sponsorshipId
          }
        });
      }
      /**
       * Start a sponsorship (outreached deployment)
       * @param id
       * @param sponsorshipId
       * @returns DeploymentResponse
       * @throws ApiError
       */
      startAgencySponsorshipById(id, sponsorshipId) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/agencies/{id}/sponsorships/{sponsorshipId}/start",
          path: {
            "id": id,
            "sponsorshipId": sponsorshipId
          }
        });
      }
      /**
       * Reject a sponsorship (outreached deployment)
       * @param id
       * @param sponsorshipId
       * @param requestBody RejectOfferPayload
       * @returns DeploymentResponse
       * @throws ApiError
       */
      rejectAgencySponsorshipById(id, sponsorshipId, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/agencies/{id}/sponsorships/{sponsorshipId}/reject",
          path: {
            "id": id,
            "sponsorshipId": sponsorshipId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get agency sponsorship preview (eligibility) by id
       * @param id
       * @param channelId
       * @param campaignGroupId
       * @returns SponsorshipResponse
       * @throws ApiError
       */
      getAgencySponsorshipPreviewById(id, channelId, campaignGroupId) {
        return this.httpRequest.request({
          method: "GET",
          url: "/agencies/{id}/channels/{channelId}/sponsorships-preview/{campaignGroupId}",
          path: {
            "id": id,
            "channelId": channelId,
            "campaignGroupId": campaignGroupId
          }
        });
      }
      /**
       * Starts an eligible sponsorship preview
       * @param id
       * @param channelId
       * @param campaignGroupId
       * @returns DeploymentResponse
       * @throws ApiError
       */
      startAgencySponsorshipPreviewById(id, channelId, campaignGroupId) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/agencies/{id}/channels/{channelId}/sponsorships-preview/{campaignGroupId}/start",
          path: {
            "id": id,
            "channelId": channelId,
            "campaignGroupId": campaignGroupId
          }
        });
      }
      /**
       * Rejects an eligible sponsorship preview
       * @param id
       * @param channelId
       * @param campaignGroupId
       * @param requestBody RejectOfferPayload
       * @returns DeploymentResponse
       * @throws ApiError
       */
      rejectAgencySponsorshipPreviewById(id, channelId, campaignGroupId, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/agencies/{id}/channels/{channelId}/sponsorships-preview/{campaignGroupId}/reject",
          path: {
            "id": id,
            "channelId": channelId,
            "campaignGroupId": campaignGroupId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Change the sponsorship state to viewed
       * @param id
       * @param sponsorshipId
       * @returns DeploymentResponse
       * @throws ApiError
       */
      updateAgencySponsorshipViewed(id, sponsorshipId) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/agencies/{id}/sponsorships/{sponsorshipId}/viewed",
          path: {
            "id": id,
            "sponsorshipId": sponsorshipId
          }
        });
      }
      /**
       * Mark the preview sponsorship as viewed
       * @param id
       * @param channelId
       * @param campaignGroupId
       * @returns DeploymentResponse
       * @throws ApiError
       */
      updateAgencyPreviewSponsorshipViewed(id, channelId, campaignGroupId) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/agencies/{id}/channels/{channelId}/sponsorships-preview/{campaignGroupId}/viewed",
          path: {
            "id": id,
            "channelId": channelId,
            "campaignGroupId": campaignGroupId
          }
        });
      }
      /**
       * update agency manual deployment with start interest
       * @param id
       * @param sponsorshipId
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      updateAgencyManualDeploymentWithStartInterest(id, sponsorshipId, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/agencies/{id}/sponsorships/{sponsorshipId}/start-interest",
          path: {
            "id": id,
            "sponsorshipId": sponsorshipId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * undo agency manual deployment start interest
       * @param id
       * @param sponsorshipId
       * @returns any Successful response
       * @throws ApiError
       */
      undoAgencyStartInterest(id, sponsorshipId) {
        return this.httpRequest.request({
          method: "POST",
          url: "/agencies/{id}/sponsorships/{sponsorshipId}/undo-start-interest",
          path: {
            "id": id,
            "sponsorshipId": sponsorshipId
          }
        });
      }
      /**
       * Send feedback for the agencies product
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      sendAgencyFeedback(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/agencies/{id}/feedback",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get agency payment url by type
       * @param id
       * @param type
       * @returns PaymentURLResponse
       * @throws ApiError
       */
      getAgencyPaymentUrl(id, type) {
        return this.httpRequest.request({
          method: "GET",
          url: "/agencies/{id}/payment/url",
          path: {
            "id": id
          },
          query: {
            "type": type
          }
        });
      }
      /**
       * Suggest a sponsorship for a creator by agent
       * @param id
       * @param creatorId
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      agencySuggestSponsorshipForCreator(id, creatorId, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/agencies/{id}/creators/{creatorId}/suggest",
          path: {
            "id": id,
            "creatorId": creatorId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Unassign a creator from an agency by agent
       * @param id
       * @param creatorId
       * @returns any Successful response
       * @throws ApiError
       */
      deleteAgencyCreatorByAgent(id, creatorId) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/agencies/{id}/creators/{creatorId}",
          path: {
            "id": id,
            "creatorId": creatorId
          }
        });
      }
      /**
       * Returns information about a specific agencies in bulk
       * @param ids
       * @param requestBody
       * @returns DeploymentsStatsForCrm
       * @throws ApiError
       */
      getAgenciesBulk(ids, requestBody) {
        return this.httpRequest.request({
          method: "GET",
          url: "/agencies",
          query: {
            "ids": ids
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Returns stats about all the agencies
       * @returns AgenciesStatsResponse
       * @throws ApiError
       */
      getAgenciesStats() {
        return this.httpRequest.request({
          method: "GET",
          url: "/agencies/stats"
        });
      }
      /**
       * Update agencies stats
       * @returns any Successful response
       * @throws ApiError
       */
      updateAgenciesStats() {
        return this.httpRequest.request({
          method: "POST",
          url: "/agencies/stats"
        });
      }
      /**
       * Returns information about a specific agency
       * @param id
       * @param page
       * @param count
       * @returns AgencyDeploymentsResponse
       * @throws ApiError
       */
      getAgencyDeployments(id, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/agencies/{id}/deployments",
          path: {
            "id": id
          },
          query: {
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Returns information about a specific agents in bulk
       * @param ids
       * @param requestBody
       * @returns DeploymentsStatsForCrm
       * @throws ApiError
       */
      getAgentsBulk(ids, requestBody) {
        return this.httpRequest.request({
          method: "GET",
          url: "/agencies/agents",
          query: {
            "ids": ids
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Send manual agency digest email
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      sendManualAgencyDigestEmail(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/agencies/{id}/manual-digest",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Send manual agency email test
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      sendManualAgencyEmailTest(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/agencies/{id}/manual-email-test",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Send daily agency digest emails
       * @returns any Successful response
       * @throws ApiError
       */
      sendDailyAgencyDigestEmails() {
        return this.httpRequest.request({
          method: "POST",
          url: "/agencies/daily-digest"
        });
      }
      /**
       * Send weekly agency digest emails
       * @returns any Successful response
       * @throws ApiError
       */
      sendWeeklyAgencyDigestEmails() {
        return this.httpRequest.request({
          method: "POST",
          url: "/agencies/weekly-digest"
        });
      }
      /**
       * Agency block advertiser on behalf of creator
       * @param id
       * @param creatorId
       * @param advertiserId
       * @returns any Successful response
       * @throws ApiError
       */
      agencyBlockAdvertiser(id, creatorId, advertiserId) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/agencies/{id}/creators/{creatorId}/block-advertiser/{advertiserId}",
          path: {
            "id": id,
            "creatorId": creatorId,
            "advertiserId": advertiserId
          }
        });
      }
      /**
       * Agency unblock advertiser on behalf of creator
       * @param id
       * @param creatorId
       * @param advertiserId
       * @returns any Successful response
       * @throws ApiError
       */
      agencyUnblockAdvertiser(id, creatorId, advertiserId) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/agencies/{id}/creators/{creatorId}/unblock-advertiser/{advertiserId}",
          path: {
            "id": id,
            "creatorId": creatorId,
            "advertiserId": advertiserId
          }
        });
      }
      /**
       * Update agency email preferences
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      updateAgencyEmailPreferences(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/agencies/{id}/email-preferences",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get agency email preferences
       * @param id
       * @returns AgencyEmailPreferences
       * @throws ApiError
       */
      getAgencyEmailPreferences(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/agencies/{id}/email-preferences",
          path: {
            "id": id
          }
        });
      }
      /**
       * Get agency manager data
       * @param id
       * @param managerId
       * @returns AgencyManagerResponse
       * @throws ApiError
       */
      getAgencyManagerData(id, managerId) {
        return this.httpRequest.request({
          method: "GET",
          url: "/agencies/{id}/managers/{managerId}",
          path: {
            "id": id,
            "managerId": managerId
          }
        });
      }
    };
    exports2.AgenciesService = AgenciesService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/AttributionService.js
var require_AttributionService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/AttributionService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AttributionService = void 0;
    var AttributionService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Returns the attribution status
       * @param fromDate
       * @param toDate
       * @param page
       * @param count
       * @param advertiserId
       * @param attributionMethod
       * @returns AttributionStatusReportResponse
       * @throws ApiError
       */
      attributionStatusReport(fromDate, toDate, page, count, advertiserId, attributionMethod) {
        return this.httpRequest.request({
          method: "GET",
          url: "/attribution/status",
          query: {
            "page": page,
            "count": count,
            "fromDate": fromDate,
            "toDate": toDate,
            "advertiserId": advertiserId,
            "attributionMethod": attributionMethod
          }
        });
      }
    };
    exports2.AttributionService = AttributionService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/Au10TixService.js
var require_Au10TixService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/Au10TixService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Au10TixService = void 0;
    var Au10TixService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Webhook handler from Au10tix
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      receiveAu10TixResult(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/ext/au10tix/result",
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.Au10TixService = Au10TixService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/AuditLogService.js
var require_AuditLogService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/AuditLogService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AuditLogService = void 0;
    var AuditLogService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Returns a list of AuditLogs.
       * @param modelName
       * @param refId
       * @param type
       * @param page
       * @param count
       * @returns AuditLogsResponse
       * @throws ApiError
       */
      getAuditLogsByRefId(modelName, refId, type, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/auditlog/{modelName}/{refId}",
          path: {
            "modelName": modelName,
            "refId": refId
          },
          query: {
            "type": type,
            "page": page,
            "count": count
          }
        });
      }
    };
    exports2.AuditLogService = AuditLogService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/AuthService.js
var require_AuthService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/AuthService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AuthService = void 0;
    var AuthService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Hello
       * @returns any Successful response
       * @throws ApiError
       */
      authControllerHello() {
        return this.httpRequest.request({
          method: "GET",
          url: "/hello"
        });
      }
    };
    exports2.AuthService = AuthService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/BulkActionsService.js
var require_BulkActionsService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/BulkActionsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BulkActionsService = void 0;
    var BulkActionsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Add a new bulk action
       * @param requestBody
       * @returns BulkActionResponse
       * @throws ApiError
       */
      createBulkAction(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/bulk-action",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get all bulk actions
       * @param payload
       * @param page
       * @param count
       * @returns BulkActionsResponse
       * @throws ApiError
       */
      getBulkActions(payload, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/bulk-action",
          query: {
            "payload": payload,
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Get bulk action by id
       * @param id
       * @returns BulkActionResponse
       * @throws ApiError
       */
      getBulkAction(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/bulk-action/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Get bulk action by id and then get signed url for exported file
       * @param id
       * @returns GetFileSignedUrlResponse
       * @throws ApiError
       */
      getBulkActionExportedFileSignedUrl(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/bulk-action/{id}/signed-url",
          path: {
            "id": id
          }
        });
      }
      /**
       * Get bulk action entries by action id
       * @param id
       * @param page
       * @param count
       * @returns BulkActionEntriesResponse
       * @throws ApiError
       */
      getBulkActionEntries(id, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/bulk-action/entries/{id}",
          path: {
            "id": id
          },
          query: {
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Download the errors when processing a bulk action as csv.
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      downloadBulkActionErrorsById(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/bulk-action/{id}/errors-download",
          path: {
            "id": id
          }
        });
      }
      /**
       * Place the entries pending processing into the queue again.
       * @param id
       * @returns FileProcessResponse
       * @throws ApiError
       */
      replayBulkActionById(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/bulk-action/{id}/replay",
          path: {
            "id": id
          }
        });
      }
    };
    exports2.BulkActionsService = BulkActionsService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/CampaignBudgetsService.js
var require_CampaignBudgetsService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/CampaignBudgetsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CampaignBudgetsService = void 0;
    var CampaignBudgetsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Returns a list of campaign budgets.
       * @param campaignId
       * @param advertiserId
       * @param startDateStr
       * @param endDateStr
       * @param sort
       * @param state
       * @param page
       * @param count
       * @param q
       * @returns CampaignBudgetsResponse
       * @throws ApiError
       */
      getCampaignBudgets(campaignId, advertiserId, startDateStr, endDateStr, sort, state, page, count, q) {
        return this.httpRequest.request({
          method: "GET",
          url: "/campaignbudgets",
          query: {
            "campaignId": campaignId,
            "advertiserId": advertiserId,
            "startDateStr": startDateStr,
            "endDateStr": endDateStr,
            "sort": sort,
            "state": state,
            "page": page,
            "count": count,
            "q": q
          }
        });
      }
      /**
       * Returns a specific CampaignBudget by id.
       * @param id
       * @returns CampaignBudgetResponse
       * @throws ApiError
       */
      getCampaignBudget(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/campaignbudgets/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Update a CampaignBudget
       * @param id
       * @param requestBody
       * @returns CampaignBudgetResponse
       * @throws ApiError
       */
      updateCampaignBudget(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/campaignbudgets/{id}",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Delete a CampaignBudget
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      deleteCampaignBudget(id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/campaignbudgets/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Finalizes (freezes) a campaign budget
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      finalizeCampaignBudget(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/campaignbudgets/{id}/finalize",
          path: {
            "id": id
          }
        });
      }
      /**
       * Reopens a campaign budget
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      reopenCampaignBudget(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/campaignbudgets/{id}/reopen",
          path: {
            "id": id
          }
        });
      }
      /**
       * Marks a campaign budget as invoiced (or not)
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      invoiceCampaignBudget(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/campaignbudgets/{id}/invoice",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Returns billing info for a campaign budget
       * @param id
       * @returns BillingInfoResponse
       * @throws ApiError
       */
      getCampaignBudgetBillingInfo(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/campaignbudgets/{id}/billing-info",
          path: {
            "id": id
          }
        });
      }
      /**
       * Marks a campaign budget as billed
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      billCampaignBudget(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/campaignbudgets/{id}/bill",
          path: {
            "id": id
          }
        });
      }
      /**
       * Returns campaign group revenues under a specific CampaignBudget by id.
       * @param id
       * @param sort
       * @param search
       * @param page
       * @param count
       * @returns CampaignGroupRevenueResponse
       * @throws ApiError
       */
      getCampaignBudgetGroupRevenues(id, sort, search, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/campaignbudgets/{id}/campaign-group-revenues",
          path: {
            "id": id
          },
          query: {
            "sort": sort,
            "search": search,
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Returns campaign group revenues under a specific CampaignBudget by id.
       * @param id
       * @param campaignGroupId
       * @param sort
       * @param filterZeroRevenue
       * @param flightStartDateMin
       * @param flightStartDateMax
       * @param page
       * @param count
       * @returns DeploymentRevenueResponse
       * @throws ApiError
       */
      getCampaignBudgetDeploymentRevenues(id, campaignGroupId, sort, filterZeroRevenue, flightStartDateMin, flightStartDateMax, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/campaignbudgets/{id}/deployment-revenues",
          path: {
            "id": id
          },
          query: {
            "campaignGroupId": campaignGroupId,
            "sort": sort,
            "filterZeroRevenue": filterZeroRevenue,
            "flightStartDateMin": flightStartDateMin,
            "flightStartDateMax": flightStartDateMax,
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Returns viewer deployment revenues under a specific CampaignBudget by id.
       * @param id
       * @param campaignGroupId
       * @param sort
       * @param filterZeroRevenue
       * @param page
       * @param count
       * @returns ViewerDeploymentRevenueResponse
       * @throws ApiError
       */
      getCampaignBudgetViewerDeploymentRevenues(id, campaignGroupId, sort, filterZeroRevenue, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/campaignbudgets/{id}/viewer-deployment-revenues",
          path: {
            "id": id
          },
          query: {
            "campaignGroupId": campaignGroupId,
            "sort": sort,
            "filterZeroRevenue": filterZeroRevenue,
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Recalculate all deployments in an entire campaign budget
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      recalcCampaignBudget(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/campaignbudgets/{id}/recalc-deployments",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * For every campaign budget in a date range, generate a daily revenue record for every day of the budget
       * @param requestBody
       * @returns CampaignBudgetGenerateDailyRevenuesResponse
       * @throws ApiError
       */
      generateDailyRevenuesForCampaignBudgets(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/campaignbudgets/generate-daily-revenues",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * For a specific campaign budget, generate a daily revenue record for every day of the budget
       * @param id
       * @returns CampaignBudgetGenerateDailyRevenuesResponse
       * @throws ApiError
       */
      generateDailyRevenuesForCampaignBudget(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/campaignbudgets/{id}/generate-daily-revenues",
          path: {
            "id": id
          }
        });
      }
      /**
       * Trigger state changes for campaign budgets
       * @returns any Successful response
       * @throws ApiError
       */
      triggerCampaignBudgetStateChanges() {
        return this.httpRequest.request({
          method: "POST",
          url: "/campaignbudgets/trigger-state-changes"
        });
      }
      /**
       * Recalculate revenues for campaign budgets
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      recalculateRevenuesForCampaignBudgets(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/campaignbudgets/recalculate-revenues",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Returns campaign group revenues under a specific CampaignBudget by id.
       * @param budgetIds
       * @param campaignIds
       * @param campaignGroupIds
       * @param deploymentIds
       * @param startDateStr
       * @param endDateStr
       * @param sort
       * @param filterZeroRevenue
       * @param page
       * @param count
       * @param q
       * @returns DeploymentRevenueDailyResponse
       * @throws ApiError
       */
      getCampaignBudgetsDeploymentRevenuesDaily(budgetIds, campaignIds, campaignGroupIds, deploymentIds, startDateStr, endDateStr, sort, filterZeroRevenue, page, count, q) {
        return this.httpRequest.request({
          method: "GET",
          url: "/campaignbudgets/daily-revenues/deployments",
          query: {
            "budgetIds": budgetIds,
            "campaignIds": campaignIds,
            "campaignGroupIds": campaignGroupIds,
            "deploymentIds": deploymentIds,
            "startDateStr": startDateStr,
            "endDateStr": endDateStr,
            "sort": sort,
            "filterZeroRevenue": filterZeroRevenue,
            "page": page,
            "count": count,
            "q": q
          }
        });
      }
      /**
       * Returns viewer deployment revenues for given budget ids, aggregated by creator
       * @param budgetIds
       * @param page
       * @param count
       * @param q
       * @returns ViewerDeploymentRevenueDailyByCreatorResponse
       * @throws ApiError
       */
      getCampaignBudgetsViewerDeploymentRevenuesDailyForSingular(budgetIds, page, count, q) {
        return this.httpRequest.request({
          method: "GET",
          url: "/campaignbudgets/daily-revenues/viewer-deployments",
          query: {
            "budgetIds": budgetIds,
            "page": page,
            "count": count,
            "q": q
          }
        });
      }
    };
    exports2.CampaignBudgetsService = CampaignBudgetsService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/CampaignBudgetsRegionalCpiService.js
var require_CampaignBudgetsRegionalCpiService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/CampaignBudgetsRegionalCpiService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CampaignBudgetsRegionalCpiService = void 0;
    var CampaignBudgetsRegionalCpiService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Returns a list of regional cpis for a campaign budget.
       * @param id
       * @returns CampaignBudgetRegionalCpiResponse
       * @throws ApiError
       */
      getCampaignBudgetRegionalCpis(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/campaignbudgets/{id}/regional-cpis",
          path: {
            "id": id
          }
        });
      }
      /**
       * Create a CampaignBudget Regional CPI
       * @param id
       * @param requestBody
       * @returns CampaignBudgetRegionalCpiResponse
       * @throws ApiError
       */
      createCampaignBudgetRegionalCpi(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/campaignbudgets/{id}/regional-cpis",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Update a CampaignBudget Regional CPI
       * @param id
       * @param advertiserRegionId
       * @param requestBody
       * @returns CampaignBudgetRegionalCpiResponse
       * @throws ApiError
       */
      updateCampaignBudgetRegionalCpi(id, advertiserRegionId, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/campaignbudgets/{id}/regional-cpis/{advertiserRegionId}",
          path: {
            "id": id,
            "advertiserRegionId": advertiserRegionId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Delete a CampaignBudget Regional CPI
       * @param id
       * @param advertiserRegionId
       * @returns any Successful response
       * @throws ApiError
       */
      deleteCampaignBudgetRegionalCpi(id, advertiserRegionId) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/campaignbudgets/{id}/regional-cpis/{advertiserRegionId}",
          path: {
            "id": id,
            "advertiserRegionId": advertiserRegionId
          }
        });
      }
    };
    exports2.CampaignBudgetsRegionalCpiService = CampaignBudgetsRegionalCpiService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/CampaignGroupsRelationsService.js
var require_CampaignGroupsRelationsService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/CampaignGroupsRelationsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CampaignGroupsRelationsService = void 0;
    var CampaignGroupsRelationsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Returns a list of relations for a specific group.
       * @param id
       * @returns CampaignGroupRelationResponse
       * @throws ApiError
       */
      getCampaignGroupRelationsByGroupId(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/groups/{id}/relations",
          path: {
            "id": id
          }
        });
      }
      /**
       * Returns a list of campaign group relations for a specific deployment.
       * @param id
       * @returns CampaignGroupRelationResponse
       * @throws ApiError
       */
      getCampaignGroupRelationsByDeploymentId(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/deployment/{id}/group-relations",
          path: {
            "id": id
          }
        });
      }
      /**
       * Returns a specific CampaignGroupRelation by id.
       * @param id
       * @returns CampaignGroupRelationResponse
       * @throws ApiError
       */
      getCampaignGroupRelation(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/campaigngrouprelations/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Update a CampaignGroupRelation
       * @param id
       * @param requestBody
       * @returns CampaignGroupRelationResponse
       * @throws ApiError
       */
      updateCampaignGroupRelation(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/campaigngrouprelations/{id}",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Delete a CampaignGroupRelation
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      deleteCampaignGroupRelation(id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/campaigngrouprelations/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Create a CampaignGroupRelation
       * @param requestBody
       * @returns CampaignGroupRelationResponse
       * @throws ApiError
       */
      createCampaignGroupRelation(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/campaigngrouprelations",
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.CampaignGroupsRelationsService = CampaignGroupsRelationsService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/CampaignPricingClustersService.js
var require_CampaignPricingClustersService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/CampaignPricingClustersService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CampaignPricingClustersService = void 0;
    var CampaignPricingClustersService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Get campaign pricing clusters
       * @param campaignId
       * @returns CampaignPricingClustersResponse
       * @throws ApiError
       */
      getCampaignPricingClusters(campaignId) {
        return this.httpRequest.request({
          method: "GET",
          url: "/pricing-clusters/{campaignId}",
          path: {
            "campaignId": campaignId
          }
        });
      }
      /**
       * Get campaign group pricing clusters
       * @param campaignGroupId
       * @returns CampaignPricingClustersResponse
       * @throws ApiError
       */
      getCampaignGroupPricingClusters(campaignGroupId) {
        return this.httpRequest.request({
          method: "GET",
          url: "/group-pricing-clusters/{campaignGroupId}",
          path: {
            "campaignGroupId": campaignGroupId
          }
        });
      }
      /**
       * Upload campaign pricing clusters from GCS
       * @returns any Successful response
       * @throws ApiError
       */
      uploadPricingClustersDailySync() {
        return this.httpRequest.request({
          method: "POST",
          url: "/pricing-clusters/upload-daily-sync"
        });
      }
      /**
       * Get group pricing clusters
       * @param groupId
       * @param minAmountPerEvent
       * @param maxAmountPerEvent
       * @returns GroupPricingResponse
       * @throws ApiError
       */
      getGroupPricingClusters(groupId, minAmountPerEvent, maxAmountPerEvent) {
        return this.httpRequest.request({
          method: "GET",
          url: "/pricing-clusters/{groupId}/group",
          path: {
            "groupId": groupId
          },
          query: {
            "minAmountPerEvent": minAmountPerEvent,
            "maxAmountPerEvent": maxAmountPerEvent
          }
        });
      }
      /**
       * Get group base pricing
       * @param groupId
       * @param minPayout
       * @param maxPayout
       * @returns GroupBasePricingResponse
       * @throws ApiError
       */
      getGroupBasePricing(groupId, minPayout, maxPayout) {
        return this.httpRequest.request({
          method: "GET",
          url: "/pricing-clusters/{groupId}/base-pricing",
          path: {
            "groupId": groupId
          },
          query: {
            "minPayout": minPayout,
            "maxPayout": maxPayout
          }
        });
      }
      /**
       * Apply group base pricing
       * @param groupId
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      applyGroupBasePricing(groupId, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/pricing-clusters/{groupId}/base-pricing",
          path: {
            "groupId": groupId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.CampaignPricingClustersService = CampaignPricingClustersService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/CampaignsService.js
var require_CampaignsService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/CampaignsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CampaignsService = void 0;
    var CampaignsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Returns a list of campaigns.
       * @param page 'Page number (default 1)
       * @param count Number of results per page (default 10)
       * @param q Query to filter the results on
       * @returns CampaignsResponse
       * @throws ApiError
       */
      getCampaigns(page, count, q) {
        return this.httpRequest.request({
          method: "GET",
          url: "/campaigns",
          query: {
            "page": page,
            "count": count,
            "q": q
          }
        });
      }
      /**
       * Create a campaign
       * @param requestBody
       * @returns CampaignResponse
       * @throws ApiError
       */
      createCampaign(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/campaigns",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Campaigns search (filter + sort)
       * @param sort
       * @param filter
       * @param page
       * @param count
       * @returns CampaignSearchResult
       * @throws ApiError
       */
      searchCampaigns(sort, filter, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/campaigns/search",
          query: {
            "sort": sort,
            "filter": filter,
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Returns a specific campaign by id.
       * @param id
       * @returns CampaignResponse
       * @throws ApiError
       */
      getCampaign(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/campaigns/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Update a campaign
       * @param id
       * @param requestBody
       * @returns CampaignResponse
       * @throws ApiError
       */
      updateCampaign(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/campaigns/{id}",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Delete a campaign
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      deleteCampaign(id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/campaigns/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Campaigns column information meta data
       * @returns SearchColumnsMetadata
       * @throws ApiError
       */
      getCampaignsSearchMetadata() {
        return this.httpRequest.request({
          method: "GET",
          url: "/campaigns/search/metadata"
        });
      }
      /**
       * Returns a specific campaign by id with metadata.
       * @param id
       * @returns CampaignMetadata
       * @throws ApiError
       */
      getCampaignMetadata(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/campaigns/{id}/metadata",
          path: {
            "id": id
          }
        });
      }
      /**
       * Duplicate a campaign
       * @param id
       * @param requestBody
       * @returns CampaignResponse
       * @throws ApiError
       */
      duplicateCampaign(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/campaigns/{id}/duplicate",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * add deliverable to campaign
       * @param id
       * @param requestBody
       * @returns CampaignDeliverableParam
       * @throws ApiError
       */
      addCampaignDeliverable(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/campaigns/{id}/deliverable",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Returns available campaign label terms information
       * @param string
       * @param size
       * @returns SearchTermsResponse
       * @throws ApiError
       */
      getCampaignsLabelsTerms(string, size) {
        return this.httpRequest.request({
          method: "GET",
          url: "/campaigns/labels/terms",
          query: {
            "string": string,
            "size": size
          }
        });
      }
      /**
       * Create a campaign budget
       * @param id
       * @param requestBody
       * @returns CampaignResponse
       * @throws ApiError
       */
      createCampaignBudget(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/campaigns/{id}/budgets",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Update a campaign revenue
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      updateCampaignRevenue(id) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/campaigns/{id}/recalc-revenue",
          path: {
            "id": id
          }
        });
      }
      /**
       * Get campaign revenue(s)
       * @param id
       * @returns CampaignRevenueResponse
       * @throws ApiError
       */
      getCampaignRevenue(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/campaigns/{id}/revenues",
          path: {
            "id": id
          }
        });
      }
      /**
       * Get campaign revenue(s) broken down by day
       * @param id
       * @param startDate
       * @param endDate
       * @param page
       * @param count
       * @returns CampaignRevenueDailyResponse
       * @throws ApiError
       */
      getCampaignRevenueDaily(id, startDate, endDate, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/campaigns/{id}/revenues/daily",
          path: {
            "id": id
          },
          query: {
            "startDate": startDate,
            "endDate": endDate,
            "page": page,
            "count": count
          }
        });
      }
    };
    exports2.CampaignsService = CampaignsService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/CampaignsExperimentsService.js
var require_CampaignsExperimentsService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/CampaignsExperimentsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CampaignsExperimentsService = void 0;
    var CampaignsExperimentsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Get campaign experiments
       * @param id
       * @returns CampaignExperimentsResponse
       * @throws ApiError
       */
      getCampaignExperiments(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/campaigns/{id}/experiments",
          path: {
            "id": id
          }
        });
      }
      /**
       * Create a campaign experiment
       * @param id
       * @param requestBody
       * @returns CampaignExperimentResponse
       * @throws ApiError
       */
      createCampaignExperiment(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/campaigns/{id}/experiments",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Update a campaign experiment
       * @param campaignId
       * @param experimentId
       * @param requestBody
       * @returns CampaignExperimentResponse
       * @throws ApiError
       */
      updateCampaignExperiment(campaignId, experimentId, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/campaigns/{campaignId}/experiments/{experimentId}",
          path: {
            "campaignId": campaignId,
            "experimentId": experimentId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Delete a campaign experiment
       * @param campaignId
       * @param experimentId
       * @returns CampaignExperimentResponse
       * @throws ApiError
       */
      deleteCampaignExperiment(campaignId, experimentId) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/campaigns/{campaignId}/experiments/{experimentId}",
          path: {
            "campaignId": campaignId,
            "experimentId": experimentId
          }
        });
      }
      /**
       * Add a group to a campaign experiment
       * @param campaignId
       * @param experimentId
       * @param groupId
       * @returns CampaignExperimentResponse
       * @throws ApiError
       */
      addGroupToCampaignExperiment(campaignId, experimentId, groupId) {
        return this.httpRequest.request({
          method: "POST",
          url: "/campaigns/{campaignId}/experiments/{experimentId}/groups/{groupId}",
          path: {
            "campaignId": campaignId,
            "experimentId": experimentId,
            "groupId": groupId
          }
        });
      }
      /**
       * Remove a group from a campaign experiment
       * @param campaignId
       * @param experimentId
       * @param groupId
       * @returns CampaignExperimentResponse
       * @throws ApiError
       */
      removeGroupFromCampaignExperiment(campaignId, experimentId, groupId) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/campaigns/{campaignId}/experiments/{experimentId}/groups/{groupId}",
          path: {
            "campaignId": campaignId,
            "experimentId": experimentId,
            "groupId": groupId
          }
        });
      }
      /**
       * Update the eligibility filters of a campaign experiment
       * @param campaignId
       * @param experimentId
       * @param requestBody
       * @returns CampaignGroupEligibilityResponse
       * @throws ApiError
       */
      updateCampaignExperimentEligibility(campaignId, experimentId, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/campaigns/{campaignId}/experiments/{experimentId}/eligibility",
          path: {
            "campaignId": campaignId,
            "experimentId": experimentId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Enable the eligibility filters of a campaign experiment
       * @param campaignId
       * @param experimentId
       * @returns CampaignGroupEligibilityResponse
       * @throws ApiError
       */
      enableCampaignExperimentEligibility(campaignId, experimentId) {
        return this.httpRequest.request({
          method: "POST",
          url: "/campaigns/{campaignId}/experiments/{experimentId}/enable",
          path: {
            "campaignId": campaignId,
            "experimentId": experimentId
          }
        });
      }
      /**
       * Disable the eligibility filters of a campaign experiment
       * @param campaignId
       * @param experimentId
       * @returns CampaignGroupEligibilityResponse
       * @throws ApiError
       */
      disableCampaignExperimentEligibility(campaignId, experimentId) {
        return this.httpRequest.request({
          method: "POST",
          url: "/campaigns/{campaignId}/experiments/{experimentId}/disable",
          path: {
            "campaignId": campaignId,
            "experimentId": experimentId
          }
        });
      }
    };
    exports2.CampaignsExperimentsService = CampaignsExperimentsService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/CampaignsStatsService.js
var require_CampaignsStatsService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/CampaignsStatsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CampaignsStatsService = void 0;
    var CampaignsStatsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Get campaign stats and budget context for plotting
       * @param id
       * @param budgetId
       * @returns CampaignStatsContextResponse
       * @throws ApiError
       */
      getCampaignStatsContext(id, budgetId) {
        return this.httpRequest.request({
          method: "GET",
          url: "/campaigns/{id}/{budgetId}/stats-plot/context",
          path: {
            "id": id,
            "budgetId": budgetId
          }
        });
      }
      /**
       * Get campaign and budget stats for plot
       * @param id
       * @param budgetId
       * @param type
       * @param timeBucket
       * @param delta
       * @returns CampaignStatsPlotResponse
       * @throws ApiError
       */
      getCampaignStatsForPlot(id, budgetId, type, timeBucket, delta) {
        return this.httpRequest.request({
          method: "GET",
          url: "/campaigns/{id}/{budgetId}/stats-plot",
          path: {
            "id": id,
            "budgetId": budgetId
          },
          query: {
            "type": type,
            "timeBucket": timeBucket,
            "delta": delta
          }
        });
      }
      /**
       * Get campaign stats available for plot
       * @returns CampaignStatsTypesResponse
       * @throws ApiError
       */
      getCampaignStatsTypes() {
        return this.httpRequest.request({
          method: "GET",
          url: "/campaigns/stats-plot/types"
        });
      }
    };
    exports2.CampaignsStatsService = CampaignsStatsService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/ConfigService.js
var require_ConfigService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/ConfigService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ConfigService = void 0;
    var ConfigService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Returns a list of countries
       * @returns Countries
       * @throws ApiError
       */
      getCountries() {
        return this.httpRequest.request({
          method: "GET",
          url: "/config/countries"
        });
      }
      /**
       * Returns a list of countries for pricing
       * @returns Countries
       * @throws ApiError
       */
      getPricingCountries() {
        return this.httpRequest.request({
          method: "GET",
          url: "/config/countries-pricing"
        });
      }
      /**
       * Returns a list of languages
       * @returns Languages
       * @throws ApiError
       */
      getLanguages() {
        return this.httpRequest.request({
          method: "GET",
          url: "/config/languages"
        });
      }
      /**
       * Returns a list of time zones
       * @returns TimeZones
       * @throws ApiError
       */
      getTimeZones() {
        return this.httpRequest.request({
          method: "GET",
          url: "/config/timezones"
        });
      }
      /**
       * Returns a list of types of deliverables
       * @returns Deliverables
       * @throws ApiError
       */
      getDeliverableTypes() {
        return this.httpRequest.request({
          method: "GET",
          url: "/config/deliverables"
        });
      }
      /**
       * Returns a list of budget categories
       * @returns BudgetCategoriesResponse
       * @throws ApiError
       */
      getBudgetCategories() {
        return this.httpRequest.request({
          method: "GET",
          url: "/config/budget/categories"
        });
      }
    };
    exports2.ConfigService = ConfigService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/CreatorsService.js
var require_CreatorsService2 = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/CreatorsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreatorsService = void 0;
    var CreatorsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Returns information about a specific creators
       * @param ids
       * @returns DeploymentsStatsForCrm
       * @throws ApiError
       */
      getCreatorsBulk(ids) {
        return this.httpRequest.request({
          method: "GET",
          url: "/creators",
          query: {
            "ids": ids
          }
        });
      }
      /**
       * Returns information about a specific creators
       * @param id
       * @returns CreatorScore
       * @throws ApiError
       */
      getCreatorScore(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/creators/{id}/score",
          path: {
            "id": id
          }
        });
      }
    };
    exports2.CreatorsService = CreatorsService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/DeliverablesService.js
var require_DeliverablesService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/DeliverablesService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeliverablesService = void 0;
    var DeliverablesService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Delete a deliverables
       * @param id
       * @returns CampaignDeliverableDeletionParam
       * @throws ApiError
       */
      deleteDeliverable(id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/deliverables/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Update deliverable
       * @param id
       * @param requestBody
       * @returns CampaignDeliverableParam
       * @throws ApiError
       */
      updateDeliverable(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/deliverables/{id}",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Generate test brief
       * @param requestBody
       * @returns TestBriefResponse
       * @throws ApiError
       */
      generateTestBrief(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deliverables/brief",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Check that the file of a deliverable has the correct permissions
       * @param requestBody
       * @returns CheckFilePermissionResponse
       * @throws ApiError
       */
      checkFilePermission(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deliverables/file/permission",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Deliverables search. Pass query string with the filters you wish to apply.
       * @param sort
       * @param filter
       * @param page
       * @param count
       * @returns DeliverableSearchResult
       * @throws ApiError
       */
      searchDeliverables(sort, filter, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/deliverables/search",
          query: {
            "sort": sort,
            "filter": filter,
            "page": page,
            "count": count
          }
        });
      }
    };
    exports2.DeliverablesService = DeliverablesService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/DeliverableTrackingService.js
var require_DeliverableTrackingService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/DeliverableTrackingService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeliverableTrackingService = void 0;
    var DeliverableTrackingService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Updates goal for a tracked deliverable
       * @param deliverableId
       * @param requestBody
       * @returns DeliverableResponse
       * @throws ApiError
       */
      updateDeliverableGoal(deliverableId, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/tracking/{deliverableId}",
          path: {
            "deliverableId": deliverableId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Updates goal progress for multiple deliverables for a given deployment
       * @param deploymentId
       * @param requestBody
       * @returns DeliverablesResponse
       * @throws ApiError
       */
      updateDeliverableGoals(deploymentId, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/tracking/deployment/{deploymentId}",
          path: {
            "deploymentId": deploymentId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Returns the full tree of entities down to a given deployment
       * @param deploymentId
       * @returns DeploymentTreeResponse
       * @throws ApiError
       */
      getDeploymentTree(deploymentId) {
        return this.httpRequest.request({
          method: "GET",
          url: "/tracking/deployment/{deploymentId}",
          path: {
            "deploymentId": deploymentId
          }
        });
      }
      /**
       * Returns the full tree of entities for all deployments matching a given criteria
       * @param deliverableType Deliverable type
       * @param states Deplayment states list
       * @returns DeploymentsTreeResponse
       * @throws ApiError
       */
      getDeploymentsTree(deliverableType, states) {
        return this.httpRequest.request({
          method: "GET",
          url: "/tracking/deployments",
          query: {
            "deliverableType": deliverableType,
            "states[]": states
          }
        });
      }
    };
    exports2.DeliverableTrackingService = DeliverableTrackingService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/DeploymentsService.js
var require_DeploymentsService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/DeploymentsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeploymentsService = void 0;
    var DeploymentsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Get deployment score
       * @param id
       * @returns DeploymentVariablesResponse
       * @throws ApiError
       */
      getDeploymentScore(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/deployments/{id}/score",
          path: {
            "id": id
          }
        });
      }
      /**
       * Returns a list of deployments.
       * @param groupId
       * @param creatorId
       * @param page
       * @param count
       * @returns DeploymentsResponse
       * @throws ApiError
       */
      getDeployments(groupId, creatorId, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/deployments",
          query: {
            "groupId": groupId,
            "creatorId": creatorId,
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Queue deployments for tracking
       * @returns any Successful response
       * @throws ApiError
       */
      queueDeploymentTracking() {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/track"
        });
      }
      /**
       * Get deployment information
       * @param id
       * @returns DeploymentResponse
       * @throws ApiError
       */
      getDeployment(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/deployments/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Update deployment information
       * @param id
       * @param requestBody
       * @returns DeploymentResponse
       * @throws ApiError
       */
      updateDeployment(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/deployments/{id}",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get deployment payment information
       * @param id
       * @returns DeploymentPaymentResponse
       * @throws ApiError
       */
      getDeploymentPayment(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/deployments/{id}/payment",
          path: {
            "id": id
          }
        });
      }
      /**
       * Get deployment information
       * @param id
       * @returns DeploymentTreeResponse
       * @throws ApiError
       */
      getExtendedDeployment(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/deployments/extended/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Get deployment for emails
       * @param id
       * @returns DeploymentEmailResponse
       * @throws ApiError
       */
      getDeploymentForEmails(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/deployments/emails/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Update deployment custom fields
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      updateDeploymentCustomFields(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/deployments/{id}/custom-fields",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Configuration Update Preview
       * @param id
       * @param endDate
       * @param daysToDelay
       * @param paymentDueDateDelay
       * @returns DeploymentConfigurationPreviewResponse
       * @throws ApiError
       */
      getConfigurationUpdatePreview(id, endDate, daysToDelay, paymentDueDateDelay) {
        return this.httpRequest.request({
          method: "GET",
          url: "/deployments/{id}/configuration-update-preview",
          path: {
            "id": id
          },
          query: {
            "endDate": endDate,
            "daysToDelay": daysToDelay,
            "paymentDueDateDelay": paymentDueDateDelay
          }
        });
      }
      /**
       * Add Deliverable to Deployment
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      addDeliverableToDeployment(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/{id}/deliverables",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Delete Deliverable from Deployment
       * @param id
       * @param deliverableId
       * @returns any Successful response
       * @throws ApiError
       */
      deleteDeliverableFromDeployment(id, deliverableId) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/deployments/{id}/deliverables/{deliverableId}",
          path: {
            "id": id,
            "deliverableId": deliverableId
          }
        });
      }
      /**
       * add mission to deployment
       * @param id
       * @param requestBody AddMissionBody
       * @returns Mission
       * @throws ApiError
       */
      addDeploymentMission(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/{id}/mission",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * update deployment mission
       * @param id
       * @param missionId
       * @param requestBody AddMissionBody
       * @returns any Successful response
       * @throws ApiError
       */
      updateDeploymentMission(id, missionId, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/deployments/{id}/mission/{missionId}",
          path: {
            "id": id,
            "missionId": missionId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * delete deployment mission
       * @param id
       * @param missionId
       * @returns any Successful response
       * @throws ApiError
       */
      deleteDeploymentMission(id, missionId) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/deployments/{id}/mission/{missionId}",
          path: {
            "id": id,
            "missionId": missionId
          }
        });
      }
      /**
       * Log manual outreach
       * @param id
       * @param requestBody
       * @returns DeploymentResponse
       * @throws ApiError
       */
      logDeploymentManualOutreach(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/{id}/log-manual-outreach",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Log email outreach
       * @param id
       * @param requestBody
       * @returns DeploymentResponse
       * @throws ApiError
       */
      logDeploymentEmailOutreach(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/{id}/log-email-outreach",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Log workflow engine email outreach
       * @param id
       * @param requestBody
       * @returns DeploymentResponse
       * @throws ApiError
       */
      logDeploymentWorkflowEngineEmailOutreach(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/{id}/log-workflow-engine-email-outreach",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Start deployment
       * @param id
       * @returns DeploymentResponse
       * @throws ApiError
       */
      startDeployment(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/{id}/start",
          path: {
            "id": id
          }
        });
      }
      /**
       * Complete deployment
       * @param id
       * @param requestBody
       * @returns DeploymentResponse
       * @throws ApiError
       */
      completeDeployment(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/{id}/complete",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Reject reasons
       * @param id
       * @returns DeploymentInternalRejectReasons
       * @throws ApiError
       */
      getRejectReasons(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/deployments/{id}/reject-reasons",
          path: {
            "id": id
          }
        });
      }
      /**
       * Reject offer
       * @param id
       * @param requestBody RejectDeploymentPayload
       * @returns any Successful response
       * @throws ApiError
       */
      rejectDeploymentOffer(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/{id}/reject",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Mark deployment is ready to outreach
       * @param id
       * @returns DeploymentResponse
       * @throws ApiError
       */
      outreachingDeployment(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/{id}/outreaching",
          path: {
            "id": id
          }
        });
      }
      /**
       * Resume offer / deployment
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      resumeOfferOrDeployment(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/{id}/resume",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Revise adjustment on a deployment
       * @param id
       * @param requestBody
       * @returns DeploymentResponse
       * @throws ApiError
       */
      adjustDeployment(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/{id}/payment/adjustments",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Approve (and possibly revise) adjustment on completed deployment
       * @param id
       * @param requestBody
       * @returns DeploymentResponse
       * @throws ApiError
       */
      adjustCompletedDeployment(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/{id}/payment/adjustment-approve",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Finance approve payment
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      financeApprovePayment(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/{id}/payment/finance-approve",
          path: {
            "id": id
          }
        });
      }
      /**
       * Finance reject payment
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      financeRejectPayment(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/{id}/payment/finance-reject",
          path: {
            "id": id
          }
        });
      }
      /**
       * Returns a list of feedback questions to display when the deployment is completed
       * @param id
       * @returns DeploymentFeedbackQuestionsResponse
       * @throws ApiError
       */
      getDeploymentFeedbackQuestions(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/deployments/{id}/feedback",
          path: {
            "id": id
          }
        });
      }
      /**
       * Sync deployments payment processing
       * @returns any Successful response
       * @throws ApiError
       */
      deploymentsControllerSyncDeploymentsPaymentProcessing() {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/sync-deployments-payment-processing"
        });
      }
      /**
       * Auto expire or complete
       * @returns any Successful response
       * @throws ApiError
       */
      deploymentsControllerAutoExpireOrComplete() {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/expire-offers"
        });
      }
      /**
       * Auto complete awaiting conclusions
       * @returns any Successful response
       * @throws ApiError
       */
      deploymentsControllerAutoCompleteAwaitingConclusions() {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/auto-complete-awaiting-conclusions"
        });
      }
      /**
       * Calculate roas
       * @returns any Successful response
       * @throws ApiError
       */
      deploymentsControllerCalculateRoas() {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/calculate-roas"
        });
      }
      /**
       * trigger deployment webhooks by deployment state
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      triggerDeploymentWebhooks(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/{id}/webhooks",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * bulk update for deployments
       * @param requestBody
       * @returns BulkUpdateResponse
       * @throws ApiError
       */
      bulkUpdateEs(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/bulk-update-es",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * bulk update for deployments by ids
       * @param limit
       * @param requestBody
       * @returns BulkUpdateResponse
       * @throws ApiError
       */
      bulkUpdateByIds(limit, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/bulk-update-ids",
          query: {
            "limit": limit
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get manual template for deployment
       * @param id
       * @returns ManualTemplatesResponse
       * @throws ApiError
       */
      getManualTemplates(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/deployments/{id}/manual-template",
          path: {
            "id": id
          }
        });
      }
      /**
       * Get deployment timeline
       * @param id
       * @returns DeploymentTimelineResponse
       * @throws ApiError
       */
      getDeploymentTimeline(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/deployments/{id}/timeline",
          path: {
            "id": id
          }
        });
      }
      /**
       * Get manual workflow progress for deployment
       * @param id
       * @returns ManualWorkflowProgress
       * @throws ApiError
       */
      getDeploymentManualWorkflowProgress(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/deployments/{id}/manual-workflow-progress",
          path: {
            "id": id
          }
        });
      }
      /**
       * Returns available deployment labels terms information
       * @param string
       * @param size
       * @returns SearchTermsResponse
       * @throws ApiError
       */
      getDeploymentsLabelsTerms(string, size) {
        return this.httpRequest.request({
          method: "GET",
          url: "/deployments/labels/terms",
          query: {
            "string": string,
            "size": size
          }
        });
      }
      /**
       * Update totals
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      deploymentsControllerUpdateTotals(id) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/deployments/{id}/totals",
          path: {
            "id": id
          }
        });
      }
      /**
       * Update stats
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      deploymentsControllerUpdateStats(id) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/deployments/{id}/recalc-stats",
          path: {
            "id": id
          }
        });
      }
      /**
       * Recalculate a deployment revenue
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      updateDeploymentRevenue(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/deployments/{id}/recalc-revenue",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Recalculate a viewer deployment revenue
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      updateViewerRevenue(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/deployments/{id}/recalc-viewer-revenue",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Add a revenue adjustment
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      addDeploymentRevenueAdjustment(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/{id}/revenue-adjustment",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get deployment revenue(s)
       * @param id
       * @returns DeploymentRevenueResponse
       * @throws ApiError
       */
      getDeploymentRevenue(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/deployments/{id}/revenues",
          path: {
            "id": id
          }
        });
      }
      /**
       * Get viewer deployment revenue
       * @param id
       * @returns ViewerDeploymentRevenueResponse
       * @throws ApiError
       */
      getViewerRevenue(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/deployments/{id}/viewer-revenue",
          path: {
            "id": id
          }
        });
      }
      /**
       * Get deployment revenue(s) broken down by day
       * @param id
       * @param startDate
       * @param endDate
       * @returns DeploymentRevenueDailyResponse
       * @throws ApiError
       */
      getDeploymentRevenueDaily(id, startDate, endDate) {
        return this.httpRequest.request({
          method: "GET",
          url: "/deployments/{id}/revenues/daily",
          path: {
            "id": id
          },
          query: {
            "startDate": startDate,
            "endDate": endDate
          }
        });
      }
      /**
       * Get viewer deployment revenue(s) broken down by day
       * @param id
       * @param startDate
       * @param endDate
       * @returns ViewerDeploymentRevenueDailyResponse
       * @throws ApiError
       */
      getViewerRevenueDaily(id, startDate, endDate) {
        return this.httpRequest.request({
          method: "GET",
          url: "/deployments/{id}/viewer-revenues/daily",
          path: {
            "id": id
          },
          query: {
            "startDate": startDate,
            "endDate": endDate
          }
        });
      }
      /**
       * Override the budget on a deployment revenue(s)
       * @param id
       * @param budgetId
       * @param requestBody
       * @returns DeploymentRevenueItem
       * @throws ApiError
       */
      setDeploymentRevenueOverrides(id, budgetId, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/deployments/{id}/revenues/{budgetId}",
          path: {
            "id": id,
            "budgetId": budgetId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Calculate revenues on deployments updated within a recent time frame
       * @param seconds
       * @returns any Successful response
       * @throws ApiError
       */
      updateDeploymentsRevenueRecent(seconds) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/recalc-revenues",
          query: {
            "seconds": seconds
          }
        });
      }
      /**
       * Regenerate attribution link
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      deploymentsControllerRegenerateAttributionLink(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/deployments/{id}/regen-attribution-link",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Sends email to creator and log
       * @param id
       * @param requestBody
       * @returns GeneralResponse
       * @throws ApiError
       */
      sendDeploymentEmail(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/{id}/outreach",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Marks whether this deployment is to be paid for by the client
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      markDeploymentCharged(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/{id}/charged",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * sets the client-not-charged flag. If set, the revenue reported will be 0
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      setClientNotCharged(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/{id}/no-charge",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Trigger MixMax sequence to send emails
       * @param id
       * @param requestBody
       * @returns GeneralResponse
       * @throws ApiError
       */
      triggerMixMaxSequence(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/{id}/mixmax-sequence",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get deployment outreach variables
       * @param id
       * @returns DeploymentVariablesResponse
       * @throws ApiError
       */
      getDeploymentVariables(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/deployments/{id}/variables",
          path: {
            "id": id
          }
        });
      }
      /**
       * Get deployment utm log
       * @param id
       * @returns DeploymentUtmLog
       * @throws ApiError
       */
      getDeploymentUtmLog(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/deployments/{id}/utm",
          path: {
            "id": id
          }
        });
      }
    };
    exports2.DeploymentsService = DeploymentsService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/DeploymentsAdvertiserEventsService.js
var require_DeploymentsAdvertiserEventsService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/DeploymentsAdvertiserEventsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeploymentsAdvertiserEventsService = void 0;
    var DeploymentsAdvertiserEventsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Get deployment event information
       * @param id
       * @param q
       * @param page
       * @param count
       * @returns DeploymentAdvertiserEventsResponse
       * @throws ApiError
       */
      getDeploymentAdvertiserEvents(id, q, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/deployments/{id}/events",
          path: {
            "id": id
          },
          query: {
            "q": q,
            "page": page,
            "count": count
          }
        });
      }
    };
    exports2.DeploymentsAdvertiserEventsService = DeploymentsAdvertiserEventsService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/DeploymentsDeliverablesService.js
var require_DeploymentsDeliverablesService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/DeploymentsDeliverablesService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeploymentsDeliverablesService = void 0;
    var DeploymentsDeliverablesService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Execute action for a deployment
       * @param deploymentId
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      executeDeliverableAction(deploymentId, id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/{deploymentId}/deliverables/{id}/actions",
          path: {
            "deploymentId": deploymentId,
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Execute action for a deployment with result
       * @param deploymentId
       * @param id
       * @param requestBody
       * @returns DeliverableExecuteActionResponse
       * @throws ApiError
       */
      executeDeliverableActionWithResult(deploymentId, id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/{deploymentId}/deliverables/{id}/actionsWithResult",
          path: {
            "deploymentId": deploymentId,
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Update deployment configuration
       * @param deploymentId
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      updateDeliverableConfiguration(deploymentId, id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/deployments/{deploymentId}/deliverables/{id}/config",
          path: {
            "deploymentId": deploymentId,
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Approve negotiation
       * @param deploymentId
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      approveDeliverableNegotiation(deploymentId, id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/{deploymentId}/deliverables/{id}/approveNegotiation",
          path: {
            "deploymentId": deploymentId,
            "id": id
          }
        });
      }
      /**
       * Reject negotiation
       * @param deploymentId
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      rejectDeliverableNegotiation(deploymentId, id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/{deploymentId}/deliverables/{id}/rejectNegotiation",
          path: {
            "deploymentId": deploymentId,
            "id": id
          }
        });
      }
      /**
       * Update deliverable progress manually
       * @param deploymentId
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      updateDeliverableProgressManually(deploymentId, id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/{deploymentId}/deliverables/{id}/goalProgress",
          path: {
            "deploymentId": deploymentId,
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get a live stream previews tracked
       * @param deploymentId
       * @param id
       * @returns LiveStreamPreviewsResponse
       * @throws ApiError
       */
      getLiveStreamPreviews(deploymentId, id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/deployments/{deploymentId}/deliverables/{id}/live-stream-previews",
          path: {
            "deploymentId": deploymentId,
            "id": id
          }
        });
      }
      /**
       * Get file signed url
       * @param requestBody
       * @returns GetFileSignedUrlResponse
       * @throws ApiError
       */
      generateFileSignedUrl(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/files",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Queue TikTok deployment deliverables for tracking
       * @returns any Successful response
       * @throws ApiError
       */
      queueTikTokDeploymentDeliverableTracking() {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/queue-tiktok-tracking"
        });
      }
      /**
       * Update sub per event deliverables subs redeem state to pending creator
       * @returns any Successful response
       * @throws ApiError
       */
      openSubPerEventToCreator() {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/open-sub-per-event-to-creator"
        });
      }
    };
    exports2.DeploymentsDeliverablesService = DeploymentsDeliverablesService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/DeploymentsEligibilityService.js
var require_DeploymentsEligibilityService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/DeploymentsEligibilityService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeploymentsEligibilityService = void 0;
    var DeploymentsEligibilityService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Returns the eligible offers for a creator for internal visibility.
       * @param creatorId
       * @param page
       * @param count
       * @param platform
       * @returns SponsorshipsResponse
       * @throws ApiError
       */
      getEligibilityForCreator(creatorId, page, count, platform) {
        return this.httpRequest.request({
          method: "GET",
          url: "/eligibility/{creatorId}",
          path: {
            "creatorId": creatorId
          },
          query: {
            "page": page,
            "count": count,
            "platform": platform
          }
        });
      }
    };
    exports2.DeploymentsEligibilityService = DeploymentsEligibilityService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/DeploymentsFraudService.js
var require_DeploymentsFraudService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/DeploymentsFraudService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeploymentsFraudService = void 0;
    var DeploymentsFraudService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Flags deployment as suspicious in fraud
       * @param id
       * @param requestBody
       * @returns DeploymentResponse
       * @throws ApiError
       */
      flagDeploymentAsFraud(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/{id}/fraud/flag",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Unflag deployment as suspicious in fraud
       * @param id
       * @returns DeploymentResponse
       * @throws ApiError
       */
      unflagDeploymentAsFraud(id) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/deployments/{id}/fraud/unflag",
          path: {
            "id": id
          }
        });
      }
      /**
       * Update deployment fraud data
       * @param id
       * @param requestBody
       * @returns DeploymentResponse
       * @throws ApiError
       */
      updateDeploymentFraud(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/deployments/{id}/fraud",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Calculate abuse flags on a specific deployment
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      getDeploymentAbuseFlags(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/deployments/{id}/fraud",
          path: {
            "id": id
          }
        });
      }
      /**
       * Upload deployments marked as fraud flags (csv)
       * @returns DeploymentsFraudUploadResponse
       * @throws ApiError
       */
      uploadDeploymentsFraud() {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/fraud-upload"
        });
      }
      /**
       * Searches flagged deployments matching given criterias.
       * @param creatorId
       * @returns any Successful response
       * @throws ApiError
       */
      searchFraudFlaggedDeployments(creatorId) {
        return this.httpRequest.request({
          method: "GET",
          url: "/deployments/fraud/search",
          query: {
            "creatorId": creatorId
          }
        });
      }
      /**
       * Get a sub set of flagged deployments
       * @param requestBody
       * @returns FlaggedDeploymentsResponse
       * @throws ApiError
       */
      getFraudFlaggedDeployments(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/fraud",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Upload deployment fraud documents
       * @returns FileUploadResponse
       * @throws ApiError
       */
      uploadDeploymentFraudDocument() {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/fraud/document"
        });
      }
      /**
       * Recalculate abuse flags
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      recalculateAbuseFlags(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/recalculate-abuse-flags",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Detect abuse on deployment
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      detectAbuse(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/{id}/detect-abuse",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Upload deployments fraud AI model predictions from GCS
       * @returns any Successful response
       * @throws ApiError
       */
      uploadFraudDailySync() {
        return this.httpRequest.request({
          method: "POST",
          url: "/deployments/upload-fraud-daily-sync"
        });
      }
    };
    exports2.DeploymentsFraudService = DeploymentsFraudService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/EarningsService.js
var require_EarningsService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/EarningsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EarningsService = void 0;
    var EarningsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Get list of earnings for a creator
       * @param creatorId
       * @param totalEarnings
       * @returns EarningsResponse
       * @throws ApiError
       */
      getEarningsByCreatorId(creatorId, totalEarnings) {
        return this.httpRequest.request({
          method: "GET",
          url: "/earnings/{creatorId}",
          path: {
            "creatorId": creatorId
          },
          query: {
            "totalEarnings": totalEarnings
          }
        });
      }
      /**
       * Get list of earnings for a creator
       * @param page
       * @param count
       * @returns EarningsResponse
       * @throws ApiError
       */
      getEarnings(page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/earnings",
          query: {
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Get list of cashouts for a creator
       * @param page
       * @param count
       * @returns CashOutsResponse
       * @throws ApiError
       */
      getCashouts(page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/cashouts",
          query: {
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Create a cashout for a creator
       * @returns CashOutResponse
       * @throws ApiError
       */
      createCashout() {
        return this.httpRequest.request({
          method: "POST",
          url: "/cashouts"
        });
      }
      /**
       * Approve cashout request for a creator
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      approveCashout(id) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/cashouts/{id}/approve",
          path: {
            "id": id
          }
        });
      }
      /**
       * Reject cashout request for a creator
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      rejectCashout(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/cashouts/{id}/reject",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get list of cashouts for all creators
       * @param statuses
       * @param page
       * @param count
       * @returns CashOutsResponse
       * @throws ApiError
       */
      getCashoutsByStatus(statuses, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/cashouts/all",
          query: {
            "statuses": statuses,
            "page": page,
            "count": count
          }
        });
      }
    };
    exports2.EarningsService = EarningsService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/EmailsService.js
var require_EmailsService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/EmailsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EmailsService = void 0;
    var EmailsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Get all emails
       * @param payload
       * @param page
       * @param count
       * @returns EmailsResponse
       * @throws ApiError
       */
      getEmails(payload, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/email",
          query: {
            "payload": payload,
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Get email by id
       * @param id
       * @returns EmailResponse
       * @throws ApiError
       */
      getEmail(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/email/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Send manual test emails
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      sendManualTestEmails(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/email/manual-test",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Send manual notify me emails
       * @param advertiserId
       * @returns any Successful response
       * @throws ApiError
       */
      sendManualNotifyMeEmails(advertiserId) {
        return this.httpRequest.request({
          method: "POST",
          url: "/email/notify-me/{advertiserId}",
          path: {
            "advertiserId": advertiserId
          }
        });
      }
      /**
       * Send manual digest emails
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      sendManualDigestEmails(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/email/manual-digest",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Send manual special offer emails
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      sendManualSpecialOfferEmails(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/email/manual-special",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get email logs
       * @param page
       * @param count
       * @returns EmailLogsResponse
       * @throws ApiError
       */
      getEmailLogs(page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/email-logs",
          query: {
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Get advertiser segmentation
       * @param id
       * @returns EmailAdvertiserSegmentationResponse
       * @throws ApiError
       */
      getAdvertisersSegmentation(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/email-logs/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Get failure reasons segmentation
       * @param id
       * @returns EmailFailuresSegmentationResponse
       * @throws ApiError
       */
      getFailuresSegmentation(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/email-logs/{id}/failures",
          path: {
            "id": id
          }
        });
      }
      /**
       * Download failure reasons segmentation as csv.
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      downloadFailuresSegmentation(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/email-logs/{id}/failures-download",
          path: {
            "id": id
          }
        });
      }
      /**
       * End point to test the outcome of an email without actually sending to a creator
       * @param id
       * @param type
       * @returns SponsorshipsTestResponse
       * @throws ApiError
       */
      testEmailSponsorships(id, type) {
        return this.httpRequest.request({
          method: "GET",
          url: "/email-test/{id}",
          path: {
            "id": id
          },
          query: {
            "type": type
          }
        });
      }
      /**
       * Get stats on sent emails
       * @param from
       * @param to
       * @param type
       * @returns SentEmailsStatsResponse
       * @throws ApiError
       */
      getSentEmailsStats(from, to, type) {
        return this.httpRequest.request({
          method: "GET",
          url: "/email-stats",
          query: {
            "from": from,
            "to": to,
            "type": type
          }
        });
      }
      /**
       * Download creators with bounce event as csv.
       * @param from
       * @param to
       * @param type
       * @returns any Successful response
       * @throws ApiError
       */
      downloadCreatorsWithBounceEvent(from, to, type) {
        return this.httpRequest.request({
          method: "GET",
          url: "/email-stats/bounce",
          query: {
            "from": from,
            "to": to,
            "type": type
          }
        });
      }
      /**
       * Download creators without open event as csv.
       * @param from
       * @param to
       * @param type
       * @returns any Successful response
       * @throws ApiError
       */
      downloadCreatorsWithoutOpenEvent(from, to, type) {
        return this.httpRequest.request({
          method: "GET",
          url: "/email-stats/not-opened",
          query: {
            "from": from,
            "to": to,
            "type": type
          }
        });
      }
      /**
       * Send manual outreach emails
       * @param deploymentId
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      sendManualOutreachEmails(deploymentId, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/email/manual-outreach/{deploymentId}",
          path: {
            "deploymentId": deploymentId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get automated emails settings
       * @returns EmailSettingsResponse
       * @throws ApiError
       */
      getAutomatedEmailSettings() {
        return this.httpRequest.request({
          method: "GET",
          url: "/email-settings"
        });
      }
      /**
       * Get automated specific email settings
       * @param id
       * @returns EmailSettingResponse
       * @throws ApiError
       */
      getAutomatedEmailSetting(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/email-settings/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Update automated email settings
       * @param id
       * @param requestBody
       * @returns EmailSettingResponse
       * @throws ApiError
       */
      updatAutomatedeEmailSetting(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/email-settings/{id}",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Create email experiment
       * @param id
       * @param requestBody
       * @returns EmailExperimentResponse
       * @throws ApiError
       */
      createEmailExperiment(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/email-settings/{id}/experiment",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Update email experiment
       * @param id
       * @param experimentId
       * @param requestBody
       * @returns EmailExperimentResponse
       * @throws ApiError
       */
      updateEmailExperiment(id, experimentId, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/email-settings/{id}/experiment/{experimentId}",
          path: {
            "id": id,
            "experimentId": experimentId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Delete email experiment
       * @param id
       * @param experimentId
       * @returns any Successful response
       * @throws ApiError
       */
      deleteEmailExperiment(id, experimentId) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/email-settings/{id}/experiment/{experimentId}",
          path: {
            "id": id,
            "experimentId": experimentId
          }
        });
      }
      /**
       * Get email advertiser distribution
       * @returns EmailAdvertisersDistributionResponse
       * @throws ApiError
       */
      getEmailAdvertiserDistribution() {
        return this.httpRequest.request({
          method: "GET",
          url: "/email-advertiser-distribution"
        });
      }
      /**
       * Update all email advertiser distribution
       * @returns any Successful response
       * @throws ApiError
       */
      emailsControllerUpdateAllEmailAdvertiserDistribution() {
        return this.httpRequest.request({
          method: "POST",
          url: "/email-advertiser-distribution"
        });
      }
    };
    exports2.EmailsService = EmailsService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/ExperimentsService.js
var require_ExperimentsService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/ExperimentsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ExperimentsService = void 0;
    var ExperimentsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Get experiments
       * @param page 'Page number (default 1)
       * @param count Number of results per page (default 10)
       * @param q Query to filter the results on
       * @returns ExperimentsResponse
       * @throws ApiError
       */
      getExperiments(page, count, q) {
        return this.httpRequest.request({
          method: "GET",
          url: "/experiments",
          query: {
            "page": page,
            "count": count,
            "q": q
          }
        });
      }
      /**
       * Create a new experiment.
       * @param requestBody
       * @returns ExperimentResponse
       * @throws ApiError
       */
      createExperiment(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/experiments",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get experiment
       * @param id
       * @returns ExperimentResponse
       * @throws ApiError
       */
      getExperiment(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/experiment/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Update an existing experiment.
       * @param id
       * @param requestBody
       * @returns ExperimentResponse
       * @throws ApiError
       */
      updateExperiment(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/experiments/{id}",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Delete an existing experiment.
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      deleteExperiment(id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/experiments/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Apply feature flags
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      applyFeatureFlags(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/experiments/{id}/apply",
          path: {
            "id": id
          }
        });
      }
      /**
       * Remove feature flags
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      removeFeatureFlags(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/experiments/{id}/remove-ff",
          path: {
            "id": id
          }
        });
      }
      /**
       * Rollout an experiment to a given percentage
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      rollout(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/experiments/{id}/rollout",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.ExperimentsService = ExperimentsService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/ExternalEventsService.js
var require_ExternalEventsService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/ExternalEventsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ExternalEventsService = void 0;
    var ExternalEventsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Webhook handler from SignRequest
       * @returns any Successful response
       * @throws ApiError
       */
      receiveSignRequestEvent() {
        return this.httpRequest.request({
          method: "POST",
          url: "/ext/signrequest"
        });
      }
      /**
       * Stores email message
       * @param key
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      storeEmailMessage(key, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/ext/email",
          query: {
            "key": key
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.ExternalEventsService = ExternalEventsService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/FeaturesSettingsService.js
var require_FeaturesSettingsService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/FeaturesSettingsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FeaturesSettingsService = void 0;
    var FeaturesSettingsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Get all features settings
       * @returns FeaturesSettingsResponse
       * @throws ApiError
       */
      getAllFeaturesSettings() {
        return this.httpRequest.request({
          method: "GET",
          url: "/feature"
        });
      }
      /**
       * Create new feature settings
       * @param requestBody
       * @returns FeatureSettingsResponse
       * @throws ApiError
       */
      createFeatureSettings(requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/feature",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get feature settings by id
       * @param id
       * @returns FeatureSettingsResponse
       * @throws ApiError
       */
      getFeatureSettings(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/feature/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Update feature settings by id
       * @param id
       * @param requestBody
       * @returns FeatureSettingsResponse
       * @throws ApiError
       */
      updateFeatureSettings(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/feature/{id}",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get feature settings by name
       * @param name
       * @returns FeatureSettingsResponse
       * @throws ApiError
       */
      getFeatureSettingsByName(name) {
        return this.httpRequest.request({
          method: "GET",
          url: "/feature/name/{name}",
          path: {
            "name": name
          }
        });
      }
    };
    exports2.FeaturesSettingsService = FeaturesSettingsService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/FileProcessService.js
var require_FileProcessService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/FileProcessService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FileProcessService = void 0;
    var FileProcessService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Returns a signed url to upload a file to the bucket.
       * @returns GetFileSignedUrlResponse
       * @throws ApiError
       */
      getUploadUrl() {
        return this.httpRequest.request({
          method: "GET",
          url: "/file-process-upload-url"
        });
      }
      /**
       * Receive a pre process command to execute select creators handler.
       * @param requestBody
       * @returns FileProcessResponse
       * @throws ApiError
       */
      createSelectCreatorsPreProcess(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/file-process-select-creators",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Receive a pre process command to execute the feature flag importer handler.
       * @param requestBody
       * @returns FileProcessResponse
       * @throws ApiError
       */
      createFeatureFlagImportPreProcess(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/file-process-ff-import",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Receive a pre process command to execute the channel labels importer handler.
       * @param requestBody
       * @returns FileProcessResponse
       * @throws ApiError
       */
      createChannelLabelsImportPreProcess(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/file-process-channel-labels-import",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Receive a pre process command to execute the agency creator importer handler.
       * @param requestBody
       * @returns FileProcessResponse
       * @throws ApiError
       */
      createAgencyCreatorImportPreProcess(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/file-process-agency-creator-import",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Receive a pre process command to execute the creator manager importer handler.
       * @param requestBody
       * @returns FileProcessResponse
       * @throws ApiError
       */
      createCreatorManagerImportPreProcess(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/file-process-creator-manager-import",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Receive a pre process command to execute the advertiser blocklist handler.
       * @param requestBody
       * @returns FileProcessResponse
       * @throws ApiError
       */
      createAdvertiserBlocklistPreProcess(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/file-process-advertiser-blocklist",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Returns a list of file processes assigned to the reference entity.
       * @param referenceId
       * @param referenceType
       * @param handlerType
       * @param page
       * @param count
       * @returns FileProcessListResponse
       * @throws ApiError
       */
      getFileProcesses(referenceId, referenceType, handlerType, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/file-process",
          query: {
            "referenceId": referenceId,
            "referenceType": referenceType,
            "handlerType": handlerType,
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Returns the signed url to access the file on GCS if available.
       * @param id
       * @returns GetFileSignedUrlResponse
       * @throws ApiError
       */
      getFileProcessSignedUrl(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/file-process/{id}/signed-url",
          path: {
            "id": id
          }
        });
      }
      /**
       * Returns the errors for a file process entry.
       * @param id
       * @returns FileProcessErrorListResponse
       * @throws ApiError
       */
      getFileProcessErrorsById(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/file-process/{id}/errors",
          path: {
            "id": id
          }
        });
      }
      /**
       * Place the entries pending processing into the queue again.
       * @param id
       * @returns FileProcessResponse
       * @throws ApiError
       */
      replayFileProcessById(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/file-process/{id}/replay",
          path: {
            "id": id
          }
        });
      }
      /**
       * Download the errors when processing a file as csv.
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      downloadFileProcessErrorsById(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/file-process/{id}/errors-download",
          path: {
            "id": id
          }
        });
      }
    };
    exports2.FileProcessService = FileProcessService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/FraudService.js
var require_FraudService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/FraudService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FraudService = void 0;
    var FraudService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Upload fake channels AI model predictions from GCS
       * @returns any Successful response
       * @throws ApiError
       */
      uploadFakeChannelsSync() {
        return this.httpRequest.request({
          method: "POST",
          url: "/fraud/upload-fake-channels-sync"
        });
      }
      /**
       * Get fake channels
       * @returns FakeChannelsResponse
       * @throws ApiError
       */
      getFakeChannels() {
        return this.httpRequest.request({
          method: "GET",
          url: "/fraud/fake-channels"
        });
      }
      /**
       * Update fake channel and its deployments
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      updateFakeChannel(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/fraud/fake-channels/{id}",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.FraudService = FraudService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/GiftCardsService.js
var require_GiftCardsService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/GiftCardsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GiftCardsService = void 0;
    var GiftCardsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Get gift cards
       * @param page
       * @param count
       * @returns GiftCardsResponse
       * @throws ApiError
       */
      getGiftCards(page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/gift-card",
          query: {
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Create gift card
       * @param requestBody
       * @returns GiftCardResponse
       * @throws ApiError
       */
      createGiftCard(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/gift-card",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Upload gift cards csv
       * @returns GiftCardsUploadResponse
       * @throws ApiError
       */
      uploadGiftCards() {
        return this.httpRequest.request({
          method: "POST",
          url: "/gift-card/upload"
        });
      }
      /**
       * Redeem gift cards
       * @param type
       * @param value
       * @returns any Successful response
       * @throws ApiError
       */
      redeemGiftCards(type, value) {
        return this.httpRequest.request({
          method: "POST",
          url: "/gift-card/redeem/{type}/{value}",
          path: {
            "type": type,
            "value": value
          }
        });
      }
    };
    exports2.GiftCardsService = GiftCardsService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/GroupsService.js
var require_GroupsService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/GroupsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GroupsService = void 0;
    var GroupsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Returns a list of group.
       * @param campaignId
       * @param page
       * @param count
       * @returns CampaignGroupsResponse
       * @throws ApiError
       */
      getGroups(campaignId, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/groups",
          query: {
            "campaignId": campaignId,
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Add a campaign group
       * @param requestBody
       * @returns CampaignGroupResponse
       * @throws ApiError
       */
      createGroup(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/groups",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Groups search (filter + sort)
       * @param sort
       * @param filter
       * @param page
       * @param count
       * @returns GroupSearchResult
       * @throws ApiError
       */
      searchGroups(sort, filter, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/groups/search",
          query: {
            "sort": sort,
            "filter": filter,
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Generate deployments group summary
       * @param requestBody
       * @returns DeploymentGeneratedSummaryResponse
       * @throws ApiError
       */
      generateSummaryEs(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/groups/generate-summary-es",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Returns a specific group by id.
       * @param id
       * @returns CampaignGroupResponse
       * @throws ApiError
       */
      getGroup(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/groups/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Delete a campaign group
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      deleteGroup(id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/groups/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Update a campaign group
       * @param id
       * @param requestBody
       * @returns CampaignGroupResponse
       * @throws ApiError
       */
      updateGroup(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/groups/{id}",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Duplicate a groups
       * @param id
       * @param requestBody
       * @returns CampaignGroupResponse
       * @throws ApiError
       */
      duplicateGroup(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/groups/{id}/duplicate",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Add publishers to the group
       * @param groupId
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      addPublishers(groupId, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/groups/{groupId}/publishers",
          path: {
            "groupId": groupId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Delete publisher from a group
       * @param groupId
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      deletePublishers(groupId, requestBody) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/groups/{groupId}/publishers",
          path: {
            "groupId": groupId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Delete all publisher from a group
       * @param groupId
       * @returns SuccessWithErrorsResponse
       * @throws ApiError
       */
      deletePublishersAll(groupId) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/groups/{groupId}/publishers/all",
          path: {
            "groupId": groupId
          }
        });
      }
      /**
       * Upload to curation list of publishers (csv)
       * @param id
       * @returns PublisherUploadResponse
       * @throws ApiError
       */
      uploadPublishers(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/groups/{id}/publishers-upload",
          path: {
            "id": id
          }
        });
      }
      /**
       * Upload csv to override deployments
       * @param id
       * @returns PublisherUploadResponse
       * @throws ApiError
       */
      repairPublishers(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/groups/{id}/publishers-repair",
          path: {
            "id": id
          }
        });
      }
      /**
       * Groups column information meta data
       * @returns SearchColumnsMetadata
       * @throws ApiError
       */
      getGroupsSearchMetadata() {
        return this.httpRequest.request({
          method: "GET",
          url: "/groups/search/metadata"
        });
      }
      /**
       * add deliverable to group
       * @param id
       * @param requestBody AddGroupDeliverableBody
       * @returns CampaignDeliverableParam
       * @throws ApiError
       */
      addGroupDeliverable(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/groups/{id}/deliverable",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * add mission to group
       * @param id
       * @param requestBody AddMissionBody
       * @returns Mission
       * @throws ApiError
       */
      addGroupMission(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/groups/{id}/mission",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * update mission
       * @param id
       * @param missionId
       * @param requestBody AddMissionBody
       * @returns any Successful response
       * @throws ApiError
       */
      updateGroupMission(id, missionId, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/groups/{id}/mission/{missionId}",
          path: {
            "id": id,
            "missionId": missionId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * delete mission from group
       * @param id
       * @param missionId
       * @returns any Successful response
       * @throws ApiError
       */
      deleteGroupMission(id, missionId) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/groups/{id}/mission/{missionId}",
          path: {
            "id": id,
            "missionId": missionId
          }
        });
      }
      /**
       * Add missions based on the deliverables of the group
       * @param id
       * @returns Missions
       * @throws ApiError
       */
      addGroupMissionsFromDeliverables(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/groups/{id}/mission-from-deliverables",
          path: {
            "id": id
          }
        });
      }
      /**
       * preview the group deliverables config and pricing for a deployment given the community size and country
       * @param id
       * @param communitySize
       * @param communitySizeAttribute
       * @param country
       * @returns GroupPreviewResponse
       * @throws ApiError
       */
      preview(id, communitySize, communitySizeAttribute, country) {
        return this.httpRequest.request({
          method: "GET",
          url: "/groups/{id}/preview",
          path: {
            "id": id
          },
          query: {
            "communitySize": communitySize,
            "communitySizeAttribute": communitySizeAttribute,
            "country": country
          }
        });
      }
      /**
       * take a viewer seat for a group
       * @param id
       * @returns TakeViewerSeatResponse
       * @throws ApiError
       */
      takeViewerSeat(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/groups/{id}/take-viewer-seat",
          path: {
            "id": id
          }
        });
      }
      /**
       * Get available and taken codes for a group
       * @param id
       * @returns AttributionPlatformsResponse
       * @throws ApiError
       */
      getGroupCodes(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/groups/{id}/codes",
          path: {
            "id": id
          }
        });
      }
      /**
       * Returns available group labels terms information
       * @param string
       * @param size
       * @returns SearchTermsResponse
       * @throws ApiError
       */
      getGroupsLabelsTerms(string, size) {
        return this.httpRequest.request({
          method: "GET",
          url: "/groups/labels/terms",
          query: {
            "string": string,
            "size": size
          }
        });
      }
      /**
       * Returns a feedback for group by id.
       * @param id
       * @param page
       * @param count
       * @param score
       * @param commentFilter
       * @returns GroupFeedbackResult
       * @throws ApiError
       */
      getGroupFeedback(id, page, count, score, commentFilter) {
        return this.httpRequest.request({
          method: "GET",
          url: "/groups/feedback/{id}",
          path: {
            "id": id
          },
          query: {
            "page": page,
            "count": count,
            "score": score,
            "commentFilter": commentFilter
          }
        });
      }
      /**
       * acknowledge a request to generate a feedback summary for the group
       * @param id
       * @returns FeedbackSummaryHistoryItem
       * @throws ApiError
       */
      generateFeedbackSummary(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/groups/{id}/generate-feedback-summary",
          path: {
            "id": id
          }
        });
      }
      /**
       * Returns a reject reasons for group by id.
       * @param id
       * @param page
       * @param count
       * @param reasons
       * @returns GroupRejectReasonsResult
       * @throws ApiError
       */
      getGroupRejectReasons(id, page, count, reasons) {
        return this.httpRequest.request({
          method: "GET",
          url: "/groups/{id}/reject-reasons",
          path: {
            "id": id
          },
          query: {
            "page": page,
            "count": count,
            "reasons": reasons
          }
        });
      }
      /**
       * Disable eligibility for groups that end date elapsed
       * @returns any Successful response
       * @throws ApiError
       */
      disableEligibilityEndedGroups() {
        return this.httpRequest.request({
          method: "POST",
          url: "/groups/disable-eligibility-ended-groups"
        });
      }
      /**
       * Update a group revenue
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      updateGroupRevenue(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/groups/{id}/recalc-revenue",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Update all deployment revenues in a group
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      updateGroupRevenueAll(id) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/groups/{id}/recalc-revenue-deployments",
          path: {
            "id": id
          }
        });
      }
      /**
       * Calculate revenues on all groups updated within a recent time frame
       * @param seconds
       * @returns any Successful response
       * @throws ApiError
       */
      updateGroupsRevenueRecent(seconds) {
        return this.httpRequest.request({
          method: "POST",
          url: "/groups/recalc-revenues",
          query: {
            "seconds": seconds
          }
        });
      }
      /**
       * Get group revenue(s)
       * @param id
       * @param page
       * @param count
       * @returns CampaignGroupRevenueResponse
       * @throws ApiError
       */
      getGroupRevenue(id, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/groups/{id}/revenues",
          path: {
            "id": id
          },
          query: {
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Get group revenue(s) broken down by day
       * @param id
       * @param startDate
       * @param endDate
       * @param page
       * @param count
       * @returns CampaignGroupRevenueDailyResponse
       * @throws ApiError
       */
      getGroupRevenueDaily(id, startDate, endDate, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/groups/{id}/revenues/daily",
          path: {
            "id": id
          },
          query: {
            "startDate": startDate,
            "endDate": endDate,
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Update deployment monitored events count
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      updateDeploymentMonitoredEvents(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/groups/{id}/recalc-monitored-events",
          path: {
            "id": id
          }
        });
      }
      /**
       * Archive a group
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      archiveGroup(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/groups/{id}/archive",
          path: {
            "id": id
          }
        });
      }
      /**
       * Unarchive a group
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      unarchiveGroup(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/groups/{id}/unarchive",
          path: {
            "id": id
          }
        });
      }
      /**
       * Get day zero event for a group
       * @param id
       * @returns DayZeroEventResponse
       * @throws ApiError
       */
      getDayZeroEventByGroupId(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/groups/{id}/day-zero-event",
          path: {
            "id": id
          }
        });
      }
    };
    exports2.GroupsService = GroupsService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/GroupsEligibilityService.js
var require_GroupsEligibilityService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/GroupsEligibilityService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GroupsEligibilityService = void 0;
    var GroupsEligibilityService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Returns the eligibility filters attached to that group by id.
       * @param id
       * @returns CampaignGroupEligibilityResponse
       * @throws ApiError
       */
      getGroupEligibility(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/groups/{id}/eligibility",
          path: {
            "id": id
          }
        });
      }
      /**
       * Update the eligibility filters of a campaign group
       * @param id
       * @param requestBody
       * @returns CampaignGroupEligibilityResponse
       * @throws ApiError
       */
      updateGroupEligibility(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/groups/{id}/eligibility",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Check with creators elastic search the preview of the set that will be reached by this eligibility filters.
       * @param id
       * @param requestBody
       * @returns CampaignGroupEligibilityPreviewResponse
       * @throws ApiError
       */
      getGroupEligibilityPreview(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/groups/{id}/eligibility/preview",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Prepare a share link for the CRM with the filters on the URL.
       * @param id
       * @param requestBody
       * @returns EligibilityPreviewUrlResponse
       * @throws ApiError
       */
      generatePreviewLinkToCrm(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/groups/{id}/eligibility/preview-link",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Enable the eligibility filters of a campaign group
       * @param id
       * @returns CampaignGroupEligibilityResponse
       * @throws ApiError
       */
      enableGroupEligibility(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/groups/{id}/eligibility/enable",
          path: {
            "id": id
          }
        });
      }
      /**
       * Disable the eligibility filters of a campaign group
       * @param id
       * @returns CampaignGroupEligibilityResponse
       * @throws ApiError
       */
      disableGroupEligibility(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/groups/{id}/eligibility/disable",
          path: {
            "id": id
          }
        });
      }
      /**
       * Generate multiple groups preview
       * @param requestBody
       * @returns CampaignGroupEligibilityPreviewResponse
       * @throws ApiError
       */
      getEligibilityPreviewOnMultipleGroups(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/groups/eligibility/generate-multiple-preview",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get daily eligible creators stats
       * @param requestBody
       * @returns DailyCreatorEligibilityResponse
       * @throws ApiError
       */
      getDailyEligibleCreatorsStats(requestBody) {
        return this.httpRequest.request({
          method: "GET",
          url: "/groups/eligibility/stats/daily-eligible-creators",
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.GroupsEligibilityService = GroupsEligibilityService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/GroupsManualEligibilityService.js
var require_GroupsManualEligibilityService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/GroupsManualEligibilityService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GroupsManualEligibilityService = void 0;
    var GroupsManualEligibilityService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Process manual groups eligibility
       * @returns any Successful response
       * @throws ApiError
       */
      processManualGroupsEligibility() {
        return this.httpRequest.request({
          method: "POST",
          url: "/groups/manual-eligibility"
        });
      }
      /**
       * Process manual group eligibility by id
       * @param groupId
       * @returns any Successful response
       * @throws ApiError
       */
      processManualGroupEligibility(groupId) {
        return this.httpRequest.request({
          method: "POST",
          url: "/groups/{groupId}/manual-eligibility",
          path: {
            "groupId": groupId
          }
        });
      }
    };
    exports2.GroupsManualEligibilityService = GroupsManualEligibilityService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/HealthService.js
var require_HealthService2 = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/HealthService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HealthService = void 0;
    var HealthService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Get health
       * @returns any Successful response
       * @throws ApiError
       */
      healthControllerGetHealth() {
        return this.httpRequest.request({
          method: "GET",
          url: "/health"
        });
      }
      /**
       * Get ready
       * @returns any Successful response
       * @throws ApiError
       */
      healthControllerGetReady() {
        return this.httpRequest.request({
          method: "GET",
          url: "/ready"
        });
      }
    };
    exports2.HealthService = HealthService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/HellofreshService.js
var require_HellofreshService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/HellofreshService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HellofreshService = void 0;
    var HellofreshService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Returns a very specific spend report per code for Hello Fresh (paginated).
       * @param page 'Page number (default 1)
       * @param count Number of results per page (default 10)
       * @param q Query to filter the results on
       * @returns HelloFreshSpendReportResponse
       * @throws ApiError
       */
      getExternalSpendReport(page, count, q) {
        return this.httpRequest.request({
          method: "GET",
          url: "/ext/hellofresh/spend-report",
          query: {
            "page": page,
            "count": count,
            "q": q
          }
        });
      }
    };
    exports2.HellofreshService = HellofreshService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/I18NService.js
var require_I18NService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/I18NService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.I18NService = void 0;
    var I18NService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Returns available models
       * @returns I18nModelsResponse
       * @throws ApiError
       */
      getModels() {
        return this.httpRequest.request({
          method: "GET",
          url: "/i18n/models"
        });
      }
      /**
       * Returns available strings for a model
       * @param model
       * @param q
       * @param page
       * @param count
       * @returns I18nStringsResponse
       * @throws ApiError
       */
      getStrings(model, q, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/i18n/strings",
          query: {
            "model": model,
            "q": q,
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Upserts translated strings
       * @param requestBody
       * @returns I18nStringsResponse
       * @throws ApiError
       */
      updateStrings(requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/i18n/strings",
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.I18NService = I18NService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/IncidentsService.js
var require_IncidentsService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/IncidentsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IncidentsService = void 0;
    var IncidentsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Create or update an incident
       * @param requestBody CreateIncidentPayload
       * @returns IncidentResponse
       * @throws ApiError
       */
      createOrUpdateIncident(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/incidents",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get incidents with filters
       * @param type
       * @param priority
       * @param state
       * @param budgetId
       * @param assignedUserId
       * @param page
       * @param count
       * @returns IncidentsResponse
       * @throws ApiError
       */
      getIncidents(type, priority, state, budgetId, assignedUserId, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/incidents",
          query: {
            "type": type,
            "priority": priority,
            "state": state,
            "budgetId": budgetId,
            "assignedUserId": assignedUserId,
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Update incident state
       * @param id
       * @param requestBody
       * @returns IncidentResponse
       * @throws ApiError
       */
      updateIncidentState(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/incidents/{id}/state",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Evaluate no budget setup incidents
       * @returns any Successful response
       * @throws ApiError
       */
      evaluateNoBudgetSetupIncidents() {
        return this.httpRequest.request({
          method: "POST",
          url: "/incidents/evaluate/no-budget-setup"
        });
      }
      /**
       * Evaluate daily starts incidents
       * @returns any Successful response
       * @throws ApiError
       */
      evaluateDailyStartsIncidents() {
        return this.httpRequest.request({
          method: "POST",
          url: "/incidents/evaluate/daily-starts"
        });
      }
      /**
       * Evaluate budget performance incidents
       * @returns any Successful response
       * @throws ApiError
       */
      evaluateBudgetPerformanceIncidents() {
        return this.httpRequest.request({
          method: "POST",
          url: "/incidents/evaluate/budget-performance"
        });
      }
    };
    exports2.IncidentsService = IncidentsService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/InfinityService.js
var require_InfinityService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/InfinityService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InfinityService = void 0;
    var InfinityService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Get deployment community achievements information
       * @param id
       * @returns CommunityAchievementsResponse
       * @throws ApiError
       */
      getCommunityAchievements(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/infinity/deployments/{id}/community-achievements",
          path: {
            "id": id
          }
        });
      }
      /**
       * Get deployment extended information
       * @param id
       * @returns DeploymentTreeResponse
       * @throws ApiError
       */
      getExtendedDeploymentForInfinity(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/infinity/deployments/{id}/extended",
          path: {
            "id": id
          }
        });
      }
      /**
       * Get deployments information by creator
       * @param creatorId
       * @param sourceGroupId
       * @param state
       * @returns DeploymentsTreeResponse
       * @throws ApiError
       */
      getExtendedSiblingsByCreatorIdForInfinity(creatorId, sourceGroupId, state) {
        return this.httpRequest.request({
          method: "GET",
          url: "/infinity/deployments-by-creator-and-source-group/{creatorId}/source-group/{sourceGroupId}",
          path: {
            "creatorId": creatorId,
            "sourceGroupId": sourceGroupId
          },
          query: {
            "state": state
          }
        });
      }
    };
    exports2.InfinityService = InfinityService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/InternalService.js
var require_InternalService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/InternalService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InternalService = void 0;
    var InternalService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Get deployment for internal services. This is an efficient endpoint to fetch deployments in a high volume of calls with all its relevant entities without doing external calls.
       * @param id
       * @returns DeploymentTreeResponse
       * @throws ApiError
       */
      getDeploymentInternal(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/internal/deployment/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Get current open sponsorships and eligible offers for a channel.
       * @param id
       * @returns DeploymentLightResponse
       * @throws ApiError
       */
      getInternalDeployments(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/internal/deployments/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Reindex elasticsearch groups
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      reindexGroupsEs(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/internal/groups/reindex-es",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Reindex elasticsearch group entries
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      reindexGroupsEntriesEs(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/internal/groups/reindex-group-es",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Update active deployments creator id
       * @param creatorId
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      updateActiveDeploymentsCreatorId(creatorId, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/internal/deployments/active/creator/{creatorId}",
          path: {
            "creatorId": creatorId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Reindex elasticsearch deployments
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      reindexDeploymentsEs(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/internal/deployments/reindex-es",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Reindex elasticsearch deployments by groups
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      reindexDeploymentsEsByGroups(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/internal/deployments/reindex-es-by-groups",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Internal search for sponsorships information
       * @param requestBody
       * @returns SearchResultResponse
       * @throws ApiError
       */
      internalSearch(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/internal/search",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Resync viewer events
       * @param viewerDeploymentId
       * @param skipClickId
       * @returns any Successful response
       * @throws ApiError
       */
      resyncViewerEvents(viewerDeploymentId, skipClickId) {
        return this.httpRequest.request({
          method: "POST",
          url: "/internal/resync-viewer-events/{viewerDeploymentId}",
          path: {
            "viewerDeploymentId": viewerDeploymentId
          },
          query: {
            "skipClickId": skipClickId
          }
        });
      }
    };
    exports2.InternalService = InternalService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/InternalOutreachService.js
var require_InternalOutreachService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/InternalOutreachService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InternalOutreachService = void 0;
    var InternalOutreachService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Get emails by params
       * @param outreachFlowId
       * @param emailPolicyId
       * @returns GetEmailsResponse
       * @throws ApiError
       */
      getDeploymentEmails(outreachFlowId, emailPolicyId) {
        return this.httpRequest.request({
          method: "GET",
          url: "/internal/outreach/flows/{outreachFlowId}/policies/{emailPolicyId}/emails",
          path: {
            "outreachFlowId": outreachFlowId,
            "emailPolicyId": emailPolicyId
          }
        });
      }
      /**
       * Get all outreach flows
       * @returns GetOutreachFlowsResponse
       * @throws ApiError
       */
      getInternalOutreachFlows() {
        return this.httpRequest.request({
          method: "GET",
          url: "/internal/outreach/flows"
        });
      }
      /**
       * Get a all flow email policy
       * @param outreachFlowId
       * @returns GetAllOutreachFlowEmailPoliciesResponse
       * @throws ApiError
       */
      getInternalAllOutreachEmailPolicies(outreachFlowId) {
        return this.httpRequest.request({
          method: "GET",
          url: "/internal/outreach/flows/{outreachFlowId}/policies",
          path: {
            "outreachFlowId": outreachFlowId
          }
        });
      }
      /**
       * update outreach flow last used
       * @param outreachFlowId
       * @param requestBody UpdateOutreachFlowPayload
       * @returns any Successful response
       * @throws ApiError
       */
      updateOutreachFlowLastUsed(outreachFlowId, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/internal/outreach/flows/{outreachFlowId}/last-used",
          path: {
            "outreachFlowId": outreachFlowId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * update outreach email policy last used
       * @param outreachFlowId
       * @param emailPolicyId
       * @param requestBody UpdateOutreachEmailPolicyPayload
       * @returns any Successful response
       * @throws ApiError
       */
      updateOutreachEmailPolicyLastUsed(outreachFlowId, emailPolicyId, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/internal/outreach/flows/{outreachFlowId}/policy/{emailPolicyId}/last-used",
          path: {
            "outreachFlowId": outreachFlowId,
            "emailPolicyId": emailPolicyId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.InternalOutreachService = InternalOutreachService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/KycService.js
var require_KycService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/KycService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.KycService = void 0;
    var KycService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Start session
       * @param requestBody
       * @returns KycSessionResponse
       * @throws ApiError
       */
      kycControllerStartSession(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/kyc/session",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get session
       * @param id
       * @returns KycSessionResponse
       * @throws ApiError
       */
      kycControllerGetSession(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/kyc/session/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Get last passed session
       * @param referenceId
       * @returns KycSessionResponse
       * @throws ApiError
       */
      kycControllerGetLastPassedSession(referenceId) {
        return this.httpRequest.request({
          method: "GET",
          url: "/kyc/last-passed-session",
          query: {
            "referenceId": referenceId
          }
        });
      }
      /**
       * Get sessions
       * @param ids
       * @param referenceId
       * @param statuses
       * @param sort
       * @param withAuditLog
       * @param q
       * @param page
       * @param count
       * @returns KycSessionsResponse
       * @throws ApiError
       */
      kycControllerGetSessions(ids, referenceId, statuses, sort, withAuditLog, q, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/kyc/sessions",
          query: {
            "ids": ids,
            "referenceId": referenceId,
            "statuses": statuses,
            "sort": sort,
            "withAuditLog": withAuditLog,
            "q": q,
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Update session
       * @param id
       * @param requestBody
       * @returns KycSessionResponse
       * @throws ApiError
       */
      kycControllerUpdateSession(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/kyc/session/{id}/update",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.KycService = KycService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/LiveStreamsService.js
var require_LiveStreamsService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/LiveStreamsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LiveStreamsService = void 0;
    var LiveStreamsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Track live streams
       * @returns any Successful response
       * @throws ApiError
       */
      trackLiveStreams() {
        return this.httpRequest.request({
          method: "POST",
          url: "/live-stream/track"
        });
      }
      /**
       * Track new mrps live streams
       * @returns any Successful response
       * @throws ApiError
       */
      trackNewMrpsLiveStreams() {
        return this.httpRequest.request({
          method: "POST",
          url: "/live-stream/track-new-mrps"
        });
      }
    };
    exports2.LiveStreamsService = LiveStreamsService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/ManagersService.js
var require_ManagersService2 = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/ManagersService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ManagersService = void 0;
    var ManagersService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Returns information about managers in bulk
       * @param ids
       * @param requestBody
       * @returns ManagersResponse
       * @throws ApiError
       */
      getManagersBulk(ids, requestBody) {
        return this.httpRequest.request({
          method: "GET",
          url: "/managers",
          query: {
            "ids": ids
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.ManagersService = ManagersService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/ManualFlowService.js
var require_ManualFlowService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/ManualFlowService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ManualFlowService = void 0;
    var ManualFlowService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Add a new manual stage
       * @param requestBody
       * @returns ManualStageResponse
       * @throws ApiError
       */
      createManualStage(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/manual-workflow/stage",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get all manual stages
       * @returns ManualStagesResponse
       * @throws ApiError
       */
      getManualStages() {
        return this.httpRequest.request({
          method: "GET",
          url: "/manual-workflow/stage"
        });
      }
      /**
       * Get manual stage by id
       * @param id
       * @returns ManualStageResponse
       * @throws ApiError
       */
      getManualStage(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/manual-workflow/stage/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Update manual stage
       * @param id
       * @param requestBody
       * @returns ManualStageResponse
       * @throws ApiError
       */
      updateManualStage(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/manual-workflow/stage/{id}",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * delete manual stage
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      deleteManualStage(id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/manual-workflow/stage/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Add a new manual workflow
       * @param requestBody
       * @returns ManualWorkflowResponse
       * @throws ApiError
       */
      createManualWorkflow(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/manual-workflow",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get all manual workflows
       * @returns ManualWorkflowsResponse
       * @throws ApiError
       */
      getManualWorkflows() {
        return this.httpRequest.request({
          method: "GET",
          url: "/manual-workflow"
        });
      }
      /**
       * Get manual workflow by id
       * @param id
       * @returns ManualWorkflowResponse
       * @throws ApiError
       */
      getManualWorkflow(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/manual-workflow/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Update manual workflow
       * @param id
       * @param requestBody
       * @returns ManualWorkflowResponse
       * @throws ApiError
       */
      updateManualWorkflow(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/manual-workflow/{id}",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * delete manual workflow
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      deleteManualWorkflow(id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/manual-workflow/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Create a new manual template
       * @param flowId
       * @param requestBody
       * @returns ManualTemplateResponse
       * @throws ApiError
       */
      createManualTemplate(flowId, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/manual-workflow/{flowId}/template",
          path: {
            "flowId": flowId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get all manual templates in workflow
       * @param flowId
       * @returns ManualTemplatesResponse
       * @throws ApiError
       */
      getManualWorkflowTemplates(flowId) {
        return this.httpRequest.request({
          method: "GET",
          url: "/manual-workflow/{flowId}/template",
          path: {
            "flowId": flowId
          }
        });
      }
      /**
       * Get manual template
       * @param flowId
       * @param id
       * @returns ManualTemplateResponse
       * @throws ApiError
       */
      getManualTemplate(flowId, id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/manual-workflow/{flowId}/template/{id}",
          path: {
            "flowId": flowId,
            "id": id
          }
        });
      }
      /**
       * update manual template
       * @param flowId
       * @param id
       * @param requestBody
       * @returns ManualTemplateResponse
       * @throws ApiError
       */
      updateManualTemplate(flowId, id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/manual-workflow/{flowId}/template/{id}",
          path: {
            "flowId": flowId,
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Delete manual template
       * @param flowId
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      deleteManualTemplate(flowId, id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/manual-workflow/{flowId}/template/{id}",
          path: {
            "flowId": flowId,
            "id": id
          }
        });
      }
      /**
       * Add manual stage to workflow
       * @param flowId
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      addManualWorkflowStage(flowId, id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/manual-workflow/{flowId}/stage/{id}",
          path: {
            "flowId": flowId,
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Update workflow manual stage
       * @param flowId
       * @param id
       * @param requestBody
       * @returns ManualWorkflowStageResponse
       * @throws ApiError
       */
      updateManualWorkflowStage(flowId, id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/manual-workflow/{flowId}/stage/{id}",
          path: {
            "flowId": flowId,
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * delete manual stage from workflow
       * @param flowId
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      deleteManualWorkflowStage(flowId, id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/manual-workflow/{flowId}/stage/{id}",
          path: {
            "flowId": flowId,
            "id": id
          }
        });
      }
      /**
       * Get all manual stages in workflow
       * @param flowId
       * @returns ManualWorkflowStagesResponse
       * @throws ApiError
       */
      getManualWorkflowStages(flowId) {
        return this.httpRequest.request({
          method: "GET",
          url: "/manual-workflow/{flowId}/stage",
          path: {
            "flowId": flowId
          }
        });
      }
      /**
       * Duplicate manual workflow with its stages and templates
       * @param id
       * @param requestBody
       * @returns ManualWorkflowResponse
       * @throws ApiError
       */
      duplicateManualWorkflow(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/manual-workflow/{id}/duplicate",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get allowed mandatory deployment fields for manual stages
       * @returns MandatoryFieldsResponse
       * @throws ApiError
       */
      getAllowedMandatoryFields() {
        return this.httpRequest.request({
          method: "GET",
          url: "/manual-workflow/mandatory-fields/allowed"
        });
      }
    };
    exports2.ManualFlowService = ManualFlowService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/MissingEventsService.js
var require_MissingEventsService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/MissingEventsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MissingEventsService = void 0;
    var MissingEventsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Sync missing events from support tickets and blocked events
       * @param from
       * @param to
       * @returns any Successful response
       * @throws ApiError
       */
      syncMissingEvents(from, to) {
        return this.httpRequest.request({
          method: "POST",
          url: "/missing-events/sync",
          query: {
            "from": from,
            "to": to
          }
        });
      }
    };
    exports2.MissingEventsService = MissingEventsService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/NoteCommentsService.js
var require_NoteCommentsService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/NoteCommentsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NoteCommentsService = void 0;
    var NoteCommentsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * returns a list of an auditable model note comments
       * @param modelName
       * @param refId
       * @param noteId
       * @param page
       * @param count
       * @returns ListNoteCommentsRes
       * @throws ApiError
       */
      listNoteComments(modelName, refId, noteId, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/notes/{modelName}/comments/{refId}/{noteId}",
          path: {
            "modelName": modelName,
            "refId": refId,
            "noteId": noteId
          },
          query: {
            "page": page,
            "count": count
          }
        });
      }
      /**
       * create an auditable model new note comment
       * @param modelName
       * @param refId
       * @param noteId
       * @param requestBody
       * @returns NotesCommentResponse
       * @throws ApiError
       */
      createNoteComment(modelName, refId, noteId, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/notes/{modelName}/comments/{refId}/{noteId}",
          path: {
            "modelName": modelName,
            "refId": refId,
            "noteId": noteId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * update an auditable model note comment
       * @param modelName
       * @param commentId
       * @param requestBody
       * @returns NotesCommentResponse
       * @throws ApiError
       */
      updateNoteComment(modelName, commentId, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/notes/{modelName}/comments/{commentId}",
          path: {
            "modelName": modelName,
            "commentId": commentId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * delete an auditable model note comment
       * @param modelName
       * @param commentId
       * @returns any Successful response
       * @throws ApiError
       */
      deleteNoteComment(modelName, commentId) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/notes/{modelName}/comments/{commentId}",
          path: {
            "modelName": modelName,
            "commentId": commentId
          }
        });
      }
    };
    exports2.NoteCommentsService = NoteCommentsService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/NotesService.js
var require_NotesService2 = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/NotesService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NotesService = void 0;
    var NotesService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * returns a list of an auditable model notes
       * @param modelName
       * @param refId
       * @param page
       * @param count
       * @returns ListNotesRes
       * @throws ApiError
       */
      listNotes(modelName, refId, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/notes/{modelName}/{refId}",
          path: {
            "modelName": modelName,
            "refId": refId
          },
          query: {
            "page": page,
            "count": count
          }
        });
      }
      /**
       * create an auditable model new note
       * @param modelName
       * @param refId
       * @param requestBody
       * @returns NoteResponse
       * @throws ApiError
       */
      createNote(modelName, refId, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/notes/{modelName}/{refId}",
          path: {
            "modelName": modelName,
            "refId": refId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * update an auditable model note
       * @param modelName
       * @param noteId
       * @param requestBody
       * @returns NoteResponse
       * @throws ApiError
       */
      updateNote(modelName, noteId, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/notes/{modelName}/{noteId}",
          path: {
            "modelName": modelName,
            "noteId": noteId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * delete an auditable model note
       * @param modelName
       * @param noteId
       * @returns any Successful response
       * @throws ApiError
       */
      deleteNote(modelName, noteId) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/notes/{modelName}/{noteId}",
          path: {
            "modelName": modelName,
            "noteId": noteId
          }
        });
      }
    };
    exports2.NotesService = NotesService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/OutreachService.js
var require_OutreachService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/OutreachService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.OutreachService = void 0;
    var OutreachService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Create a new outreach flow.
       * @param requestBody
       * @returns CreateResponse
       * @throws ApiError
       */
      createOutreachFlow(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/outreach",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get all outreach flows
       * @returns GetOutreachFlowsResponse
       * @throws ApiError
       */
      getOutreachFlows() {
        return this.httpRequest.request({
          method: "GET",
          url: "/outreach"
        });
      }
      /**
       * Duplicate outreach flow with its email policies
       * @param id
       * @param requestBody
       * @returns CreateResponse
       * @throws ApiError
       */
      duplicateOutreachFlow(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/outreach/{id}/duplicate",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get outreach flow.
       * @param id
       * @returns GetOutreachFlowResponse
       * @throws ApiError
       */
      getOutreachFlow(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/outreach/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * update outreach flow
       * @param id
       * @param requestBody UpdateOutreachFlowPayload
       * @returns any Successful response
       * @throws ApiError
       */
      updateOutreachFlow(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/outreach/{id}",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * delete outreach flow
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      deleteOutreachFlow(id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/outreach/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Create a new flow email policy
       * @param flowId
       * @param requestBody CreateOutreachEmailPolicyPayload
       * @returns CreateResponse
       * @throws ApiError
       */
      createOutreachEmailPolicy(flowId, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/outreach/{flowId}/policy",
          path: {
            "flowId": flowId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Delete a flow email policy
       * @param flowId
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      deleteOutreachEmailPolicy(flowId, id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/outreach/{flowId}/policy/{id}",
          path: {
            "flowId": flowId,
            "id": id
          }
        });
      }
      /**
       * Get a flow email policy
       * @param flowId
       * @param id
       * @returns GetOutreachFlowEmailPolicyResponse
       * @throws ApiError
       */
      getOutreachEmailPolicy(flowId, id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/outreach/{flowId}/policy/{id}",
          path: {
            "flowId": flowId,
            "id": id
          }
        });
      }
      /**
       * Update a flow email policy
       * @param flowId
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      updateOutreachEmailPolicy(flowId, id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/outreach/{flowId}/policy/{id}",
          path: {
            "flowId": flowId,
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get a all flow email policy
       * @param flowId
       * @returns GetAllOutreachFlowEmailPoliciesResponse
       * @throws ApiError
       */
      getAllOutreachEmailPolicies(flowId) {
        return this.httpRequest.request({
          method: "GET",
          url: "/outreach/{flowId}/policies",
          path: {
            "flowId": flowId
          }
        });
      }
      /**
       * Get list of sequences from mixmax
       * @returns MixmaxSequencesResponse
       * @throws ApiError
       */
      getMixmaxSequences() {
        return this.httpRequest.request({
          method: "GET",
          url: "/outreach/mixmax/sequences"
        });
      }
    };
    exports2.OutreachService = OutreachService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/OutreachInfoService.js
var require_OutreachInfoService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/OutreachInfoService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.OutreachInfoService = void 0;
    var OutreachInfoService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Get all supported sendgrid variables
       * @returns GetSupportedSendgridVariablesResponse
       * @throws ApiError
       */
      getSupportedSendgridVariables() {
        return this.httpRequest.request({
          method: "GET",
          url: "/outreach-info/variables"
        });
      }
      /**
       * Get all supported outreach languages
       * @returns GetSupportedLanguagesResponse
       * @throws ApiError
       */
      getSupportedOutreachLanguages() {
        return this.httpRequest.request({
          method: "GET",
          url: "/outreach-info/languages"
        });
      }
      /**
       * Get all supported outreach stages
       * @returns GetSupportedOutreachStagesResponse
       * @throws ApiError
       */
      getSupportedOutreachStages() {
        return this.httpRequest.request({
          method: "GET",
          url: "/outreach-info/stages"
        });
      }
      /**
       * Get all supported outreach recipient
       * @returns GetSupportedOutreachRecipientsResponse
       * @throws ApiError
       */
      getSupportedOutreachRecipients() {
        return this.httpRequest.request({
          method: "GET",
          url: "/outreach-info/recipient"
        });
      }
      /**
       * Get email preview templates
       * @param names
       * @returns GetEmailTemplatesResponse
       * @throws ApiError
       */
      getEmailPreviewTemplates(names) {
        return this.httpRequest.request({
          method: "GET",
          url: "/outreach-info/email-preview",
          query: {
            "names": names
          }
        });
      }
      /**
       * Send template emails in bulk
       * @param requestBody SendBulkEmailTemplatesPayload
       * @returns SendEmailBulkTemplatesResponse
       * @throws ApiError
       */
      sendEmailBulkTemplates(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/outreach-info/emails-bulk-templates",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get email settings
       * @param page
       * @param count
       * @returns GetEmailSettingsResponse
       * @throws ApiError
       */
      getEmailSettings(page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/outreach-info/email-settings",
          query: {
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Get and email setting by id
       * @param emailSettingId
       * @returns SingleEmailSettingResponse
       * @throws ApiError
       */
      getEmailSettingById(emailSettingId) {
        return this.httpRequest.request({
          method: "GET",
          url: "/outreach-info/email-setting/{emailSettingId}",
          path: {
            "emailSettingId": emailSettingId
          }
        });
      }
      /**
       * Update an email setting by id
       * @param emailSettingId
       * @param requestBody
       * @returns SingleEmailSettingResponse
       * @throws ApiError
       */
      updateEmailSetting(emailSettingId, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/outreach-info/email-setting/{emailSettingId}",
          path: {
            "emailSettingId": emailSettingId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Update an email setting by id
       * @param emailSettingId
       * @returns any Successful response
       * @throws ApiError
       */
      deleteEmailSetting(emailSettingId) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/outreach-info/email-setting/{emailSettingId}",
          path: {
            "emailSettingId": emailSettingId
          }
        });
      }
      /**
       * Create an email setting
       * @param requestBody
       * @returns SingleEmailSettingResponse
       * @throws ApiError
       */
      createEmailSetting(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/outreach-info/email-setting",
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.OutreachInfoService = OutreachInfoService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/OverviewService.js
var require_OverviewService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/OverviewService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.OverviewService = void 0;
    var OverviewService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Get all budgets involved in the selected month and year
       * @param month
       * @param year
       * @returns MonthlyCampaignBudgetsResponse
       * @throws ApiError
       */
      getBudgetsByMonthAndYear(month, year) {
        return this.httpRequest.request({
          method: "GET",
          url: "/overview/budgets-by-month-year",
          query: {
            "month": month,
            "year": year
          }
        });
      }
      /**
       * Get budgets eligibility stats for plot
       * @param requestBody
       * @returns OverviewPlotResponse
       * @throws ApiError
       */
      getEligibilityData(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/overview/eligibility-stats",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get budgets outreach stats for plot
       * @param requestBody
       * @returns OverviewPlotResponse
       * @throws ApiError
       */
      getOutreachData(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/overview/outreach-stats",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get budgets revenue stats for plot
       * @param requestBody
       * @returns OverviewPlotResponse
       * @throws ApiError
       */
      getRevenueData(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/overview/revenue-stats",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get budgets revenue estimated vs predicted stats for plot
       * @param requestBody
       * @returns OverviewPlotResponse
       * @throws ApiError
       */
      getEstimatedVsPredictedData(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/overview/estimated-vs-predicted-stats",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get budgets email stats for plot
       * @param requestBody
       * @returns OverviewPlotResponse
       * @throws ApiError
       */
      getEmailData(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/overview/email-stats",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get budgets payout stats for plot
       * @param requestBody
       * @returns OverviewPlotResponse
       * @throws ApiError
       */
      getPayoutData(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/overview/payout-stats",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get start by budget stats for plot
       * @param requestBody
       * @returns OverviewPlotResponse
       * @throws ApiError
       */
      getStartByBudgetData(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/overview/start-by-budget-stats",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get budgets view vs start stats for plot
       * @param requestBody
       * @returns OverviewPlotResponse
       * @throws ApiError
       */
      getViewVsStartsData(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/overview/view-vs-start-stats",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get budgets won vs lost stats for plot
       * @param requestBody
       * @returns OverviewPlotResponse
       * @throws ApiError
       */
      getWonVsLostData(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/overview/won-vs-lost-stats",
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.OverviewService = OverviewService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/PredictionsService.js
var require_PredictionsService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/PredictionsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PredictionsService = void 0;
    var PredictionsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Compute payout prediction for a deployment
       * @param deploymentId
       * @returns PredictionResponse
       * @throws ApiError
       */
      getPayoutPrediction(deploymentId) {
        return this.httpRequest.request({
          method: "GET",
          url: "/predictions/{deploymentId}/payout",
          path: {
            "deploymentId": deploymentId
          }
        });
      }
      /**
       * Compute revenue prediction for a deployment
       * @param deploymentId
       * @returns PredictionResponse
       * @throws ApiError
       */
      getRevenuePrediction(deploymentId) {
        return this.httpRequest.request({
          method: "GET",
          url: "/predictions/{deploymentId}/revenue",
          path: {
            "deploymentId": deploymentId
          }
        });
      }
      /**
       * Refresh underlying views for predictions
       * @returns any Successful response
       * @throws ApiError
       */
      refreshPredictionMaterializedViews() {
        return this.httpRequest.request({
          method: "POST",
          url: "/predictions/refresh-views"
        });
      }
    };
    exports2.PredictionsService = PredictionsService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/PromoCodeListsService.js
var require_PromoCodeListsService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/PromoCodeListsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PromoCodeListsService = void 0;
    var PromoCodeListsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Returns a list of promo code lists.
       * @param advertiserId
       * @param q
       * @param page
       * @param count
       * @returns PromoCodeListsResponse
       * @throws ApiError
       */
      getPromoCodeLists(advertiserId, q, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/promocodelists",
          query: {
            "advertiserId": advertiserId,
            "q": q,
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Create a promoCodeList
       * @param requestBody
       * @returns PromoCodeListResponse
       * @throws ApiError
       */
      createPromoCodeList(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/promocodelists",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Returns a specific promoCodeList by id.
       * @param id
       * @returns PromoCodeListResponse
       * @throws ApiError
       */
      getPromoCodeList(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/promocodelists/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Update a promoCodeList
       * @param id
       * @param requestBody
       * @returns PromoCodeListResponse
       * @throws ApiError
       */
      updatePromoCodeList(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/promocodelists/{id}",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Delete a promoCodeList
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      deletePromoCodeList(id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/promocodelists/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Upload multiple promoCodes to a list
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      bulkInsertPromoCodes(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/promocodelists/{id}/bulk-insert-codes",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.PromoCodeListsService = PromoCodeListsService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/PromoCodesService.js
var require_PromoCodesService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/PromoCodesService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PromoCodesService = void 0;
    var PromoCodesService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Returns a paged set of promo codes.
       * @param promoCodeListId
       * @param usage
       * @param q
       * @param page
       * @param count
       * @returns PromoCodesResponse
       * @throws ApiError
       */
      getPromoCodes(promoCodeListId, usage, q, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/promocodes",
          query: {
            "promoCodeListId": promoCodeListId,
            "usage": usage,
            "q": q,
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Create a promoCode
       * @param requestBody
       * @returns PromoCodeResponse
       * @throws ApiError
       */
      createPromoCode(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/promocodes",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Returns a specific promoCode by id.
       * @param id
       * @returns PromoCodeResponse
       * @throws ApiError
       */
      getPromoCode(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/promocodes/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Update a promoCode
       * @param id
       * @param requestBody
       * @returns PromoCodeResponse
       * @throws ApiError
       */
      updatePromoCode(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/promocodes/{id}",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Delete a promoCode
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      deletePromoCode(id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/promocodes/{id}",
          path: {
            "id": id
          }
        });
      }
    };
    exports2.PromoCodesService = PromoCodesService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/SearchService.js
var require_SearchService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/SearchService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SearchService = void 0;
    var SearchService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Search for sponsorships information
       * @param requestBody
       * @returns SearchResultResponse
       * @throws ApiError
       */
      search(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/search",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Search for sponsorships information
       * @param index
       * @param query
       * @param aggregations
       * @param sort
       * @param from
       * @param size
       * @returns SearchResultResponse
       * @throws ApiError
       */
      searchGet(index, query, aggregations, sort, from, size) {
        return this.httpRequest.request({
          method: "GET",
          url: "/search",
          query: {
            "index": index,
            "query": query,
            "aggregations": aggregations,
            "sort": sort,
            "from": from,
            "size": size
          }
        });
      }
      /**
       * Download search for sponsorships information
       * @param requestBody
       * @returns BulkActionResponse
       * @throws ApiError
       */
      searchDownload(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/search/download",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Returns available search fields information
       * @param index
       * @returns SearchMappingResponse
       * @throws ApiError
       */
      getFields(index) {
        return this.httpRequest.request({
          method: "GET",
          url: "/search/mapping",
          query: {
            "index": index
          }
        });
      }
      /**
       * Returns available search terms information
       * @param index
       * @param field
       * @param string
       * @param size
       * @returns SearchTermsResponse
       * @throws ApiError
       */
      getTerms(index, field, string, size) {
        return this.httpRequest.request({
          method: "GET",
          url: "/search/terms",
          query: {
            "index": index,
            "field": field,
            "string": string,
            "size": size
          }
        });
      }
    };
    exports2.SearchService = SearchService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/SendGridService.js
var require_SendGridService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/SendGridService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SendGridService = void 0;
    var SendGridService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Webhook handler from SendGrid
       * @param xTwilioEmailEventWebhookSignature
       * @param xTwilioEmailEventWebhookTimestamp
       * @returns any Successful response
       * @throws ApiError
       */
      receiveSendGridEvent(xTwilioEmailEventWebhookSignature, xTwilioEmailEventWebhookTimestamp) {
        return this.httpRequest.request({
          method: "POST",
          url: "/ext/sendgrid/events",
          headers: {
            "X-Twilio-Email-Event-Webhook-Signature": xTwilioEmailEventWebhookSignature,
            "X-Twilio-Email-Event-Webhook-Timestamp": xTwilioEmailEventWebhookTimestamp
          }
        });
      }
    };
    exports2.SendGridService = SendGridService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/ShareService.js
var require_ShareService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/ShareService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ShareService = void 0;
    var ShareService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Generate link to share
       * @param requestBody
       * @returns ShareLinkResponse
       * @throws ApiError
       */
      createShareLink(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/share",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Redirect to shared link
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      redirectToLink(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/share/{id}",
          path: {
            "id": id
          }
        });
      }
    };
    exports2.ShareService = ShareService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/SpendReportsService.js
var require_SpendReportsService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/SpendReportsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SpendReportsService = void 0;
    var SpendReportsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Returns a list of spend reports.
       * @param advertiserId
       * @param startDateStr
       * @param endDateStr
       * @param status
       * @param sort
       * @param page
       * @param count
       * @param q
       * @returns SpendReportsResponse
       * @throws ApiError
       */
      getSpendReports(advertiserId, startDateStr, endDateStr, status, sort, page, count, q) {
        return this.httpRequest.request({
          method: "GET",
          url: "/spend-reports",
          query: {
            "advertiserId": advertiserId,
            "startDateStr": startDateStr,
            "endDateStr": endDateStr,
            "status": status,
            "sort": sort,
            "page": page,
            "count": count,
            "q": q
          }
        });
      }
      /**
       * Create a SpendReport
       * @param requestBody
       * @returns SpendReportResponse
       * @throws ApiError
       */
      createSpendReport(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/spend-reports",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Returns a specific SpendReport by id.
       * @param id
       * @returns SpendReportResponse
       * @throws ApiError
       */
      getSpendReport(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/spend-reports/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Update a SpendReport
       * @param id
       * @param requestBody
       * @returns SpendReportResponse
       * @throws ApiError
       */
      updateSpendReport(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/spend-reports/{id}",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Delete a SpendReport
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      deleteSpendReport(id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/spend-reports/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Generate a SpendReport
       * @param id
       * @returns SpendReportResponse
       * @throws ApiError
       */
      generateSpendReport(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/spend-reports/{id}/generate",
          path: {
            "id": id
          }
        });
      }
    };
    exports2.SpendReportsService = SpendReportsService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/SponsorshipsService.js
var require_SponsorshipsService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/SponsorshipsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SponsorshipsService = void 0;
    var SponsorshipsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Get GrabTap overview details
       * @returns StatsOverview
       * @throws ApiError
       */
      getGrabTapOverview() {
        return this.httpRequest.request({
          method: "GET",
          url: "/sponsorships/grabtap-overview"
        });
      }
      /**
       * Get GrabTap top players
       * @returns TopPlayers
       * @throws ApiError
       */
      getGrabTapTopPlayers() {
        return this.httpRequest.request({
          method: "GET",
          url: "/sponsorships/grabtap-overview/top-players"
        });
      }
      /**
       * Get GrabTap top advertisers
       * @returns GrabTapAdvertisersResponse
       * @throws ApiError
       */
      getGrabTapTopAdvertisers() {
        return this.httpRequest.request({
          method: "GET",
          url: "/sponsorships/grabtap-overview/top-advertisers"
        });
      }
      /**
       * Get GrabTap advertisers
       * @returns GrabTapAdvertisersResponse
       * @throws ApiError
       */
      getGrabTapAdvertisers() {
        return this.httpRequest.request({
          method: "GET",
          url: "/sponsorships/grabtap-advertisers"
        });
      }
      /**
       * Get list of sponsorships for a creator
       * @param legacyChanneld
       * @param acceptLanguage
       * @param state
       * @returns SponsorshipsResponse
       * @throws ApiError
       */
      getInternalSponsorships(legacyChanneld, acceptLanguage, state) {
        return this.httpRequest.request({
          method: "GET",
          url: "/internal/sponsorships/{legacyChanneld}",
          path: {
            "legacyChanneld": legacyChanneld
          },
          headers: {
            "accept-language": acceptLanguage
          },
          query: {
            "state": state
          }
        });
      }
      /**
       * Get list of sponsorships for a creator V2
       * @param state
       * @param acceptLanguage
       * @param page
       * @param count
       * @param platform
       * @returns SponsorshipsResponse
       * @throws ApiError
       */
      getSponsorshipsV2(state, acceptLanguage, page, count, platform) {
        return this.httpRequest.request({
          method: "GET",
          url: "/v2/sponsorships",
          headers: {
            "accept-language": acceptLanguage
          },
          query: {
            "state": state,
            "page": page,
            "count": count,
            "platform": platform
          }
        });
      }
      /**
       * Get payment url by type
       * @param type
       * @returns PaymentURLResponse
       * @throws ApiError
       */
      getPaymentUrl(type) {
        return this.httpRequest.request({
          method: "GET",
          url: "/sponsorships/payment/url",
          query: {
            "type": type
          }
        });
      }
      /**
       * Get payment info for a sponsorship
       * @param id
       * @returns PayeeOnboardingResponse
       * @throws ApiError
       */
      getPaymentInfo(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/sponsorships/payment",
          query: {
            "id": id
          }
        });
      }
      /**
       * Check with payout system is payment is set up for the creator
       * @returns PayeeOnboardingStatus
       * @throws ApiError
       */
      isPaymentSetup() {
        return this.httpRequest.request({
          method: "GET",
          url: "/sponsorships/is-payment-setup"
        });
      }
      /**
       * Complete deployment for a creator
       * @param id
       * @returns DeploymentResponse
       * @throws ApiError
       */
      completeOffer(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/sponsorships/{id}/complete",
          path: {
            "id": id
          }
        });
      }
      /**
       * start sponsorship for a creator
       * @param id
       * @param requestBody
       * @returns DeploymentResponse
       * @throws ApiError
       */
      startOffer(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/sponsorships/{id}/start",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Start preview based on a group for a creator, making it a deployment
       * @param id
       * @returns DeploymentResponse
       * @throws ApiError
       */
      startPreview(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/sponsorships/{id}/start-preview",
          path: {
            "id": id
          }
        });
      }
      /**
       * update manual deployment with complete interest
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      updateManualDeploymentInterestComplete(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/sponsorships/{id}/complete-interest",
          path: {
            "id": id
          }
        });
      }
      /**
       * update manual deployment with start interest
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      updateManualDeploymentWithStartInterest(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/sponsorships/{id}/start-interest",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * undo manual deployment start interest
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      undoStartInterest(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/sponsorships/{id}/undo-start-interest",
          path: {
            "id": id
          }
        });
      }
      /**
       * Reject sponsorships for a creator
       * @param id
       * @param requestBody RejectOfferPayload
       * @returns any Successful response
       * @throws ApiError
       */
      rejectOffer(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/sponsorships/{id}/reject",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Reject sponsorships preview for a creator
       * @param id
       * @param requestBody RejectOfferPayload
       * @returns any Successful response
       * @throws ApiError
       */
      rejectPreview(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/sponsorships/{id}/reject-preview",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Rejection reasons for creators
       * @returns DeploymentRejectReasons
       * @throws ApiError
       */
      getSponsorshipRejectionReasons() {
        return this.httpRequest.request({
          method: "GET",
          url: "/sponsorships/rejection-reasons"
        });
      }
      /**
       * Get list of sponsorship deliverables for a creator
       * @param id
       * @returns SponsorshipDeliverablesResponse
       * @throws ApiError
       */
      getDeliverables(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/sponsorships/{id}/deliverables",
          path: {
            "id": id
          }
        });
      }
      /**
       * Execute action for a sponsorship deliverable
       * @param deploymentId
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      executeAction(deploymentId, id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/sponsorships/{deploymentId}/deliverables/{id}/execute",
          path: {
            "deploymentId": deploymentId,
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Execute action for a sponsorship deliverable with result
       * @param deploymentId
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      executeActionWithResult(deploymentId, id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/sponsorships/{deploymentId}/deliverables/{id}/executeWithResult",
          path: {
            "deploymentId": deploymentId,
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Update deliverable progress manually
       * @param deploymentId
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      updateGoalProgress(deploymentId, id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/sponsorships/{deploymentId}/deliverables/{id}/goalProgress",
          path: {
            "deploymentId": deploymentId,
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Change the deployment state from outreached to viewed
       * @param deploymentId
       * @returns DeploymentResponse
       * @throws ApiError
       */
      viewDeployment(deploymentId) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/sponsorships/{deploymentId}/viewed",
          path: {
            "deploymentId": deploymentId
          }
        });
      }
      /**
       * Mark the preview sponsorship as viewed
       * @param id
       * @returns DeploymentResponse
       * @throws ApiError
       */
      viewPreview(id) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/sponsorships-preview/{id}/viewed",
          path: {
            "id": id
          }
        });
      }
      /**
       * Get intents for sponsorship across all deployments
       * @returns CreatorIntentListResponse
       * @throws ApiError
       */
      listCreatorIntents() {
        return this.httpRequest.request({
          method: "GET",
          url: "/sponsorships/intents"
        });
      }
      /**
       * Create user intent
       * @param requestBody CreatorIntentCreateInput
       * @returns CreatorIntentResponse
       * @throws ApiError
       */
      createCreatorIntent(requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/sponsorships/intents",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get sponsorship by id
       * @param id
       * @param acceptLanguage
       * @returns SponsorshipResponse
       * @throws ApiError
       */
      getSponsorshipById(id, acceptLanguage) {
        return this.httpRequest.request({
          method: "GET",
          url: "/sponsorships/{id}",
          path: {
            "id": id
          },
          headers: {
            "accept-language": acceptLanguage
          }
        });
      }
      /**
       * Get sponsorship preview by id
       * @param id
       * @param acceptLanguage
       * @returns SponsorshipResponse
       * @throws ApiError
       */
      getSponsorshipPreviewById(id, acceptLanguage) {
        return this.httpRequest.request({
          method: "GET",
          url: "/sponsorships-preview/{id}",
          path: {
            "id": id
          },
          headers: {
            "accept-language": acceptLanguage
          }
        });
      }
      /**
       * Get list of sponsorship preview deliverables for a creator
       * @param id
       * @returns SponsorshipDeliverablesResponse
       * @throws ApiError
       */
      getPreviewDeliverables(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/sponsorships-preview/{id}/deliverables",
          path: {
            "id": id
          }
        });
      }
      /**
       * Remove user intent
       * @param id
       * @returns CreatorIntentRemoveResponse
       * @throws ApiError
       */
      removeCreatorIntent(id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/sponsorships/intents/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Get contract signed url
       * @param deploymentId
       * @returns GetFileSignedUrlResponse
       * @throws ApiError
       */
      generateContractSignedUrl(deploymentId) {
        return this.httpRequest.request({
          method: "POST",
          url: "/sponsorships/{deploymentId}/contract",
          path: {
            "deploymentId": deploymentId
          }
        });
      }
      /**
       * Check youtube permissions scopes
       * @param deploymentId
       * @returns HasScopesResponse
       * @throws ApiError
       */
      checkYouTubePermissions(deploymentId) {
        return this.httpRequest.request({
          method: "GET",
          url: "/sponsorships/{deploymentId}/youtube/permissions",
          path: {
            "deploymentId": deploymentId
          }
        });
      }
      /**
       * Get public sponsorship by id
       * @param id
       * @param acceptLanguage
       * @returns PublicSponsorshipResponse
       * @throws ApiError
       */
      getPublicSponsorshipById(id, acceptLanguage) {
        return this.httpRequest.request({
          method: "GET",
          url: "/sponsorships/public/{id}",
          path: {
            "id": id
          },
          headers: {
            "accept-language": acceptLanguage
          }
        });
      }
      /**
       * Get public sponsorships by channel id
       * @param channel
       * @param acceptLanguage
       * @param page
       * @param count
       * @returns SponsorshipsResponse
       * @throws ApiError
       */
      getPublicSponsorshipsByChannelId(channel, acceptLanguage, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/sponsorships/public/{channel}/list",
          path: {
            "channel": channel
          },
          headers: {
            "accept-language": acceptLanguage
          },
          query: {
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Get list of sponsorship deliverables for a creator by public id
       * @param id
       * @returns SponsorshipDeliverablesResponse
       * @throws ApiError
       */
      getPublicDeliverables(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/sponsorships/public/{id}/deliverables",
          path: {
            "id": id
          }
        });
      }
      /**
       * Get sponsorship by public id
       * @param id
       * @returns SponsorshipResponse
       * @throws ApiError
       */
      getSponsorshipByPublicId(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/sponsorships/{id}/public",
          path: {
            "id": id
          }
        });
      }
      /**
       * Change the deployment state to viewed
       * @param publicDeploymentId
       * @returns any Successful response
       * @throws ApiError
       */
      viewPublicDeployment(publicDeploymentId) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/sponsorships/{publicDeploymentId}/public-viewed",
          path: {
            "publicDeploymentId": publicDeploymentId
          }
        });
      }
      /**
       * Get sponsorship creator feedback
       * @param sponsorshipId
       * @returns SponsorshipCreatorFeedback
       * @throws ApiError
       */
      getSponsorshipCreatorFeedback(sponsorshipId) {
        return this.httpRequest.request({
          method: "GET",
          url: "/sponsorships/{sponsorshipId}/feedback",
          path: {
            "sponsorshipId": sponsorshipId
          }
        });
      }
      /**
       * Creator sponsorship creator feedback
       * @param sponsorshipId
       * @param requestBody
       * @returns SponsorshipCreatorFeedback
       * @throws ApiError
       */
      createSponsorshipCreatorFeedback(sponsorshipId, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/sponsorships/{sponsorshipId}/feedback",
          path: {
            "sponsorshipId": sponsorshipId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Upsert sponsorship creator feedback
       * @param sponsorshipId
       * @param requestBody
       * @returns SponsorshipCreatorFeedback
       * @throws ApiError
       */
      upsertSponsorshipCreatorFeedback(sponsorshipId, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/sponsorships/{sponsorshipId}/feedback",
          path: {
            "sponsorshipId": sponsorshipId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Log deployment UTM
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      logDeploymentUtm(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/sponsorships/{id}/log-utm",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Log eligibility/preview UTM
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      logPreviewUtm(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/sponsorships/{id}/log-utm-preview",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get blocked advertisers
       * @returns BlockedAdvertisersResponse
       * @throws ApiError
       */
      getBlockedAdvertisers() {
        return this.httpRequest.request({
          method: "GET",
          url: "/sponsorships/advertisers/blocked"
        });
      }
      /**
       * Get live streams for creator available advertisers
       * @param acceptLanguage
       * @param page
       * @param count
       * @param advertiserId
       * @returns LiveStreamsResponse
       * @throws ApiError
       */
      getLiveStreams(acceptLanguage, page, count, advertiserId) {
        return this.httpRequest.request({
          method: "GET",
          url: "/sponsorships/live-streams/current",
          headers: {
            "accept-language": acceptLanguage
          },
          query: {
            "page": page,
            "count": count,
            "advertiserId": advertiserId
          }
        });
      }
      /**
       * Get stats about the sponsorships advertiser
       * @param advertiserId
       * @param acceptLanguage
       * @param platform
       * @returns SponsorshipAdvertiserStatsResponse
       * @throws ApiError
       */
      getSponsorshipAdvertiserStats(advertiserId, acceptLanguage, platform) {
        return this.httpRequest.request({
          method: "GET",
          url: "/sponsorships/advertiser-stats/{advertiserId}",
          path: {
            "advertiserId": advertiserId
          },
          headers: {
            "accept-language": acceptLanguage
          },
          query: {
            "platform": platform
          }
        });
      }
      /**
       * Unassign a creator from an agency by the creator
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      deleteAgencyCreatorByCreator(id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/sponsorships/agency/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Get creator starred/preferred email by deployment public id
       * @param id
       * @returns SponsorshipsCreatorResponse
       * @throws ApiError
       */
      getCreatorEmailByPublicDeploymentId(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/sponsorships/creator-email/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Send slack notification on user intent from public page
       * @param channelId
       * @param requestBody CreatorIntentCreateInput
       * @returns any Successful response
       * @throws ApiError
       */
      notifyOnCreatorIntent(channelId, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/sponsorships/public/{channelId}/intent",
          path: {
            "channelId": channelId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.SponsorshipsService = SponsorshipsService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/SponsorshipsPreviewService.js
var require_SponsorshipsPreviewService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/SponsorshipsPreviewService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SponsorshipsPreviewService = void 0;
    var SponsorshipsPreviewService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Get sponsorship preview by group id and channel id public
       * @param groupId
       * @param channelId
       * @param acceptLanguage
       * @returns PublicSponsorshipResponse
       * @throws ApiError
       */
      getSponsorshipPublicPreview(groupId, channelId, acceptLanguage) {
        return this.httpRequest.request({
          method: "GET",
          url: "/public/sponsorships-preview/{groupId}/{channelId}",
          path: {
            "groupId": groupId,
            "channelId": channelId
          },
          headers: {
            "accept-language": acceptLanguage
          }
        });
      }
      /**
       * Get list of sponsorship preview deliverables for a group and channel id public
       * @param groupId
       * @param channelId
       * @returns SponsorshipDeliverablesResponse
       * @throws ApiError
       */
      getPublicPreviewDeliverables(groupId, channelId) {
        return this.httpRequest.request({
          method: "GET",
          url: "/public/sponsorships-preview/{groupId}/{channelId}/deliverables",
          path: {
            "groupId": groupId,
            "channelId": channelId
          }
        });
      }
      /**
       * Mark the preview sponsorship as viewed
       * @param groupId
       * @param channelId
       * @returns DeploymentResponse
       * @throws ApiError
       */
      viewPublicPreview(groupId, channelId) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/public/sponsorships-preview/{groupId}/{channelId}/viewed",
          path: {
            "groupId": groupId,
            "channelId": channelId
          }
        });
      }
    };
    exports2.SponsorshipsPreviewService = SponsorshipsPreviewService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/StatsService.js
var require_StatsService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/StatsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StatsService = void 0;
    var StatsService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Update eligibility stats
       * @returns any Successful response
       * @throws ApiError
       */
      statsControllerUpdateEligibilityStats() {
        return this.httpRequest.request({
          method: "POST",
          url: "/stats/eligibility"
        });
      }
      /**
       * Update deployment scores
       * @returns any Successful response
       * @throws ApiError
       */
      statsControllerUpdateDeploymentScores() {
        return this.httpRequest.request({
          method: "POST",
          url: "/stats/score"
        });
      }
      /**
       * Update creator scores
       * @returns any Successful response
       * @throws ApiError
       */
      statsControllerUpdateCreatorScores() {
        return this.httpRequest.request({
          method: "POST",
          url: "/stats/creator-score"
        });
      }
      /**
       * Update channel labels stats
       * @returns any Successful response
       * @throws ApiError
       */
      statsControllerUpdateChannelLabelsStats() {
        return this.httpRequest.request({
          method: "POST",
          url: "/stats/channel-labels"
        });
      }
      /**
       * Update deployment state changes stats
       * @returns any Successful response
       * @throws ApiError
       */
      statsControllerUpdateDeploymentStateChangesStats() {
        return this.httpRequest.request({
          method: "POST",
          url: "/stats/deployment-state-changes"
        });
      }
      /**
       * Update email delivery stats
       * @returns any Successful response
       * @throws ApiError
       */
      statsControllerUpdateEmailDeliveryStats() {
        return this.httpRequest.request({
          method: "POST",
          url: "/stats/email-delivery"
        });
      }
      /**
       * Update eligibility materialised views stats
       * @returns any Successful response
       * @throws ApiError
       */
      statsControllerUpdateEligibilityMaterialisedViewsStats() {
        return this.httpRequest.request({
          method: "POST",
          url: "/stats/eligibility-refresh-views"
        });
      }
      /**
       * Update all group stats
       * @returns any Successful response
       * @throws ApiError
       */
      statsControllerUpdateAllGroupStats() {
        return this.httpRequest.request({
          method: "POST",
          url: "/stats/update-groups"
        });
      }
      /**
       * Update all campaign stats
       * @returns any Successful response
       * @throws ApiError
       */
      statsControllerUpdateAllCampaignStats() {
        return this.httpRequest.request({
          method: "POST",
          url: "/stats/update-campaigns"
        });
      }
      /**
       * Update group stats
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      statsControllerUpdateGroupStats(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/stats/group/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Update campaign stats
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      statsControllerUpdateCampaignStats(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/stats/campaign/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Send stats health alerts
       * @returns any Successful response
       * @throws ApiError
       */
      statsControllerSendStatsHealthAlerts() {
        return this.httpRequest.request({
          method: "POST",
          url: "/stats/health-alerts"
        });
      }
      /**
       * Update deployments config stats
       * @returns any Successful response
       * @throws ApiError
       */
      statsControllerUpdateDeploymentsConfigStats() {
        return this.httpRequest.request({
          method: "POST",
          url: "/stats/update-deployments-config-stats-manually"
        });
      }
      /**
       * Update deployment config stats
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      statsControllerUpdateDeploymentConfigStats(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/stats/update-deployments-config-stats-manually/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Update group config stats
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      statsControllerUpdateGroupConfigStats(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/stats/update-group-config-stats-manually/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Update group stats manually
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      statsControllerUpdateGroupStatsManually(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/stats/update-group-stats-manually/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Update campaign stats manually
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      statsControllerUpdateCampaignStatsManually(id) {
        return this.httpRequest.request({
          method: "POST",
          url: "/stats/update-campaign-stats-manually/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Update deployment scores manually
       * @param campaignId
       * @returns any Successful response
       * @throws ApiError
       */
      statsControllerUpdateDeploymentScoresManually(campaignId) {
        return this.httpRequest.request({
          method: "POST",
          url: "/stats/score/{campaignId}",
          path: {
            "campaignId": campaignId
          }
        });
      }
      /**
       * Update creator scores manually
       * @param groupId
       * @returns any Successful response
       * @throws ApiError
       */
      statsControllerUpdateCreatorScoresManually(groupId) {
        return this.httpRequest.request({
          method: "POST",
          url: "/stats/creator-score/{groupId}",
          path: {
            "groupId": groupId
          }
        });
      }
    };
    exports2.StatsService = StatsService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/TikTokAdvertiserService.js
var require_TikTokAdvertiserService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/TikTokAdvertiserService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TikTokAdvertiserService = void 0;
    var TikTokAdvertiserService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Returns a list of campaigns of an advertiser
       * @param id
       * @param page
       * @param count
       * @param advertiserId
       * @returns TikTokCampaigns
       * @throws ApiError
       */
      advertiserGetCampaigns(id, page, count, advertiserId) {
        return this.httpRequest.request({
          method: "GET",
          url: "/advers/tiktok/campaigns",
          query: {
            "id": id,
            "page": page,
            "count": count,
            "advertiserId": advertiserId
          }
        });
      }
      /**
       * Create a new TikTok campaign for an advertiser
       * @param requestBody
       * @returns TikTokCampaign
       * @throws ApiError
       */
      advertiserCreateCampaign(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/advers/tiktok/campaigns",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Returns a list of offerings of an advertiser
       * @returns TikTokOfferings
       * @throws ApiError
       */
      advertiserGetOfferings() {
        return this.httpRequest.request({
          method: "GET",
          url: "/advers/tiktok/offerings"
        });
      }
      /**
       * Check if the given campaign name already exists across all the user's accounts
       * @param requestBody
       * @returns TikTokCampaign
       * @throws ApiError
       */
      advertiserCheckCampaignNameExists(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/advers/tiktok/campaign-name-exists",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Update an existing TikTok campaign for an advertiser
       * @param campaignId
       * @param requestBody
       * @returns TikTokCampaign
       * @throws ApiError
       */
      advertiserUpdateCampaign(campaignId, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/advers/tiktok/campaigns/{campaignId}",
          path: {
            "campaignId": campaignId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get deployments of campaign for an advertiser
       * @param campaignId
       * @returns TikTokDeployments
       * @throws ApiError
       */
      advertiserGetDeployments(campaignId) {
        return this.httpRequest.request({
          method: "GET",
          url: "/advers/tiktok/campaigns/{campaignId}/deployments",
          path: {
            "campaignId": campaignId
          }
        });
      }
      /**
       * Get a deployment by id
       * @param deploymentId
       * @returns TikTokDeployment
       * @throws ApiError
       */
      advertiserGetDeploymentById(deploymentId) {
        return this.httpRequest.request({
          method: "GET",
          url: "/advers/tiktok/deployments/{deploymentId}",
          path: {
            "deploymentId": deploymentId
          }
        });
      }
      /**
       * Return a thumbnail of a creative
       * @param deploymentId
       * @param uid
       * @returns any Successful response
       * @throws ApiError
       */
      advertiserGetCreativeThumbnail(deploymentId, uid) {
        return this.httpRequest.request({
          method: "GET",
          url: "/advers/tiktok/deployments/{deploymentId}/creative/thumbnail/{uid}",
          path: {
            "deploymentId": deploymentId,
            "uid": uid
          }
        });
      }
      /**
       * Accept a creative
       * @param deploymentId
       * @returns any Successful response
       * @throws ApiError
       */
      advertiserCreativeAccept(deploymentId) {
        return this.httpRequest.request({
          method: "POST",
          url: "/advers/tiktok/deployments/{deploymentId}/creative/accept",
          path: {
            "deploymentId": deploymentId
          }
        });
      }
      /**
       * Reuest changes
       * @param deploymentId
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      advertiserCreativeRequestChanges(deploymentId, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/advers/tiktok/deployments/{deploymentId}/creative/requestChanges",
          path: {
            "deploymentId": deploymentId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Flag a creative to mark it unusable
       * @param deploymentId
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      advertiserCreativeFlag(deploymentId, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/advers/tiktok/deployments/{deploymentId}/creative/flag",
          path: {
            "deploymentId": deploymentId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Execute action for a deliverable with result
       * @param deploymentId
       * @param deliverableId
       * @param requestBody
       * @returns SponsorshipDeliverableExecuteActionResponse
       * @throws ApiError
       */
      advertiserExecuteActionWithResult(deploymentId, deliverableId, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/advers/tiktok/deployments/{deploymentId}/deliverables/{deliverableId}/executeWithResult",
          path: {
            "deploymentId": deploymentId,
            "deliverableId": deliverableId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Returns a list of offering assets
       * @param offeringId
       * @param page
       * @param count
       * @returns AdvertiserAssetsResponse
       * @throws ApiError
       */
      advertiserGetOfferingAssets(offeringId, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/advers/tiktok/offerings/{offeringId}/assets",
          path: {
            "offeringId": offeringId
          },
          query: {
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Create an asset for an offering
       * @param offeringId
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      advertiserCreateOfferingAsset(offeringId, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/advers/tiktok/offerings/{offeringId}/assets",
          path: {
            "offeringId": offeringId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get specific offering asset
       * @param offeringId
       * @param id
       * @returns AdvertiserAssetResponse
       * @throws ApiError
       */
      advertiserGetOfferingAsset(offeringId, id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/advers/tiktok/offerings/{offeringId}/assets/{id}",
          path: {
            "offeringId": offeringId,
            "id": id
          }
        });
      }
      /**
       * Update an asset of an offering
       * @param offeringId
       * @param id
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      advertiserUpdateOfferingAsset(offeringId, id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/advers/tiktok/offerings/{offeringId}/assets/{id}",
          path: {
            "offeringId": offeringId,
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Delete an asset for an offering
       * @param offeringId
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      advertiserDeleteOfferingAsset(offeringId, id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/advers/tiktok/offerings/{offeringId}/assets/{id}",
          path: {
            "offeringId": offeringId,
            "id": id
          }
        });
      }
      /**
       * Generate an asset upload url for an offering
       * @param offeringId
       * @param requestBody
       * @returns GetFileSignedUrlResponse
       * @throws ApiError
       */
      advertiserGenerateAssetUploadSignedUrl(offeringId, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/advers/tiktok/offerings/{offeringId}/assets/generate-asset-upload-signed-url",
          path: {
            "offeringId": offeringId
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.TikTokAdvertiserService = TikTokAdvertiserService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/TimelineService.js
var require_TimelineService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/TimelineService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TimelineService = void 0;
    var TimelineService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * expose the timeline card types
       * @returns TimelineMapping
       * @throws ApiError
       */
      timelineMapping() {
        return this.httpRequest.request({
          method: "GET",
          url: "/timeline/mapping"
        });
      }
    };
    exports2.TimelineService = TimelineService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/TwitchService.js
var require_TwitchService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/TwitchService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TwitchService = void 0;
    var TwitchService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Redirect to offer URL
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      redirectToOffer(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/twitch/offer/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Redirect to offer preview URL
       * @param campaignGroupId
       * @param channelId
       * @returns any Successful response
       * @throws ApiError
       */
      redirectPreviewToOffer(campaignGroupId, channelId) {
        return this.httpRequest.request({
          method: "GET",
          url: "/twitch/offer-preview/{campaignGroupId}/{channelId}",
          path: {
            "campaignGroupId": campaignGroupId,
            "channelId": channelId
          }
        });
      }
      /**
       * Start twitch eligibility
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      twitchControllerStartTwitchEligibility(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/twitch/start-eligibility",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Export twitch report
       * @returns any Successful response
       * @throws ApiError
       */
      twitchControllerExportTwitchReport() {
        return this.httpRequest.request({
          method: "POST",
          url: "/twitch/export-report"
        });
      }
      /**
       * Twitch creator eligibility
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      twitchControllerTwitchCreatorEligibility(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/twitch/creator-eligibility",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Twitch eligibility stats
       * @returns any Successful response
       * @throws ApiError
       */
      twitchControllerTwitchEligibilityStats() {
        return this.httpRequest.request({
          method: "POST",
          url: "/twitch/eligibility-stats"
        });
      }
      /**
       * Get twitch digest
       * @param page
       * @param limit
       * @returns TwitchDigestResponse
       * @throws ApiError
       */
      getTwitchDigest(page, limit) {
        return this.httpRequest.request({
          method: "GET",
          url: "/twitch/digest",
          query: {
            "page": page,
            "limit": limit
          }
        });
      }
      /**
       * Track a Twitch impression
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      trackTwitchImpression(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/twitch/track-impression",
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.TwitchService = TwitchService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/TypesService.js
var require_TypesService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/TypesService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TypesService = void 0;
    var TypesService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * expose the timeline types
       * @param requestBody
       * @returns any Successful response
       * @throws ApiError
       */
      exposeTimelineTypes(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/",
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.TypesService = TypesService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/ViewerService.js
var require_ViewerService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/ViewerService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ViewerService = void 0;
    var ViewerService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Get creator by platform
       * @param platform
       * @param platformId
       * @returns CreatorByUsernameResponse
       * @throws ApiError
       */
      getCreatorByPlatform(platform, platformId) {
        return this.httpRequest.request({
          method: "GET",
          url: "/viewer/creator-by-platform/{platform}/{platformId}",
          path: {
            "platform": platform,
            "platformId": platformId
          }
        });
      }
      /**
       * Get creator by username
       * @param username
       * @returns CreatorByUsernameResponse
       * @throws ApiError
       */
      getCreatorByUsername(username) {
        return this.httpRequest.request({
          method: "GET",
          url: "/viewer/creator-by-username/{username}",
          path: {
            "username": username
          }
        });
      }
      /**
       * Get creator by id
       * @param id
       * @returns CreatorByUsernameResponse
       * @throws ApiError
       */
      getCreatorById(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/viewer/creator-by-id/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Get creators by id
       * @param requestBody GetCreatorsByIdBody
       * @returns CreatorByUsernameResponse
       * @throws ApiError
       */
      getCreatorsById(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/viewer/creators-by-id",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get deployment information for viewer
       * @param id
       * @param acceptLanguage
       * @returns SponsorshipViewerResponse
       * @throws ApiError
       */
      getDeploymentForViewer(id, acceptLanguage) {
        return this.httpRequest.request({
          method: "GET",
          url: "/viewer/deployments/{id}",
          path: {
            "id": id
          },
          headers: {
            "accept-language": acceptLanguage
          }
        });
      }
      /**
       * Get eligible offer for viewer
       * @param creatorId
       * @param campaignGroupId
       * @param acceptLanguage
       * @param country
       * @param viewerId
       * @param useViewerEligibility
       * @returns CreatorEligibleOfferResponse
       * @throws ApiError
       */
      getEligibleOfferForViewer(creatorId, campaignGroupId, acceptLanguage, country, viewerId, useViewerEligibility) {
        return this.httpRequest.request({
          method: "GET",
          url: "/viewer/eligible-offer/{creatorId}/{campaignGroupId}",
          path: {
            "creatorId": creatorId,
            "campaignGroupId": campaignGroupId
          },
          headers: {
            "accept-language": acceptLanguage
          },
          query: {
            "country": country,
            "viewerId": viewerId,
            "useViewerEligibility": useViewerEligibility
          }
        });
      }
      /**
       * Get eligible offers for viewer
       * @param requestBody GetEligibleOffersBody
       * @returns ViewerEligibleOffersByAdvertiserResponse
       * @throws ApiError
       */
      getViewerEligibleOffers(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/viewer/eligible-offers",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get eligible offers for viewer by advertiser
       * @param advertiserId
       * @param acceptLanguage
       * @param requestBody GetEligibleOffersBody
       * @returns ViewerEligibleOffersResponse
       * @throws ApiError
       */
      getViewerEligibleOffersByAdvertiser(advertiserId, acceptLanguage, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/viewer/eligible-offers/{advertiserId}",
          path: {
            "advertiserId": advertiserId
          },
          headers: {
            "accept-language": acceptLanguage
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get eligible creators for viewer
       * @param requestBody GetEligibleCreatorsBody
       * @returns EligibleCreatorsResponse
       * @throws ApiError
       */
      postViewerEligibleCreators(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/viewer/eligible-creators-post",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get eligible offers for a creator
       * @param id
       * @param acceptLanguage
       * @param excludeAdvertiserIds
       * @param isStaff
       * @param page
       * @param count
       * @param country
       * @param viewerId
       * @param useViewerEligibility
       * @returns CreatorEligibleOffersResponse
       * @throws ApiError
       */
      getViewerCreatorEligibleOffers(id, acceptLanguage, excludeAdvertiserIds, isStaff, page, count, country, viewerId, useViewerEligibility) {
        return this.httpRequest.request({
          method: "GET",
          url: "/viewer/eligible-creators/{id}/offers",
          path: {
            "id": id
          },
          headers: {
            "accept-language": acceptLanguage
          },
          query: {
            "excludeAdvertiserIds": excludeAdvertiserIds,
            "isStaff": isStaff,
            "page": page,
            "count": count,
            "country": country,
            "viewerId": viewerId,
            "useViewerEligibility": useViewerEligibility
          }
        });
      }
      /**
       * Get destination URL
       * @param requestBody GetDestinationBody
       * @returns GetDistinationResponse
       * @throws ApiError
       */
      getDestinationUrl(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/viewer/destination",
          body: requestBody,
          mediaType: "application/json"
        });
      }
    };
    exports2.ViewerService = ViewerService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/services/WorkflowAutomationService.js
var require_WorkflowAutomationService = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/services/WorkflowAutomationService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WorkflowAutomationService = void 0;
    var WorkflowAutomationService = class {
      constructor(httpRequest) {
        this.httpRequest = httpRequest;
      }
      /**
       * Add a new workflow automation
       * @param requestBody
       * @returns WorkflowAutomationResponse
       * @throws ApiError
       */
      createWorkflowAutomation(requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/workflow-automation",
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get all workflow automations
       * @param q
       * @param page
       * @param count
       * @returns WorkflowAutomationsResponse
       * @throws ApiError
       */
      getWorkflowAutomations(q, page, count) {
        return this.httpRequest.request({
          method: "GET",
          url: "/workflow-automation",
          query: {
            "q": q,
            "page": page,
            "count": count
          }
        });
      }
      /**
       * Get workflow automation by id
       * @param id
       * @returns WorkflowAutomationResponse
       * @throws ApiError
       */
      getWorkflowAutomation(id) {
        return this.httpRequest.request({
          method: "GET",
          url: "/workflow-automation/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Update workflow automation
       * @param id
       * @param requestBody
       * @returns WorkflowAutomationResponse
       * @throws ApiError
       */
      updateWorkflowAutomation(id, requestBody) {
        return this.httpRequest.request({
          method: "PUT",
          url: "/workflow-automation/{id}",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Delete workflow automation
       * @param id
       * @returns any Successful response
       * @throws ApiError
       */
      deleteWorkflowAutomation(id) {
        return this.httpRequest.request({
          method: "DELETE",
          url: "/workflow-automation/{id}",
          path: {
            "id": id
          }
        });
      }
      /**
       * Duplicate workflow automation
       * @param id
       * @param requestBody
       * @returns WorkflowAutomationResponse
       * @throws ApiError
       */
      duplicateWorkflowAutomation(id, requestBody) {
        return this.httpRequest.request({
          method: "POST",
          url: "/workflow-automation/{id}/duplicate",
          path: {
            "id": id
          },
          body: requestBody,
          mediaType: "application/json"
        });
      }
      /**
       * Get workflow automation trigger fields mapping
       * @returns FieldsMappingResponse
       * @throws ApiError
       */
      getTriggerFieldsMapping() {
        return this.httpRequest.request({
          method: "GET",
          url: "/workflow-automation/mapping/trigger"
        });
      }
      /**
       * Get workflow automation condition fields mapping
       * @returns FieldsMappingResponse
       * @throws ApiError
       */
      getConditionFieldsMapping() {
        return this.httpRequest.request({
          method: "GET",
          url: "/workflow-automation/mapping/condition"
        });
      }
    };
    exports2.WorkflowAutomationService = WorkflowAutomationService;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/Sponsorships.js
var require_Sponsorships = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/Sponsorships.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Sponsorships = void 0;
    var AxiosHttpRequest_1 = require_AxiosHttpRequest2();
    var AccountsService_1 = require_AccountsService();
    var ActionsService_1 = require_ActionsService();
    var AdvertisersService_1 = require_AdvertisersService();
    var AdvertisersBrandSafetyService_1 = require_AdvertisersBrandSafetyService();
    var AdvertisersRegionService_1 = require_AdvertisersRegionService();
    var AgenciesService_1 = require_AgenciesService2();
    var AttributionService_1 = require_AttributionService();
    var Au10TixService_1 = require_Au10TixService();
    var AuditLogService_1 = require_AuditLogService();
    var AuthService_1 = require_AuthService();
    var BulkActionsService_1 = require_BulkActionsService();
    var CampaignBudgetsService_1 = require_CampaignBudgetsService();
    var CampaignBudgetsRegionalCpiService_1 = require_CampaignBudgetsRegionalCpiService();
    var CampaignGroupsRelationsService_1 = require_CampaignGroupsRelationsService();
    var CampaignPricingClustersService_1 = require_CampaignPricingClustersService();
    var CampaignsService_1 = require_CampaignsService();
    var CampaignsExperimentsService_1 = require_CampaignsExperimentsService();
    var CampaignsStatsService_1 = require_CampaignsStatsService();
    var ConfigService_1 = require_ConfigService();
    var CreatorsService_1 = require_CreatorsService2();
    var DeliverablesService_1 = require_DeliverablesService();
    var DeliverableTrackingService_1 = require_DeliverableTrackingService();
    var DeploymentsService_1 = require_DeploymentsService();
    var DeploymentsAdvertiserEventsService_1 = require_DeploymentsAdvertiserEventsService();
    var DeploymentsDeliverablesService_1 = require_DeploymentsDeliverablesService();
    var DeploymentsEligibilityService_1 = require_DeploymentsEligibilityService();
    var DeploymentsFraudService_1 = require_DeploymentsFraudService();
    var EarningsService_1 = require_EarningsService();
    var EmailsService_1 = require_EmailsService();
    var ExperimentsService_1 = require_ExperimentsService();
    var ExternalEventsService_1 = require_ExternalEventsService();
    var FeaturesSettingsService_1 = require_FeaturesSettingsService();
    var FileProcessService_1 = require_FileProcessService();
    var FraudService_1 = require_FraudService();
    var GiftCardsService_1 = require_GiftCardsService();
    var GroupsService_1 = require_GroupsService();
    var GroupsEligibilityService_1 = require_GroupsEligibilityService();
    var GroupsManualEligibilityService_1 = require_GroupsManualEligibilityService();
    var HealthService_1 = require_HealthService2();
    var HellofreshService_1 = require_HellofreshService();
    var I18NService_1 = require_I18NService();
    var IncidentsService_1 = require_IncidentsService();
    var InfinityService_1 = require_InfinityService();
    var InternalService_1 = require_InternalService();
    var InternalOutreachService_1 = require_InternalOutreachService();
    var KycService_1 = require_KycService();
    var LiveStreamsService_1 = require_LiveStreamsService();
    var ManagersService_1 = require_ManagersService2();
    var ManualFlowService_1 = require_ManualFlowService();
    var MissingEventsService_1 = require_MissingEventsService();
    var NoteCommentsService_1 = require_NoteCommentsService();
    var NotesService_1 = require_NotesService2();
    var OutreachService_1 = require_OutreachService();
    var OutreachInfoService_1 = require_OutreachInfoService();
    var OverviewService_1 = require_OverviewService();
    var PredictionsService_1 = require_PredictionsService();
    var PromoCodeListsService_1 = require_PromoCodeListsService();
    var PromoCodesService_1 = require_PromoCodesService();
    var SearchService_1 = require_SearchService();
    var SendGridService_1 = require_SendGridService();
    var ShareService_1 = require_ShareService();
    var SpendReportsService_1 = require_SpendReportsService();
    var SponsorshipsService_1 = require_SponsorshipsService();
    var SponsorshipsPreviewService_1 = require_SponsorshipsPreviewService();
    var StatsService_1 = require_StatsService();
    var TikTokAdvertiserService_1 = require_TikTokAdvertiserService();
    var TimelineService_1 = require_TimelineService();
    var TwitchService_1 = require_TwitchService();
    var TypesService_1 = require_TypesService();
    var ViewerService_1 = require_ViewerService();
    var WorkflowAutomationService_1 = require_WorkflowAutomationService();
    var Sponsorships2 = class {
      constructor(config, HttpRequest = AxiosHttpRequest_1.AxiosHttpRequest) {
        this.request = new HttpRequest({
          BASE: config?.BASE ?? "",
          VERSION: config?.VERSION ?? "1.0.0",
          WITH_CREDENTIALS: config?.WITH_CREDENTIALS ?? false,
          CREDENTIALS: config?.CREDENTIALS ?? "include",
          TOKEN: config?.TOKEN,
          USERNAME: config?.USERNAME,
          PASSWORD: config?.PASSWORD,
          HEADERS: config?.HEADERS,
          ENCODE_PATH: config?.ENCODE_PATH
        });
        this.accounts = new AccountsService_1.AccountsService(this.request);
        this.actions = new ActionsService_1.ActionsService(this.request);
        this.advertisers = new AdvertisersService_1.AdvertisersService(this.request);
        this.advertisersBrandSafety = new AdvertisersBrandSafetyService_1.AdvertisersBrandSafetyService(this.request);
        this.advertisersRegion = new AdvertisersRegionService_1.AdvertisersRegionService(this.request);
        this.agencies = new AgenciesService_1.AgenciesService(this.request);
        this.attribution = new AttributionService_1.AttributionService(this.request);
        this.au10Tix = new Au10TixService_1.Au10TixService(this.request);
        this.auditLog = new AuditLogService_1.AuditLogService(this.request);
        this.auth = new AuthService_1.AuthService(this.request);
        this.bulkActions = new BulkActionsService_1.BulkActionsService(this.request);
        this.campaignBudgets = new CampaignBudgetsService_1.CampaignBudgetsService(this.request);
        this.campaignBudgetsRegionalCpi = new CampaignBudgetsRegionalCpiService_1.CampaignBudgetsRegionalCpiService(this.request);
        this.campaignGroupsRelations = new CampaignGroupsRelationsService_1.CampaignGroupsRelationsService(this.request);
        this.campaignPricingClusters = new CampaignPricingClustersService_1.CampaignPricingClustersService(this.request);
        this.campaigns = new CampaignsService_1.CampaignsService(this.request);
        this.campaignsExperiments = new CampaignsExperimentsService_1.CampaignsExperimentsService(this.request);
        this.campaignsStats = new CampaignsStatsService_1.CampaignsStatsService(this.request);
        this.config = new ConfigService_1.ConfigService(this.request);
        this.creators = new CreatorsService_1.CreatorsService(this.request);
        this.deliverables = new DeliverablesService_1.DeliverablesService(this.request);
        this.deliverableTracking = new DeliverableTrackingService_1.DeliverableTrackingService(this.request);
        this.deployments = new DeploymentsService_1.DeploymentsService(this.request);
        this.deploymentsAdvertiserEvents = new DeploymentsAdvertiserEventsService_1.DeploymentsAdvertiserEventsService(this.request);
        this.deploymentsDeliverables = new DeploymentsDeliverablesService_1.DeploymentsDeliverablesService(this.request);
        this.deploymentsEligibility = new DeploymentsEligibilityService_1.DeploymentsEligibilityService(this.request);
        this.deploymentsFraud = new DeploymentsFraudService_1.DeploymentsFraudService(this.request);
        this.earnings = new EarningsService_1.EarningsService(this.request);
        this.emails = new EmailsService_1.EmailsService(this.request);
        this.experiments = new ExperimentsService_1.ExperimentsService(this.request);
        this.externalEvents = new ExternalEventsService_1.ExternalEventsService(this.request);
        this.featuresSettings = new FeaturesSettingsService_1.FeaturesSettingsService(this.request);
        this.fileProcess = new FileProcessService_1.FileProcessService(this.request);
        this.fraud = new FraudService_1.FraudService(this.request);
        this.giftCards = new GiftCardsService_1.GiftCardsService(this.request);
        this.groups = new GroupsService_1.GroupsService(this.request);
        this.groupsEligibility = new GroupsEligibilityService_1.GroupsEligibilityService(this.request);
        this.groupsManualEligibility = new GroupsManualEligibilityService_1.GroupsManualEligibilityService(this.request);
        this.health = new HealthService_1.HealthService(this.request);
        this.hellofresh = new HellofreshService_1.HellofreshService(this.request);
        this.i18N = new I18NService_1.I18NService(this.request);
        this.incidents = new IncidentsService_1.IncidentsService(this.request);
        this.infinity = new InfinityService_1.InfinityService(this.request);
        this.internal = new InternalService_1.InternalService(this.request);
        this.internalOutreach = new InternalOutreachService_1.InternalOutreachService(this.request);
        this.kyc = new KycService_1.KycService(this.request);
        this.liveStreams = new LiveStreamsService_1.LiveStreamsService(this.request);
        this.managers = new ManagersService_1.ManagersService(this.request);
        this.manualFlow = new ManualFlowService_1.ManualFlowService(this.request);
        this.missingEvents = new MissingEventsService_1.MissingEventsService(this.request);
        this.noteComments = new NoteCommentsService_1.NoteCommentsService(this.request);
        this.notes = new NotesService_1.NotesService(this.request);
        this.outreach = new OutreachService_1.OutreachService(this.request);
        this.outreachInfo = new OutreachInfoService_1.OutreachInfoService(this.request);
        this.overview = new OverviewService_1.OverviewService(this.request);
        this.predictions = new PredictionsService_1.PredictionsService(this.request);
        this.promoCodeLists = new PromoCodeListsService_1.PromoCodeListsService(this.request);
        this.promoCodes = new PromoCodesService_1.PromoCodesService(this.request);
        this.search = new SearchService_1.SearchService(this.request);
        this.sendGrid = new SendGridService_1.SendGridService(this.request);
        this.share = new ShareService_1.ShareService(this.request);
        this.spendReports = new SpendReportsService_1.SpendReportsService(this.request);
        this.sponsorships = new SponsorshipsService_1.SponsorshipsService(this.request);
        this.sponsorshipsPreview = new SponsorshipsPreviewService_1.SponsorshipsPreviewService(this.request);
        this.stats = new StatsService_1.StatsService(this.request);
        this.tikTokAdvertiser = new TikTokAdvertiserService_1.TikTokAdvertiserService(this.request);
        this.timeline = new TimelineService_1.TimelineService(this.request);
        this.twitch = new TwitchService_1.TwitchService(this.request);
        this.types = new TypesService_1.TypesService(this.request);
        this.viewer = new ViewerService_1.ViewerService(this.request);
        this.workflowAutomation = new WorkflowAutomationService_1.WorkflowAutomationService(this.request);
      }
    };
    exports2.Sponsorships = Sponsorships2;
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/core/OpenAPI.js
var require_OpenAPI2 = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/core/OpenAPI.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.OpenAPI = void 0;
    exports2.OpenAPI = {
      BASE: "",
      VERSION: "1.0.0",
      WITH_CREDENTIALS: false,
      CREDENTIALS: "include",
      TOKEN: void 0,
      USERNAME: void 0,
      PASSWORD: void 0,
      HEADERS: void 0,
      ENCODE_PATH: void 0
    };
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/AccountResponse.js
var require_AccountResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/AccountResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AccountResponse = void 0;
    var AccountResponse;
    (function(AccountResponse2) {
      let billingEntity;
      (function(billingEntity2) {
        billingEntity2["STREAM_ELEMENTS"] = "StreamElements";
        billingEntity2["LIVE_MOMENTUM"] = "LiveMomentum";
      })(billingEntity = AccountResponse2.billingEntity || (AccountResponse2.billingEntity = {}));
    })(AccountResponse = exports2.AccountResponse || (exports2.AccountResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/AddGroupDeliverableBody.js
var require_AddGroupDeliverableBody = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/AddGroupDeliverableBody.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AddGroupDeliverableBody = void 0;
    var AddGroupDeliverableBody;
    (function(AddGroupDeliverableBody2) {
      let type;
      (function(type2) {
        type2["BOT_COMMAND"] = "botCommand";
        type2["BRIEF"] = "brief";
        type2["CONTRACT"] = "contract";
        type2["CREATOR_PAY_PER_EVENT"] = "creatorPayPerEvent";
        type2["LIVE_STREAM"] = "liveStream";
        type2["OVERLAY"] = "overlay";
        type2["PANEL_BANNER"] = "panelBanner";
        type2["PAY_PER_EVENT"] = "payPerEvent";
        type2["PAY_PER_EVENT_BRACKET"] = "payPerEventBracket";
        type2["PAY_PER_EVENT_COUNTRIES"] = "PayPerEventCountries";
        type2["CUSTOM"] = "custom";
        type2["DYNAMIC_DESCRIPTION_WIDGET"] = "dynamicDescriptionWidget";
        type2["TIK_TOK_CREATIVE"] = "tikTokCreative";
        type2["YOU_TUBE_VIDEO"] = "youTubeVideo";
        type2["MARKDOWN_BRIEF"] = "markdownBrief";
        type2["SUB_PER_EVENT"] = "subPerEvent";
      })(type = AddGroupDeliverableBody2.type || (AddGroupDeliverableBody2.type = {}));
      let prerequisitesOperator;
      (function(prerequisitesOperator2) {
        prerequisitesOperator2["ALL"] = "all";
        prerequisitesOperator2["ANY"] = "any";
      })(prerequisitesOperator = AddGroupDeliverableBody2.prerequisitesOperator || (AddGroupDeliverableBody2.prerequisitesOperator = {}));
    })(AddGroupDeliverableBody = exports2.AddGroupDeliverableBody || (exports2.AddGroupDeliverableBody = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/AdvertiserResponse.js
var require_AdvertiserResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/AdvertiserResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AdvertiserResponse = void 0;
    var AdvertiserResponse;
    (function(AdvertiserResponse2) {
      let paymentEligibility;
      (function(paymentEligibility2) {
        paymentEligibility2["AUTOMATIC"] = "automatic";
        paymentEligibility2["MANUAL"] = "manual";
      })(paymentEligibility = AdvertiserResponse2.paymentEligibility || (AdvertiserResponse2.paymentEligibility = {}));
      let revenueMode;
      (function(revenueMode2) {
        revenueMode2["MARGIN"] = "margin";
        revenueMode2["PER_EVENT"] = "perEvent";
        revenueMode2["PER_EVENT_COUNTRY"] = "perEventCountry";
        revenueMode2["PER_EVENT_COUNTRY_CREATOR"] = "perEventCountryCreator";
        revenueMode2["MARGIN_PER_EVENT"] = "marginPerEvent";
        revenueMode2["ROAS"] = "roas";
        revenueMode2["ROAS_D7"] = "roasD7";
        revenueMode2["ROAS_D30"] = "roasD30";
      })(revenueMode = AdvertiserResponse2.revenueMode || (AdvertiserResponse2.revenueMode = {}));
    })(AdvertiserResponse = exports2.AdvertiserResponse || (exports2.AdvertiserResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/AgencyCreatorResponse.js
var require_AgencyCreatorResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/AgencyCreatorResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AgencyCreatorResponse = void 0;
    var AgencyCreatorResponse;
    (function(AgencyCreatorResponse2) {
      let status;
      (function(status2) {
        status2["ACTIVE"] = "active";
        status2["DEPARTED"] = "departed";
      })(status = AgencyCreatorResponse2.status || (AgencyCreatorResponse2.status = {}));
    })(AgencyCreatorResponse = exports2.AgencyCreatorResponse || (exports2.AgencyCreatorResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/AgencyEmailPreferences.js
var require_AgencyEmailPreferences = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/AgencyEmailPreferences.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AgencyEmailPreferences = void 0;
    var AgencyEmailPreferences;
    (function(AgencyEmailPreferences2) {
      let digestFrequency;
      (function(digestFrequency2) {
        digestFrequency2["DAILY"] = "daily";
        digestFrequency2["WEEKLY"] = "weekly";
      })(digestFrequency = AgencyEmailPreferences2.digestFrequency || (AgencyEmailPreferences2.digestFrequency = {}));
    })(AgencyEmailPreferences = exports2.AgencyEmailPreferences || (exports2.AgencyEmailPreferences = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/AgencyQueryParams.js
var require_AgencyQueryParams = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/AgencyQueryParams.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AgencyQueryParams = void 0;
    var AgencyQueryParams;
    (function(AgencyQueryParams2) {
      let platform;
      (function(platform2) {
        platform2["TWITCH"] = "twitch";
        platform2["YOUTUBE"] = "youtube";
        platform2["TIKTOK"] = "tiktok";
      })(platform = AgencyQueryParams2.platform || (AgencyQueryParams2.platform = {}));
    })(AgencyQueryParams = exports2.AgencyQueryParams || (exports2.AgencyQueryParams = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/AgencySponsorshipsFilter.js
var require_AgencySponsorshipsFilter = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/AgencySponsorshipsFilter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AgencySponsorshipsFilter = void 0;
    var AgencySponsorshipsFilter;
    (function(AgencySponsorshipsFilter2) {
      let platform;
      (function(platform2) {
        platform2["TWITCH"] = "twitch";
        platform2["YOUTUBE"] = "youtube";
        platform2["TIKTOK"] = "tiktok";
      })(platform = AgencySponsorshipsFilter2.platform || (AgencySponsorshipsFilter2.platform = {}));
    })(AgencySponsorshipsFilter = exports2.AgencySponsorshipsFilter || (exports2.AgencySponsorshipsFilter = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/AuditLogResponse.js
var require_AuditLogResponse2 = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/AuditLogResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AuditLogResponse = void 0;
    var AuditLogResponse;
    (function(AuditLogResponse2) {
      let type;
      (function(type2) {
        type2["AUTO"] = "Auto";
        type2["MANUAL"] = "Manual";
        type2["CUSTOM"] = "Custom";
        type2["COMMENT"] = "Comment";
        type2["NOTE"] = "Note";
        type2["NOTE_COMMENT"] = "NoteComment";
        type2["DEPLOYMENT_STATE_CHANGED"] = "DeploymentStateChanged";
        type2["DEPLOYMENT_CONFIGURATION_CHANGED"] = "DeploymentConfigurationChanged";
        type2["DEPLOYMENT_DELIVERABLE_CONFIGURATION_CHANGED"] = "DeploymentDeliverableConfigurationChanged";
        type2["DEPLOYMENT_DELIVERABLE_CHANGED"] = "DeploymentDeliverableChanged";
        type2["DEPLOYMENT_OUTREACH"] = "DeploymentOutreach";
      })(type = AuditLogResponse2.type || (AuditLogResponse2.type = {}));
    })(AuditLogResponse = exports2.AuditLogResponse || (exports2.AuditLogResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/BlockingReason.js
var require_BlockingReason = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/BlockingReason.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BlockingReason = void 0;
    var BlockingReason;
    (function(BlockingReason2) {
      let type;
      (function(type2) {
        type2["NO_MORE_SEATS"] = "no-more-seats";
        type2["ALREADY_RUNNING_CAMPAIGN"] = "already-running-campaign";
        type2["DAYS_TO_DELAY_NOT_ELAPSED"] = "days-to-delay-not-elapsed";
        type2["MANUAL_PAYMENT_REVIEW_PENDING"] = "manual-payment-review-pending";
        type2["ADJUSTMENTS_NOT_APPROVED"] = "adjustments-not-approved";
        type2["NO_AVAILABLE_CODES"] = "no-available-codes";
        type2["CONTRACT_NOT_SIGNED"] = "contract-not-signed";
        type2["FRAUD"] = "fraud";
        type2["OFFER_EXPIRED"] = "offer-expired";
        type2["TOUCH_BASE_PENDING"] = "touch-base-pending";
      })(type = BlockingReason2.type || (BlockingReason2.type = {}));
    })(BlockingReason = exports2.BlockingReason || (exports2.BlockingReason = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/BulkActionEntryResponse.js
var require_BulkActionEntryResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/BulkActionEntryResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BulkActionEntryResponse = void 0;
    var BulkActionEntryResponse;
    (function(BulkActionEntryResponse2) {
      let status;
      (function(status2) {
        status2["PENDING"] = "pending";
        status2["COMPLETED"] = "completed";
      })(status = BulkActionEntryResponse2.status || (BulkActionEntryResponse2.status = {}));
    })(BulkActionEntryResponse = exports2.BulkActionEntryResponse || (exports2.BulkActionEntryResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/BulkActionResponse.js
var require_BulkActionResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/BulkActionResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BulkActionResponse = void 0;
    var BulkActionResponse;
    (function(BulkActionResponse2) {
      let type;
      (function(type2) {
        type2["REJECT_DEPLOYMENTS"] = "reject_deployments";
        type2["OUTREACH_DEPLOYMENTS"] = "outreach_deployments";
        type2["REMOVE_DEPLOYMENTS"] = "remove_deployments";
        type2["UPDATE_DEPLOYMENTS"] = "update_deployments";
        type2["SET_DEPLOYMENTS_CHARGED_FLAG"] = "set_deployments_charged_flag";
        type2["SET_CLIENT_NOT_CHARGED_FLAG"] = "set_client_not_charged_flag";
        type2["EXPORT"] = "export";
        type2["EXPORT_ELIGIBLE_CREATORS"] = "export_eligible_creators";
        type2["EXPORT_CURATED_CREATORS"] = "export_curated_creators";
        type2["EXPORT_CREATORS"] = "export_creators";
        type2["EXPORT_AGENCIES"] = "export_agencies";
        type2["EXPORT_NON_BRAND_SAFE_CREATORS"] = "export_non_brand_safe_creators";
        type2["EXPORT_CAMPAIGN_REVENUES"] = "export_campaign_revenues";
        type2["EXPORT_CAMPAIGN_REVENUES_DAILY"] = "export_campaign_revenues_daily";
        type2["EXPORT_CAMPAIGN_GROUP_REVENUES"] = "export_campaign_group_revenues";
        type2["EXPORT_CAMPAIGN_GROUP_REVENUES_DAILY"] = "export_campaign_group_revenues_daily";
        type2["EXPORT_DEPLOYMENT_REVENUES"] = "export_deployment_revenues";
        type2["EXPORT_DEPLOYMENT_REVENUES_DAILY"] = "export_deployment_revenues_daily";
        type2["TRIGGER_MIXMAX_SEQUENCE"] = "trigger_mixmax_sequence";
        type2["SEND_EMAIL_SENDGRID"] = "send_email_sendgrid";
        type2["RESUME_DEPLOYMENT"] = "resume_deployment";
        type2["UPDATE_DEPLOYMENTS_ABUSE"] = "update_deployments_abuse";
        type2["SEND_ELIGIBILITY_GROUP_EMAILS"] = "send_eligibility_group_emails";
        type2["REGENERATE_ATTRIBUTION_LINK"] = "regenerate_attribution_link";
        type2["OUTREACH_CREATORS"] = "outreach_creators";
        type2["ADD_DELIVERABLE_TO_DEPLOYMENTS"] = "add_deliverable_to_deployments";
        type2["GENERATE_SPEND_REPORT_DAILY"] = "generate_spend_report_daily";
        type2["GENERATE_SPEND_REPORT_WEEKLY"] = "generate_spend_report_weekly";
        type2["GENERATE_SPEND_REPORT_DEPLOYMENT"] = "generate_spend_report_deployment";
        type2["GENERATE_SPEND_REPORT_CREATOR"] = "generate_spend_report_creator";
        type2["GENERATE_SPEND_REPORT_COUNTRY"] = "generate_spend_report_country";
        type2["GENERATE_SPEND_REPORT_SUMMARY"] = "generate_spend_report_summary";
        type2["GENERATE_SPEND_REPORT_XLSX"] = "generate_spend_report_xlsx";
        type2["EXPORT_GROUP_BASE_PRICING"] = "export_group_base_pricing";
      })(type = BulkActionResponse2.type || (BulkActionResponse2.type = {}));
      let parentType;
      (function(parentType2) {
        parentType2["SYSTEM"] = "system";
        parentType2["GROUP"] = "group";
        parentType2["ADVERTISER"] = "advertiser";
        parentType2["BUDGET"] = "budget";
        parentType2["SPEND_REPORT"] = "spend_report";
      })(parentType = BulkActionResponse2.parentType || (BulkActionResponse2.parentType = {}));
      let entityType;
      (function(entityType2) {
        entityType2["ACCOUNT"] = "account";
        entityType2["ADVERTISER"] = "advertiser";
        entityType2["CAMPAIGN"] = "campaign";
        entityType2["GROUP"] = "group";
        entityType2["DEPLOYMENT"] = "deployment";
        entityType2["VIEWERS_DEPLOYMENT"] = "viewers-deployment";
        entityType2["SPEND_REPORT"] = "spend_report";
        entityType2["VIEWER_PROFILE"] = "viewer-profile";
      })(entityType = BulkActionResponse2.entityType || (BulkActionResponse2.entityType = {}));
    })(BulkActionResponse = exports2.BulkActionResponse || (exports2.BulkActionResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/BulkActionSearchPayload.js
var require_BulkActionSearchPayload = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/BulkActionSearchPayload.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BulkActionSearchPayload = void 0;
    var BulkActionSearchPayload;
    (function(BulkActionSearchPayload2) {
      let parentType;
      (function(parentType2) {
        parentType2["SYSTEM"] = "system";
        parentType2["GROUP"] = "group";
        parentType2["ADVERTISER"] = "advertiser";
        parentType2["BUDGET"] = "budget";
        parentType2["SPEND_REPORT"] = "spend_report";
      })(parentType = BulkActionSearchPayload2.parentType || (BulkActionSearchPayload2.parentType = {}));
      let entityType;
      (function(entityType2) {
        entityType2["ACCOUNT"] = "account";
        entityType2["ADVERTISER"] = "advertiser";
        entityType2["CAMPAIGN"] = "campaign";
        entityType2["GROUP"] = "group";
        entityType2["DEPLOYMENT"] = "deployment";
        entityType2["VIEWERS_DEPLOYMENT"] = "viewers-deployment";
        entityType2["SPEND_REPORT"] = "spend_report";
        entityType2["VIEWER_PROFILE"] = "viewer-profile";
      })(entityType = BulkActionSearchPayload2.entityType || (BulkActionSearchPayload2.entityType = {}));
    })(BulkActionSearchPayload = exports2.BulkActionSearchPayload || (exports2.BulkActionSearchPayload = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/BulkUpdateDeploymentsAbuseData.js
var require_BulkUpdateDeploymentsAbuseData = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/BulkUpdateDeploymentsAbuseData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BulkUpdateDeploymentsAbuseData = void 0;
    var BulkUpdateDeploymentsAbuseData;
    (function(BulkUpdateDeploymentsAbuseData2) {
      let investigationState;
      (function(investigationState2) {
        investigationState2["PENDING"] = "pending";
        investigationState2["UNDER_INVESTIGATION"] = "under_investigation";
        investigationState2["REVIEWED"] = "reviewed";
        investigationState2["COMPLETED"] = "completed";
      })(investigationState = BulkUpdateDeploymentsAbuseData2.investigationState || (BulkUpdateDeploymentsAbuseData2.investigationState = {}));
      let recommendation;
      (function(recommendation2) {
        recommendation2["FRAUD"] = "fraud";
        recommendation2["LEGIT"] = "legit";
      })(recommendation = BulkUpdateDeploymentsAbuseData2.recommendation || (BulkUpdateDeploymentsAbuseData2.recommendation = {}));
      let conclusion;
      (function(conclusion2) {
        conclusion2["FRAUD"] = "fraud";
        conclusion2["LEGIT"] = "legit";
      })(conclusion = BulkUpdateDeploymentsAbuseData2.conclusion || (BulkUpdateDeploymentsAbuseData2.conclusion = {}));
    })(BulkUpdateDeploymentsAbuseData = exports2.BulkUpdateDeploymentsAbuseData || (exports2.BulkUpdateDeploymentsAbuseData = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/BulkUpdateDeploymentsData.js
var require_BulkUpdateDeploymentsData = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/BulkUpdateDeploymentsData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BulkUpdateDeploymentsData = void 0;
    var BulkUpdateDeploymentsData;
    (function(BulkUpdateDeploymentsData2) {
      let outreachMethod;
      (function(outreachMethod2) {
        outreachMethod2["MANUAL"] = "manual";
        outreachMethod2["AUTOMATIC"] = "automatic";
      })(outreachMethod = BulkUpdateDeploymentsData2.outreachMethod || (BulkUpdateDeploymentsData2.outreachMethod = {}));
      let outreachTarget;
      (function(outreachTarget2) {
        outreachTarget2["DIRECT"] = "direct";
        outreachTarget2["AGENCY"] = "agency";
      })(outreachTarget = BulkUpdateDeploymentsData2.outreachTarget || (BulkUpdateDeploymentsData2.outreachTarget = {}));
      let paymentEligibility;
      (function(paymentEligibility2) {
        paymentEligibility2["AUTOMATIC"] = "automatic";
        paymentEligibility2["MANUAL"] = "manual";
      })(paymentEligibility = BulkUpdateDeploymentsData2.paymentEligibility || (BulkUpdateDeploymentsData2.paymentEligibility = {}));
      let manualPaymentReviewStatus;
      (function(manualPaymentReviewStatus2) {
        manualPaymentReviewStatus2["NONE"] = "none";
        manualPaymentReviewStatus2["PENDING"] = "pending";
        manualPaymentReviewStatus2["IN_PROGRESS"] = "in_progress";
        manualPaymentReviewStatus2["COMPLETED"] = "completed";
      })(manualPaymentReviewStatus = BulkUpdateDeploymentsData2.manualPaymentReviewStatus || (BulkUpdateDeploymentsData2.manualPaymentReviewStatus = {}));
      let payoutDestination;
      (function(payoutDestination2) {
        payoutDestination2["DIRECT"] = "direct";
        payoutDestination2["AGENCY"] = "agency";
      })(payoutDestination = BulkUpdateDeploymentsData2.payoutDestination || (BulkUpdateDeploymentsData2.payoutDestination = {}));
    })(BulkUpdateDeploymentsData = exports2.BulkUpdateDeploymentsData || (exports2.BulkUpdateDeploymentsData = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/CampaignBudgetGoal.js
var require_CampaignBudgetGoal = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/CampaignBudgetGoal.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CampaignBudgetGoal = void 0;
    var CampaignBudgetGoal;
    (function(CampaignBudgetGoal2) {
      let type;
      (function(type2) {
        type2["CPI"] = "cpi";
        type2["ROAS_D3"] = "roasD3";
        type2["ROAS_D7"] = "roasD7";
        type2["ROAS_D30"] = "roasD30";
        type2["RETENTION_D2"] = "retentionD2";
        type2["RETENTION_D7"] = "retentionD7";
        type2["RETENTION_D30"] = "retentionD30";
        type2["UNIQUE_LINK_CLICKS"] = "uniqueLinkClicks";
      })(type = CampaignBudgetGoal2.type || (CampaignBudgetGoal2.type = {}));
    })(CampaignBudgetGoal = exports2.CampaignBudgetGoal || (exports2.CampaignBudgetGoal = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/CampaignBudgetOverviewResponse.js
var require_CampaignBudgetOverviewResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/CampaignBudgetOverviewResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CampaignBudgetOverviewResponse = void 0;
    var CampaignBudgetOverviewResponse;
    (function(CampaignBudgetOverviewResponse2) {
      let state;
      (function(state2) {
        state2["READY"] = "ready";
        state2["RUNNING"] = "running";
        state2["AWAITING_FINALIZATION"] = "awaitingFinalization";
        state2["FINALIZED"] = "finalized";
        state2["BILLED"] = "billed";
      })(state = CampaignBudgetOverviewResponse2.state || (CampaignBudgetOverviewResponse2.state = {}));
      let revenueMode;
      (function(revenueMode2) {
        revenueMode2["MARGIN"] = "margin";
        revenueMode2["PER_EVENT"] = "perEvent";
        revenueMode2["PER_EVENT_COUNTRY"] = "perEventCountry";
        revenueMode2["PER_EVENT_COUNTRY_CREATOR"] = "perEventCountryCreator";
        revenueMode2["MARGIN_PER_EVENT"] = "marginPerEvent";
        revenueMode2["ROAS"] = "roas";
        revenueMode2["ROAS_D7"] = "roasD7";
        revenueMode2["ROAS_D30"] = "roasD30";
      })(revenueMode = CampaignBudgetOverviewResponse2.revenueMode || (CampaignBudgetOverviewResponse2.revenueMode = {}));
    })(CampaignBudgetOverviewResponse = exports2.CampaignBudgetOverviewResponse || (exports2.CampaignBudgetOverviewResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/CampaignBudgetParam.js
var require_CampaignBudgetParam = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/CampaignBudgetParam.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CampaignBudgetParam = void 0;
    var CampaignBudgetParam;
    (function(CampaignBudgetParam2) {
      let revenueMode;
      (function(revenueMode2) {
        revenueMode2["MARGIN"] = "margin";
        revenueMode2["PER_EVENT"] = "perEvent";
        revenueMode2["PER_EVENT_COUNTRY"] = "perEventCountry";
        revenueMode2["PER_EVENT_COUNTRY_CREATOR"] = "perEventCountryCreator";
        revenueMode2["MARGIN_PER_EVENT"] = "marginPerEvent";
        revenueMode2["ROAS"] = "roas";
        revenueMode2["ROAS_D7"] = "roasD7";
        revenueMode2["ROAS_D30"] = "roasD30";
      })(revenueMode = CampaignBudgetParam2.revenueMode || (CampaignBudgetParam2.revenueMode = {}));
    })(CampaignBudgetParam = exports2.CampaignBudgetParam || (exports2.CampaignBudgetParam = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/CampaignBudgetResponse.js
var require_CampaignBudgetResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/CampaignBudgetResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CampaignBudgetResponse = void 0;
    var CampaignBudgetResponse;
    (function(CampaignBudgetResponse2) {
      let state;
      (function(state2) {
        state2["READY"] = "ready";
        state2["RUNNING"] = "running";
        state2["AWAITING_FINALIZATION"] = "awaitingFinalization";
        state2["FINALIZED"] = "finalized";
        state2["BILLED"] = "billed";
      })(state = CampaignBudgetResponse2.state || (CampaignBudgetResponse2.state = {}));
      let revenueMode;
      (function(revenueMode2) {
        revenueMode2["MARGIN"] = "margin";
        revenueMode2["PER_EVENT"] = "perEvent";
        revenueMode2["PER_EVENT_COUNTRY"] = "perEventCountry";
        revenueMode2["PER_EVENT_COUNTRY_CREATOR"] = "perEventCountryCreator";
        revenueMode2["MARGIN_PER_EVENT"] = "marginPerEvent";
        revenueMode2["ROAS"] = "roas";
        revenueMode2["ROAS_D7"] = "roasD7";
        revenueMode2["ROAS_D30"] = "roasD30";
      })(revenueMode = CampaignBudgetResponse2.revenueMode || (CampaignBudgetResponse2.revenueMode = {}));
    })(CampaignBudgetResponse = exports2.CampaignBudgetResponse || (exports2.CampaignBudgetResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/CampaignDeliverableParam.js
var require_CampaignDeliverableParam = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/CampaignDeliverableParam.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CampaignDeliverableParam = void 0;
    var CampaignDeliverableParam;
    (function(CampaignDeliverableParam2) {
      let type;
      (function(type2) {
        type2["BOT_COMMAND"] = "botCommand";
        type2["BRIEF"] = "brief";
        type2["CONTRACT"] = "contract";
        type2["CREATOR_PAY_PER_EVENT"] = "creatorPayPerEvent";
        type2["LIVE_STREAM"] = "liveStream";
        type2["OVERLAY"] = "overlay";
        type2["PANEL_BANNER"] = "panelBanner";
        type2["PAY_PER_EVENT"] = "payPerEvent";
        type2["PAY_PER_EVENT_BRACKET"] = "payPerEventBracket";
        type2["PAY_PER_EVENT_COUNTRIES"] = "PayPerEventCountries";
        type2["CUSTOM"] = "custom";
        type2["DYNAMIC_DESCRIPTION_WIDGET"] = "dynamicDescriptionWidget";
        type2["TIK_TOK_CREATIVE"] = "tikTokCreative";
        type2["YOU_TUBE_VIDEO"] = "youTubeVideo";
        type2["MARKDOWN_BRIEF"] = "markdownBrief";
        type2["SUB_PER_EVENT"] = "subPerEvent";
      })(type = CampaignDeliverableParam2.type || (CampaignDeliverableParam2.type = {}));
      let prerequisitesOperator;
      (function(prerequisitesOperator2) {
        prerequisitesOperator2["ALL"] = "all";
        prerequisitesOperator2["ANY"] = "any";
      })(prerequisitesOperator = CampaignDeliverableParam2.prerequisitesOperator || (CampaignDeliverableParam2.prerequisitesOperator = {}));
    })(CampaignDeliverableParam = exports2.CampaignDeliverableParam || (exports2.CampaignDeliverableParam = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/CampaignGroupEligibilityResponse.js
var require_CampaignGroupEligibilityResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/CampaignGroupEligibilityResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CampaignGroupEligibilityResponse = void 0;
    var CampaignGroupEligibilityResponse;
    (function(CampaignGroupEligibilityResponse2) {
      let abFlagsOperatorType;
      (function(abFlagsOperatorType2) {
        abFlagsOperatorType2["ANY"] = "any";
        abFlagsOperatorType2["ALL"] = "all";
      })(abFlagsOperatorType = CampaignGroupEligibilityResponse2.abFlagsOperatorType || (CampaignGroupEligibilityResponse2.abFlagsOperatorType = {}));
      let abFlagsToExcludeOperatorType;
      (function(abFlagsToExcludeOperatorType2) {
        abFlagsToExcludeOperatorType2["ANY"] = "any";
        abFlagsToExcludeOperatorType2["ALL"] = "all";
      })(abFlagsToExcludeOperatorType = CampaignGroupEligibilityResponse2.abFlagsToExcludeOperatorType || (CampaignGroupEligibilityResponse2.abFlagsToExcludeOperatorType = {}));
      let channelLabelsOperatorType;
      (function(channelLabelsOperatorType2) {
        channelLabelsOperatorType2["ANY"] = "any";
        channelLabelsOperatorType2["ALL"] = "all";
      })(channelLabelsOperatorType = CampaignGroupEligibilityResponse2.channelLabelsOperatorType || (CampaignGroupEligibilityResponse2.channelLabelsOperatorType = {}));
      let channelLabelsToExcludeOperatorType;
      (function(channelLabelsToExcludeOperatorType2) {
        channelLabelsToExcludeOperatorType2["ANY"] = "any";
        channelLabelsToExcludeOperatorType2["ALL"] = "all";
      })(channelLabelsToExcludeOperatorType = CampaignGroupEligibilityResponse2.channelLabelsToExcludeOperatorType || (CampaignGroupEligibilityResponse2.channelLabelsToExcludeOperatorType = {}));
    })(CampaignGroupEligibilityResponse = exports2.CampaignGroupEligibilityResponse || (exports2.CampaignGroupEligibilityResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/CampaignGroupRelationResponse.js
var require_CampaignGroupRelationResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/CampaignGroupRelationResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CampaignGroupRelationResponse = void 0;
    var CampaignGroupRelationResponse;
    (function(CampaignGroupRelationResponse2) {
      let relationshipType;
      (function(relationshipType2) {
        relationshipType2["MULTI_SPONS_CHILD"] = "multi_spons_child";
      })(relationshipType = CampaignGroupRelationResponse2.relationshipType || (CampaignGroupRelationResponse2.relationshipType = {}));
    })(CampaignGroupRelationResponse = exports2.CampaignGroupRelationResponse || (exports2.CampaignGroupRelationResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/CampaignGroupResponse.js
var require_CampaignGroupResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/CampaignGroupResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CampaignGroupResponse = void 0;
    var CampaignGroupResponse;
    (function(CampaignGroupResponse2) {
      let status;
      (function(status2) {
        status2["DRAFT"] = "draft";
        status2["ACTIVE"] = "active";
        status2["COMPLETED"] = "completed";
      })(status = CampaignGroupResponse2.status || (CampaignGroupResponse2.status = {}));
      let paymentEligibility;
      (function(paymentEligibility2) {
        paymentEligibility2["AUTOMATIC"] = "automatic";
        paymentEligibility2["MANUAL"] = "manual";
      })(paymentEligibility = CampaignGroupResponse2.paymentEligibility || (CampaignGroupResponse2.paymentEligibility = {}));
    })(CampaignGroupResponse = exports2.CampaignGroupResponse || (exports2.CampaignGroupResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/CampaignResponse.js
var require_CampaignResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/CampaignResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CampaignResponse = void 0;
    var CampaignResponse;
    (function(CampaignResponse2) {
      let status;
      (function(status2) {
        status2["DRAFT"] = "draft";
        status2["ACTIVE"] = "active";
        status2["COMPLETED"] = "completed";
      })(status = CampaignResponse2.status || (CampaignResponse2.status = {}));
      let paymentEligibility;
      (function(paymentEligibility2) {
        paymentEligibility2["AUTOMATIC"] = "automatic";
        paymentEligibility2["MANUAL"] = "manual";
      })(paymentEligibility = CampaignResponse2.paymentEligibility || (CampaignResponse2.paymentEligibility = {}));
      let outreachMethod;
      (function(outreachMethod2) {
        outreachMethod2["MANUAL"] = "manual";
        outreachMethod2["AUTOMATIC"] = "automatic";
      })(outreachMethod = CampaignResponse2.outreachMethod || (CampaignResponse2.outreachMethod = {}));
      let platform;
      (function(platform2) {
        platform2["TWITCH"] = "twitch";
        platform2["YOUTUBE"] = "youtube";
        platform2["TIKTOK"] = "tiktok";
      })(platform = CampaignResponse2.platform || (CampaignResponse2.platform = {}));
    })(CampaignResponse = exports2.CampaignResponse || (exports2.CampaignResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/CampaignSearchResultItem.js
var require_CampaignSearchResultItem = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/CampaignSearchResultItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CampaignSearchResultItem = void 0;
    var CampaignSearchResultItem;
    (function(CampaignSearchResultItem2) {
      let status;
      (function(status2) {
        status2["DRAFT"] = "draft";
        status2["ACTIVE"] = "active";
        status2["COMPLETED"] = "completed";
      })(status = CampaignSearchResultItem2.status || (CampaignSearchResultItem2.status = {}));
    })(CampaignSearchResultItem = exports2.CampaignSearchResultItem || (exports2.CampaignSearchResultItem = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/ContractDeliverableOverride.js
var require_ContractDeliverableOverride = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/ContractDeliverableOverride.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ContractDeliverableOverride = void 0;
    var ContractDeliverableOverride;
    (function(ContractDeliverableOverride2) {
      let contractingMethod;
      (function(contractingMethod2) {
        contractingMethod2["SELF_SERVE"] = "self-serve";
        contractingMethod2["DIRECT"] = "direct";
        contractingMethod2["COMPANY"] = "company";
        contractingMethod2["AGENCY"] = "agency";
        contractingMethod2["CUSTOM"] = "custom";
      })(contractingMethod = ContractDeliverableOverride2.contractingMethod || (ContractDeliverableOverride2.contractingMethod = {}));
      let contractingTarget;
      (function(contractingTarget2) {
        contractingTarget2["DIRECT"] = "direct";
        contractingTarget2["AGENCY"] = "agency";
      })(contractingTarget = ContractDeliverableOverride2.contractingTarget || (ContractDeliverableOverride2.contractingTarget = {}));
    })(ContractDeliverableOverride = exports2.ContractDeliverableOverride || (exports2.ContractDeliverableOverride = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/CreateEmailPayload.js
var require_CreateEmailPayload = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/CreateEmailPayload.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateEmailPayload = void 0;
    var CreateEmailPayload;
    (function(CreateEmailPayload2) {
      let type;
      (function(type2) {
        type2["DIGEST"] = "digest";
        type2["SPECIAL"] = "special";
        type2["NOTIFY_ME"] = "notifyMe";
        type2["REMINDER"] = "reminder";
        type2["OUTREACH"] = "outreach";
        type2["MANUAL_OUTREACH"] = "manualOutreach";
        type2["OTHER"] = "other";
        type2["AGENCY_CREATOR_JOINS"] = "agencyCreatorJoins";
        type2["AGENCY_CREATOR_LEAVES_BY_AGENT"] = "agencyCreatorLeavesByAgent";
        type2["AGENCY_CREATOR_LEAVES_BY_CREATOR"] = "agencyCreatorLeavesByCreator";
        type2["AGENCY_START_DEPLOYMENT"] = "agencyStartDeployment";
        type2["AGENCY_DIGEST"] = "agencyDigest";
        type2["ABUSE"] = "abuse";
        type2["REMINDER_COMPLETE_SETUP"] = "reminderCompleteSetup";
        type2["REMINDER_START_STREAMING"] = "reminderStartStreaming";
        type2["REMINDER_GET_CLICKS"] = "reminderGetClicks";
        type2["REMINDER_GET_ENGAGEMENT"] = "reminderGetEngagement";
        type2["REMINDER_GET_RESULTS"] = "reminderGetResults";
        type2["REMINDER_DONT_FORGET_SETUP"] = "reminderDontForgetSetup";
        type2["REMINDER_GET_EVENTS"] = "reminderGetEvents";
        type2["REMINDER_COMPLETE_SETUP_SEVERE"] = "reminderCompleteSetupSevere";
        type2["REMINDER_START_STREAMING_SEVERE"] = "reminderStartStreamingSevere";
        type2["REMINDER_GET_STARTED"] = "reminderGetStarted";
        type2["NOTIFICATION"] = "notification";
        type2["MARKETING"] = "marketing";
      })(type = CreateEmailPayload2.type || (CreateEmailPayload2.type = {}));
    })(CreateEmailPayload = exports2.CreateEmailPayload || (exports2.CreateEmailPayload = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/CreateGiftCardPayload.js
var require_CreateGiftCardPayload = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/CreateGiftCardPayload.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateGiftCardPayload = void 0;
    var CreateGiftCardPayload;
    (function(CreateGiftCardPayload2) {
      let type;
      (function(type2) {
        type2["TWITCH_FR"] = "twitch_fr";
      })(type = CreateGiftCardPayload2.type || (CreateGiftCardPayload2.type = {}));
    })(CreateGiftCardPayload = exports2.CreateGiftCardPayload || (exports2.CreateGiftCardPayload = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/CreateIncidentPayload.js
var require_CreateIncidentPayload = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/CreateIncidentPayload.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateIncidentPayload = void 0;
    var CreateIncidentPayload;
    (function(CreateIncidentPayload2) {
      let type;
      (function(type2) {
        type2["NO_BUDGET_SETUP"] = "no_budget_setup";
        type2["LOW_DAILY_STARTS"] = "low_daily_starts";
        type2["PREDICTED_REVENUE_LOW"] = "predicted_revenue_low";
        type2["OVERPERFORMANCE"] = "overperformance";
      })(type = CreateIncidentPayload2.type || (CreateIncidentPayload2.type = {}));
      let priority;
      (function(priority2) {
        priority2["CRITICAL"] = "critical";
        priority2["HIGH"] = "high";
        priority2["MEDIUM"] = "medium";
        priority2["LOW"] = "low";
      })(priority = CreateIncidentPayload2.priority || (CreateIncidentPayload2.priority = {}));
    })(CreateIncidentPayload = exports2.CreateIncidentPayload || (exports2.CreateIncidentPayload = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/CreateOutreachEmailPolicyPayload.js
var require_CreateOutreachEmailPolicyPayload = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/CreateOutreachEmailPolicyPayload.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateOutreachEmailPolicyPayload = void 0;
    var CreateOutreachEmailPolicyPayload;
    (function(CreateOutreachEmailPolicyPayload2) {
      let stage;
      (function(stage2) {
        stage2["INITIAL_INVITE"] = "initialInvite";
        stage2["DIDNT_OPEN_OFFER_PAGE"] = "didntOpenOfferPage";
        stage2["OPENED_OFFER_PAGE"] = "openedOfferPage";
        stage2["FINISHED_RUNNING"] = "finishedRunning";
        stage2["RUNNING"] = "running";
      })(stage = CreateOutreachEmailPolicyPayload2.stage || (CreateOutreachEmailPolicyPayload2.stage = {}));
      let emailDeliveryPlatform;
      (function(emailDeliveryPlatform2) {
        emailDeliveryPlatform2["SENDGRID"] = "sendgrid";
        emailDeliveryPlatform2["MIXMAX"] = "mixmax";
      })(emailDeliveryPlatform = CreateOutreachEmailPolicyPayload2.emailDeliveryPlatform || (CreateOutreachEmailPolicyPayload2.emailDeliveryPlatform = {}));
      let recipient;
      (function(recipient2) {
        recipient2["DIRECT"] = "direct";
        recipient2["AGENCY"] = "agency";
      })(recipient = CreateOutreachEmailPolicyPayload2.recipient || (CreateOutreachEmailPolicyPayload2.recipient = {}));
    })(CreateOutreachEmailPolicyPayload = exports2.CreateOutreachEmailPolicyPayload || (exports2.CreateOutreachEmailPolicyPayload = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/CreatorIntentCreateInput.js
var require_CreatorIntentCreateInput = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/CreatorIntentCreateInput.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreatorIntentCreateInput = void 0;
    var CreatorIntentCreateInput;
    (function(CreatorIntentCreateInput2) {
      let intentType;
      (function(intentType2) {
        intentType2["INTERESTED"] = "interested";
      })(intentType = CreatorIntentCreateInput2.intentType || (CreatorIntentCreateInput2.intentType = {}));
      let intentTarget;
      (function(intentTarget2) {
        intentTarget2["SESP_SUBMISSION"] = "sesp.submission";
        intentTarget2["MAD_MEN_DEPLOYMENT"] = "mad-men.deployment";
        intentTarget2["GENERAL"] = "general";
        intentTarget2["MAD_MEN_GROUP"] = "mad-men.group";
      })(intentTarget = CreatorIntentCreateInput2.intentTarget || (CreatorIntentCreateInput2.intentTarget = {}));
    })(CreatorIntentCreateInput = exports2.CreatorIntentCreateInput || (exports2.CreatorIntentCreateInput = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/CreatorIntentResponse.js
var require_CreatorIntentResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/CreatorIntentResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreatorIntentResponse = void 0;
    var CreatorIntentResponse;
    (function(CreatorIntentResponse2) {
      let intentTarget;
      (function(intentTarget2) {
        intentTarget2["SESP_SUBMISSION"] = "sesp.submission";
        intentTarget2["MAD_MEN_DEPLOYMENT"] = "mad-men.deployment";
        intentTarget2["GENERAL"] = "general";
        intentTarget2["MAD_MEN_GROUP"] = "mad-men.group";
      })(intentTarget = CreatorIntentResponse2.intentTarget || (CreatorIntentResponse2.intentTarget = {}));
      let intentType;
      (function(intentType2) {
        intentType2["INTERESTED"] = "interested";
      })(intentType = CreatorIntentResponse2.intentType || (CreatorIntentResponse2.intentType = {}));
    })(CreatorIntentResponse = exports2.CreatorIntentResponse || (exports2.CreatorIntentResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/CustomColumn.js
var require_CustomColumn = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/CustomColumn.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CustomColumn = void 0;
    var CustomColumn;
    (function(CustomColumn2) {
      let entity;
      (function(entity2) {
        entity2["DEPLOYMENT"] = "deployment";
      })(entity = CustomColumn2.entity || (CustomColumn2.entity = {}));
    })(CustomColumn = exports2.CustomColumn || (exports2.CustomColumn = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/CustomField.js
var require_CustomField = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/CustomField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CustomField = void 0;
    var CustomField;
    (function(CustomField2) {
      let fieldType;
      (function(fieldType2) {
        fieldType2["STRING"] = "string";
        fieldType2["INTEGER"] = "integer";
        fieldType2["BOOLEAN"] = "boolean";
      })(fieldType = CustomField2.fieldType || (CustomField2.fieldType = {}));
    })(CustomField = exports2.CustomField || (exports2.CustomField = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/DeliverableOverrideParam.js
var require_DeliverableOverrideParam = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/DeliverableOverrideParam.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeliverableOverrideParam = void 0;
    var DeliverableOverrideParam;
    (function(DeliverableOverrideParam2) {
      let deliverableType;
      (function(deliverableType2) {
        deliverableType2["PAY_PER_EVENT_BRACKET"] = "payPerEventBracket";
        deliverableType2["PAY_PER_EVENT"] = "payPerEvent";
        deliverableType2["PAY_PER_EVENT_COUNTRIES"] = "payPerEventCountries";
        deliverableType2["CREATOR_PAY_PER_EVENT"] = "creatorPayPerEvent";
        deliverableType2["LIVE_STREAM"] = "liveStream";
        deliverableType2["YOU_TUBE_VIDEO"] = "youTubeVideo";
        deliverableType2["TIK_TOK_CREATIVE"] = "tikTokCreative";
        deliverableType2["CUSTOM"] = "custom";
        deliverableType2["CONTRACT"] = "contract";
      })(deliverableType = DeliverableOverrideParam2.deliverableType || (DeliverableOverrideParam2.deliverableType = {}));
    })(DeliverableOverrideParam = exports2.DeliverableOverrideParam || (exports2.DeliverableOverrideParam = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/DeliverablePreviewResponse.js
var require_DeliverablePreviewResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/DeliverablePreviewResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeliverablePreviewResponse = void 0;
    var DeliverablePreviewResponse;
    (function(DeliverablePreviewResponse2) {
      let type;
      (function(type2) {
        type2["BOT_COMMAND"] = "botCommand";
        type2["BRIEF"] = "brief";
        type2["CONTRACT"] = "contract";
        type2["CREATOR_PAY_PER_EVENT"] = "creatorPayPerEvent";
        type2["LIVE_STREAM"] = "liveStream";
        type2["OVERLAY"] = "overlay";
        type2["PANEL_BANNER"] = "panelBanner";
        type2["PAY_PER_EVENT"] = "payPerEvent";
        type2["PAY_PER_EVENT_BRACKET"] = "payPerEventBracket";
        type2["PAY_PER_EVENT_COUNTRIES"] = "PayPerEventCountries";
        type2["CUSTOM"] = "custom";
        type2["DYNAMIC_DESCRIPTION_WIDGET"] = "dynamicDescriptionWidget";
        type2["TIK_TOK_CREATIVE"] = "tikTokCreative";
        type2["YOU_TUBE_VIDEO"] = "youTubeVideo";
        type2["MARKDOWN_BRIEF"] = "markdownBrief";
        type2["SUB_PER_EVENT"] = "subPerEvent";
      })(type = DeliverablePreviewResponse2.type || (DeliverablePreviewResponse2.type = {}));
    })(DeliverablePreviewResponse = exports2.DeliverablePreviewResponse || (exports2.DeliverablePreviewResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/DeliverableResponse.js
var require_DeliverableResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/DeliverableResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeliverableResponse = void 0;
    var DeliverableResponse;
    (function(DeliverableResponse2) {
      let type;
      (function(type2) {
        type2["BOT_COMMAND"] = "botCommand";
        type2["BRIEF"] = "brief";
        type2["CONTRACT"] = "contract";
        type2["CREATOR_PAY_PER_EVENT"] = "creatorPayPerEvent";
        type2["LIVE_STREAM"] = "liveStream";
        type2["OVERLAY"] = "overlay";
        type2["PANEL_BANNER"] = "panelBanner";
        type2["PAY_PER_EVENT"] = "payPerEvent";
        type2["PAY_PER_EVENT_BRACKET"] = "payPerEventBracket";
        type2["PAY_PER_EVENT_COUNTRIES"] = "PayPerEventCountries";
        type2["CUSTOM"] = "custom";
        type2["DYNAMIC_DESCRIPTION_WIDGET"] = "dynamicDescriptionWidget";
        type2["TIK_TOK_CREATIVE"] = "tikTokCreative";
        type2["YOU_TUBE_VIDEO"] = "youTubeVideo";
        type2["MARKDOWN_BRIEF"] = "markdownBrief";
        type2["SUB_PER_EVENT"] = "subPerEvent";
      })(type = DeliverableResponse2.type || (DeliverableResponse2.type = {}));
      let prerequisitesOperator;
      (function(prerequisitesOperator2) {
        prerequisitesOperator2["ALL"] = "all";
        prerequisitesOperator2["ANY"] = "any";
      })(prerequisitesOperator = DeliverableResponse2.prerequisitesOperator || (DeliverableResponse2.prerequisitesOperator = {}));
      let status;
      (function(status2) {
        status2["INCOMPLETE"] = "incomplete";
        status2["BLOCKED"] = "blocked";
        status2["READY"] = "ready";
        status2["UNDER_NEGOTIATION"] = "underNegotiation";
        status2["GOAL_COMPLETE"] = "goalComplete";
        status2["GOAL_IN_PROGRESS"] = "goalInProgress";
        status2["MANUAL_OVERRIDE"] = "manualOverride";
        status2["PENDING_REVIEW"] = "pendingReview";
      })(status = DeliverableResponse2.status || (DeliverableResponse2.status = {}));
      let negotiationStatus;
      (function(negotiationStatus2) {
        negotiationStatus2["WAITING"] = "waiting";
        negotiationStatus2["APPROVED"] = "approved";
        negotiationStatus2["REJECTED"] = "rejected";
      })(negotiationStatus = DeliverableResponse2.negotiationStatus || (DeliverableResponse2.negotiationStatus = {}));
    })(DeliverableResponse = exports2.DeliverableResponse || (exports2.DeliverableResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/DeliverableSearchResultItem.js
var require_DeliverableSearchResultItem = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/DeliverableSearchResultItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeliverableSearchResultItem = void 0;
    var DeliverableSearchResultItem;
    (function(DeliverableSearchResultItem2) {
      let deploymentState;
      (function(deploymentState2) {
        deploymentState2["PENDING"] = "pending";
        deploymentState2["OUTREACHING"] = "outreaching";
        deploymentState2["OUTREACHED"] = "outreached";
        deploymentState2["VIEWED"] = "viewed";
        deploymentState2["ACCEPTED"] = "accepted";
        deploymentState2["RUNNING"] = "running";
        deploymentState2["ADJUSTMENT_APPROVAL"] = "adjustment_approval";
        deploymentState2["PAYMENT_PROCESSING"] = "payment_processing";
        deploymentState2["PAYMENT_FAILED"] = "payment_failed";
        deploymentState2["OUTREACH_TIMEOUT"] = "outreach_timeout";
        deploymentState2["OUTREACH_REJECTED"] = "outreach_rejected";
        deploymentState2["CANCELED"] = "canceled";
        deploymentState2["FAILED_TO_MEET_GOALS"] = "failed_to_meet_goals";
        deploymentState2["COMPLETED"] = "completed";
        deploymentState2["ABUSE_IDENTIFIED"] = "abuse_identified";
      })(deploymentState = DeliverableSearchResultItem2.deploymentState || (DeliverableSearchResultItem2.deploymentState = {}));
      let deploymentStatus;
      (function(deploymentStatus2) {
        deploymentStatus2["DRAFT"] = "draft";
        deploymentStatus2["ACTIVE"] = "active";
        deploymentStatus2["COMPLETED"] = "completed";
      })(deploymentStatus = DeliverableSearchResultItem2.deploymentStatus || (DeliverableSearchResultItem2.deploymentStatus = {}));
      let type;
      (function(type2) {
        type2["BOT_COMMAND"] = "botCommand";
        type2["BRIEF"] = "brief";
        type2["CONTRACT"] = "contract";
        type2["CREATOR_PAY_PER_EVENT"] = "creatorPayPerEvent";
        type2["LIVE_STREAM"] = "liveStream";
        type2["OVERLAY"] = "overlay";
        type2["PANEL_BANNER"] = "panelBanner";
        type2["PAY_PER_EVENT"] = "payPerEvent";
        type2["PAY_PER_EVENT_BRACKET"] = "payPerEventBracket";
        type2["PAY_PER_EVENT_COUNTRIES"] = "PayPerEventCountries";
        type2["CUSTOM"] = "custom";
        type2["DYNAMIC_DESCRIPTION_WIDGET"] = "dynamicDescriptionWidget";
        type2["TIK_TOK_CREATIVE"] = "tikTokCreative";
        type2["YOU_TUBE_VIDEO"] = "youTubeVideo";
        type2["MARKDOWN_BRIEF"] = "markdownBrief";
        type2["SUB_PER_EVENT"] = "subPerEvent";
      })(type = DeliverableSearchResultItem2.type || (DeliverableSearchResultItem2.type = {}));
      let status;
      (function(status2) {
        status2["INCOMPLETE"] = "incomplete";
        status2["BLOCKED"] = "blocked";
        status2["READY"] = "ready";
        status2["UNDER_NEGOTIATION"] = "underNegotiation";
        status2["GOAL_COMPLETE"] = "goalComplete";
        status2["GOAL_IN_PROGRESS"] = "goalInProgress";
        status2["MANUAL_OVERRIDE"] = "manualOverride";
        status2["PENDING_REVIEW"] = "pendingReview";
      })(status = DeliverableSearchResultItem2.status || (DeliverableSearchResultItem2.status = {}));
      let videoState;
      (function(videoState2) {
        videoState2["NOT_UPLOADED"] = "not_uploaded";
        videoState2["PENDING_REVIEW"] = "pending_review";
        videoState2["PENDING_CREATOR"] = "pending_creator";
        videoState2["APPROVED"] = "approved";
        videoState2["IN_PROGRESS"] = "in_progress";
      })(videoState = DeliverableSearchResultItem2.videoState || (DeliverableSearchResultItem2.videoState = {}));
      let publicationStatus;
      (function(publicationStatus2) {
        publicationStatus2["UNLISTED"] = "unlisted";
        publicationStatus2["PRIVATE"] = "private";
        publicationStatus2["PUBLIC"] = "public";
        publicationStatus2["UNKNOWN"] = "unknown";
      })(publicationStatus = DeliverableSearchResultItem2.publicationStatus || (DeliverableSearchResultItem2.publicationStatus = {}));
    })(DeliverableSearchResultItem = exports2.DeliverableSearchResultItem || (exports2.DeliverableSearchResultItem = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/DeploymentAdvertiserEventResponse.js
var require_DeploymentAdvertiserEventResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/DeploymentAdvertiserEventResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeploymentAdvertiserEventResponse = void 0;
    var DeploymentAdvertiserEventResponse;
    (function(DeploymentAdvertiserEventResponse2) {
      let action;
      (function(action2) {
        action2["INCREMENT"] = "increment";
        action2["SET"] = "set";
      })(action = DeploymentAdvertiserEventResponse2.action || (DeploymentAdvertiserEventResponse2.action = {}));
      let source;
      (function(source2) {
        source2["MANUAL"] = "manual";
        source2["INGEST"] = "ingest";
        source2["SYSTEM"] = "system";
        source2["SPREADSHEET"] = "spreadsheet";
      })(source = DeploymentAdvertiserEventResponse2.source || (DeploymentAdvertiserEventResponse2.source = {}));
    })(DeploymentAdvertiserEventResponse = exports2.DeploymentAdvertiserEventResponse || (exports2.DeploymentAdvertiserEventResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/DeploymentConfigurationChanged.js
var require_DeploymentConfigurationChanged = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/DeploymentConfigurationChanged.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeploymentConfigurationChanged = void 0;
    var DeploymentConfigurationChanged;
    (function(DeploymentConfigurationChanged2) {
      let source;
      (function(source2) {
        source2["BULK_UPDATE"] = "BULK_UPDATE";
        source2["UPDATE"] = "UPDATE";
      })(source = DeploymentConfigurationChanged2.source || (DeploymentConfigurationChanged2.source = {}));
    })(DeploymentConfigurationChanged = exports2.DeploymentConfigurationChanged || (exports2.DeploymentConfigurationChanged = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/DeploymentDeliverableChanged.js
var require_DeploymentDeliverableChanged = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/DeploymentDeliverableChanged.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeploymentDeliverableChanged = void 0;
    var DeploymentDeliverableChanged;
    (function(DeploymentDeliverableChanged2) {
      let type;
      (function(type2) {
        type2["BOT_COMMAND"] = "botCommand";
        type2["BRIEF"] = "brief";
        type2["CONTRACT"] = "contract";
        type2["CREATOR_PAY_PER_EVENT"] = "creatorPayPerEvent";
        type2["LIVE_STREAM"] = "liveStream";
        type2["OVERLAY"] = "overlay";
        type2["PANEL_BANNER"] = "panelBanner";
        type2["PAY_PER_EVENT"] = "payPerEvent";
        type2["PAY_PER_EVENT_BRACKET"] = "payPerEventBracket";
        type2["PAY_PER_EVENT_COUNTRIES"] = "PayPerEventCountries";
        type2["CUSTOM"] = "custom";
        type2["DYNAMIC_DESCRIPTION_WIDGET"] = "dynamicDescriptionWidget";
        type2["TIK_TOK_CREATIVE"] = "tikTokCreative";
        type2["YOU_TUBE_VIDEO"] = "youTubeVideo";
        type2["MARKDOWN_BRIEF"] = "markdownBrief";
        type2["SUB_PER_EVENT"] = "subPerEvent";
      })(type = DeploymentDeliverableChanged2.type || (DeploymentDeliverableChanged2.type = {}));
    })(DeploymentDeliverableChanged = exports2.DeploymentDeliverableChanged || (exports2.DeploymentDeliverableChanged = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/DeploymentFraudResponse.js
var require_DeploymentFraudResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/DeploymentFraudResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeploymentFraudResponse = void 0;
    var DeploymentFraudResponse;
    (function(DeploymentFraudResponse2) {
      let investigationState;
      (function(investigationState2) {
        investigationState2["PENDING"] = "pending";
        investigationState2["UNDER_INVESTIGATION"] = "under_investigation";
        investigationState2["REVIEWED"] = "reviewed";
        investigationState2["COMPLETED"] = "completed";
      })(investigationState = DeploymentFraudResponse2.investigationState || (DeploymentFraudResponse2.investigationState = {}));
      let recommendation;
      (function(recommendation2) {
        recommendation2["FRAUD"] = "fraud";
        recommendation2["LEGIT"] = "legit";
      })(recommendation = DeploymentFraudResponse2.recommendation || (DeploymentFraudResponse2.recommendation = {}));
      let conclusion;
      (function(conclusion2) {
        conclusion2["FRAUD"] = "fraud";
        conclusion2["LEGIT"] = "legit";
      })(conclusion = DeploymentFraudResponse2.conclusion || (DeploymentFraudResponse2.conclusion = {}));
    })(DeploymentFraudResponse = exports2.DeploymentFraudResponse || (exports2.DeploymentFraudResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/DeploymentOutreach.js
var require_DeploymentOutreach = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/DeploymentOutreach.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeploymentOutreach = void 0;
    var DeploymentOutreach;
    (function(DeploymentOutreach2) {
      let method;
      (function(method2) {
        method2["MANUAL"] = "manual";
        method2["AUTOMATIC"] = "automatic";
      })(method = DeploymentOutreach2.method || (DeploymentOutreach2.method = {}));
      let language;
      (function(language2) {
        language2["EN"] = "en";
        language2["ES"] = "es";
        language2["RU"] = "ru";
        language2["DE"] = "de";
        language2["FR"] = "fr";
        language2["PT"] = "pt";
        language2["KO"] = "ko";
        language2["IT"] = "it";
        language2["TR"] = "tr";
        language2["PL"] = "pl";
        language2["PT_BR"] = "pt-BR";
      })(language = DeploymentOutreach2.language || (DeploymentOutreach2.language = {}));
      let stage;
      (function(stage2) {
        stage2["INITIAL_INVITE"] = "initialInvite";
        stage2["DIDNT_OPEN_OFFER_PAGE"] = "didntOpenOfferPage";
        stage2["OPENED_OFFER_PAGE"] = "openedOfferPage";
        stage2["FINISHED_RUNNING"] = "finishedRunning";
        stage2["RUNNING"] = "running";
      })(stage = DeploymentOutreach2.stage || (DeploymentOutreach2.stage = {}));
      let target;
      (function(target2) {
        target2["DIRECT"] = "direct";
        target2["AGENCY"] = "agency";
      })(target = DeploymentOutreach2.target || (DeploymentOutreach2.target = {}));
      let medium;
      (function(medium2) {
        medium2["EMAIL"] = "email";
        medium2["DISCORD"] = "discord";
      })(medium = DeploymentOutreach2.medium || (DeploymentOutreach2.medium = {}));
    })(DeploymentOutreach = exports2.DeploymentOutreach || (exports2.DeploymentOutreach = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/DeploymentResponse.js
var require_DeploymentResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/DeploymentResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeploymentResponse = void 0;
    var DeploymentResponse;
    (function(DeploymentResponse2) {
      let state;
      (function(state2) {
        state2["PENDING"] = "pending";
        state2["OUTREACHING"] = "outreaching";
        state2["OUTREACHED"] = "outreached";
        state2["VIEWED"] = "viewed";
        state2["ACCEPTED"] = "accepted";
        state2["RUNNING"] = "running";
        state2["ADJUSTMENT_APPROVAL"] = "adjustment_approval";
        state2["PAYMENT_PROCESSING"] = "payment_processing";
        state2["PAYMENT_FAILED"] = "payment_failed";
        state2["OUTREACH_TIMEOUT"] = "outreach_timeout";
        state2["OUTREACH_REJECTED"] = "outreach_rejected";
        state2["CANCELED"] = "canceled";
        state2["FAILED_TO_MEET_GOALS"] = "failed_to_meet_goals";
        state2["COMPLETED"] = "completed";
        state2["ABUSE_IDENTIFIED"] = "abuse_identified";
      })(state = DeploymentResponse2.state || (DeploymentResponse2.state = {}));
      let outreachMethod;
      (function(outreachMethod2) {
        outreachMethod2["MANUAL"] = "manual";
        outreachMethod2["AUTOMATIC"] = "automatic";
      })(outreachMethod = DeploymentResponse2.outreachMethod || (DeploymentResponse2.outreachMethod = {}));
      let outreachTarget;
      (function(outreachTarget2) {
        outreachTarget2["DIRECT"] = "direct";
        outreachTarget2["AGENCY"] = "agency";
      })(outreachTarget = DeploymentResponse2.outreachTarget || (DeploymentResponse2.outreachTarget = {}));
      let outreachLanguage;
      (function(outreachLanguage2) {
        outreachLanguage2["EN"] = "en";
        outreachLanguage2["ES"] = "es";
        outreachLanguage2["RU"] = "ru";
        outreachLanguage2["DE"] = "de";
        outreachLanguage2["FR"] = "fr";
        outreachLanguage2["PT"] = "pt";
        outreachLanguage2["KO"] = "ko";
        outreachLanguage2["IT"] = "it";
        outreachLanguage2["TR"] = "tr";
        outreachLanguage2["PL"] = "pl";
        outreachLanguage2["PT_BR"] = "pt-BR";
      })(outreachLanguage = DeploymentResponse2.outreachLanguage || (DeploymentResponse2.outreachLanguage = {}));
      let payoutDestination;
      (function(payoutDestination2) {
        payoutDestination2["DIRECT"] = "direct";
        payoutDestination2["AGENCY"] = "agency";
      })(payoutDestination = DeploymentResponse2.payoutDestination || (DeploymentResponse2.payoutDestination = {}));
      let status;
      (function(status2) {
        status2["DRAFT"] = "draft";
        status2["ACTIVE"] = "active";
        status2["COMPLETED"] = "completed";
      })(status = DeploymentResponse2.status || (DeploymentResponse2.status = {}));
      let payoutState;
      (function(payoutState2) {
        payoutState2["UNKNOWN"] = "unknown";
        payoutState2["AWAITING_APPROVAL"] = "awaiting_approval";
        payoutState2["APPROVED"] = "approved";
        payoutState2["REJECTED"] = "rejected";
        payoutState2["PROCESSING"] = "processing";
        payoutState2["PAID"] = "paid";
        payoutState2["FAILED"] = "failed";
      })(payoutState = DeploymentResponse2.payoutState || (DeploymentResponse2.payoutState = {}));
      let paymentEligibility;
      (function(paymentEligibility2) {
        paymentEligibility2["AUTOMATIC"] = "automatic";
        paymentEligibility2["MANUAL"] = "manual";
      })(paymentEligibility = DeploymentResponse2.paymentEligibility || (DeploymentResponse2.paymentEligibility = {}));
      let manualPaymentReviewStatus;
      (function(manualPaymentReviewStatus2) {
        manualPaymentReviewStatus2["NONE"] = "none";
        manualPaymentReviewStatus2["PENDING"] = "pending";
        manualPaymentReviewStatus2["IN_PROGRESS"] = "in_progress";
        manualPaymentReviewStatus2["COMPLETED"] = "completed";
      })(manualPaymentReviewStatus = DeploymentResponse2.manualPaymentReviewStatus || (DeploymentResponse2.manualPaymentReviewStatus = {}));
      let missingEventsStatus;
      (function(missingEventsStatus2) {
        missingEventsStatus2["NO_MISSING_EVENTS"] = "no_missing_events";
        missingEventsStatus2["HAS_MISSING_EVENTS"] = "has_missing_events";
        missingEventsStatus2["RESOLVED"] = "resolved";
      })(missingEventsStatus = DeploymentResponse2.missingEventsStatus || (DeploymentResponse2.missingEventsStatus = {}));
      let progressReminder;
      (function(progressReminder2) {
        progressReminder2["NONE"] = "none";
        progressReminder2["REMINDER_GET_STARTED"] = "reminderGetStarted";
        progressReminder2["REMINDER_COMPLETE_SETUP"] = "reminderCompleteSetup";
        progressReminder2["REMINDER_START_STREAMING"] = "reminderStartStreaming";
        progressReminder2["REMINDER_GET_CLICKS"] = "reminderGetClicks";
        progressReminder2["REMINDER_GET_ENGAGEMENT"] = "reminderGetEngagement";
        progressReminder2["REMINDER_GET_RESULTS"] = "reminderGetResults";
        progressReminder2["REMINDER_DONT_FORGET_SETUP"] = "reminderDontForgetSetup";
        progressReminder2["REMINDER_GET_EVENTS"] = "reminderGetEvents";
        progressReminder2["REMINDER_COMPLETE_SETUP_SEVERE"] = "reminderCompleteSetupSevere";
        progressReminder2["REMINDER_START_STREAMING_SEVERE"] = "reminderStartStreamingSevere";
        progressReminder2["REMINDER_COMPLETE_SPONSORSHIP"] = "reminderCompleteSponsorship";
        progressReminder2["REMINDER_CPPEUNLOCKED"] = "reminderCPPEUnlocked";
      })(progressReminder = DeploymentResponse2.progressReminder || (DeploymentResponse2.progressReminder = {}));
    })(DeploymentResponse = exports2.DeploymentResponse || (exports2.DeploymentResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/DeploymentStateChanged.js
var require_DeploymentStateChanged = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/DeploymentStateChanged.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeploymentStateChanged = void 0;
    var DeploymentStateChanged;
    (function(DeploymentStateChanged2) {
      let from;
      (function(from2) {
        from2["PENDING"] = "pending";
        from2["OUTREACHING"] = "outreaching";
        from2["OUTREACHED"] = "outreached";
        from2["VIEWED"] = "viewed";
        from2["ACCEPTED"] = "accepted";
        from2["RUNNING"] = "running";
        from2["ADJUSTMENT_APPROVAL"] = "adjustment_approval";
        from2["PAYMENT_PROCESSING"] = "payment_processing";
        from2["PAYMENT_FAILED"] = "payment_failed";
        from2["OUTREACH_TIMEOUT"] = "outreach_timeout";
        from2["OUTREACH_REJECTED"] = "outreach_rejected";
        from2["CANCELED"] = "canceled";
        from2["FAILED_TO_MEET_GOALS"] = "failed_to_meet_goals";
        from2["COMPLETED"] = "completed";
        from2["ABUSE_IDENTIFIED"] = "abuse_identified";
      })(from = DeploymentStateChanged2.from || (DeploymentStateChanged2.from = {}));
      let to;
      (function(to2) {
        to2["PENDING"] = "pending";
        to2["OUTREACHING"] = "outreaching";
        to2["OUTREACHED"] = "outreached";
        to2["VIEWED"] = "viewed";
        to2["ACCEPTED"] = "accepted";
        to2["RUNNING"] = "running";
        to2["ADJUSTMENT_APPROVAL"] = "adjustment_approval";
        to2["PAYMENT_PROCESSING"] = "payment_processing";
        to2["PAYMENT_FAILED"] = "payment_failed";
        to2["OUTREACH_TIMEOUT"] = "outreach_timeout";
        to2["OUTREACH_REJECTED"] = "outreach_rejected";
        to2["CANCELED"] = "canceled";
        to2["FAILED_TO_MEET_GOALS"] = "failed_to_meet_goals";
        to2["COMPLETED"] = "completed";
        to2["ABUSE_IDENTIFIED"] = "abuse_identified";
      })(to = DeploymentStateChanged2.to || (DeploymentStateChanged2.to = {}));
    })(DeploymentStateChanged = exports2.DeploymentStateChanged || (exports2.DeploymentStateChanged = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/DeploymentUtmResponse.js
var require_DeploymentUtmResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/DeploymentUtmResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeploymentUtmResponse = void 0;
    var DeploymentUtmResponse;
    (function(DeploymentUtmResponse2) {
      let action;
      (function(action2) {
        action2["START"] = "start";
        action2["VIEW"] = "view";
        action2["START_INTEREST"] = "start_interest";
        action2["VIEW_PROGRESS"] = "view_progress";
        action2["NOTIFY_ME"] = "notify_me";
        action2["SEND_EMAIL"] = "send_email";
        action2["EMAIL_OPEN"] = "email_open";
        action2["EMAIL_CLICK"] = "email_click";
        action2["TWITCH_REDIRECT"] = "twitch_redirect";
        action2["TWITCH_REDIRECT_FAILURE"] = "twitch_redirect_failure";
      })(action = DeploymentUtmResponse2.action || (DeploymentUtmResponse2.action = {}));
    })(DeploymentUtmResponse = exports2.DeploymentUtmResponse || (exports2.DeploymentUtmResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/EmailFailuresSegmentation.js
var require_EmailFailuresSegmentation = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/EmailFailuresSegmentation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EmailFailuresSegmentation = void 0;
    var EmailFailuresSegmentation;
    (function(EmailFailuresSegmentation2) {
      let reason;
      (function(reason2) {
        reason2["INVALID_EMAIL"] = "invalid_email";
        reason2["RECEIVED_EMAIL_IN_THE_LAST_2_DAYS"] = "received_email_in_the_last_2_days";
        reason2["SPECIAL_OFFERS_DISABLED"] = "special_offers_disabled";
        reason2["NO_SPONSORSHIPS"] = "no_sponsorships";
        reason2["NO_SPECIAL_SPONSORSHIP"] = "no_special_sponsorship";
        reason2["NO_ADVERTISERS"] = "no_advertisers";
        reason2["NO_TEMPLATE"] = "no_template";
        reason2["HAS_ACCEPTED_RUNNING_SPONSORSHIP"] = "has_accepted_running_sponsorship";
        reason2["RECEIVED_DIGEST_EMAIL_IN_THE_LAST_3_DAYS"] = "received_digest_email_in_the_last_3_days";
        reason2["DIGEST_DISABLED"] = "digest_disabled";
        reason2["NOT_ELIGIBLE_FOR_EMAILS"] = "not_eligible_for_emails";
        reason2["RECEIVED_EMAIL_IN_THE_LAST_DAY"] = "received_email_in_the_last_day";
        reason2["RECIEVE_EMAIL_IN_DEFINED_PERIOD"] = "recieve_email_in_defined_period";
        reason2["RECIEVE_SAME_TYPE_EMAIL_IN_DEFINED_PERIOD"] = "recieve_same_type_email_in_defined_period";
        reason2["HAS_AGENCY"] = "has_agency";
        reason2["HAS_MANAGER"] = "has_manager";
        reason2["NOT_FOUND"] = "not_found";
        reason2["NOT_ENGAGED"] = "not_engaged";
      })(reason = EmailFailuresSegmentation2.reason || (EmailFailuresSegmentation2.reason = {}));
    })(EmailFailuresSegmentation = exports2.EmailFailuresSegmentation || (exports2.EmailFailuresSegmentation = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/EmailLogResponse.js
var require_EmailLogResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/EmailLogResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EmailLogResponse = void 0;
    var EmailLogResponse;
    (function(EmailLogResponse2) {
      let type;
      (function(type2) {
        type2["DIGEST"] = "digest";
        type2["SPECIAL"] = "special";
        type2["NOTIFY_ME"] = "notifyMe";
        type2["REMINDER"] = "reminder";
        type2["OUTREACH"] = "outreach";
        type2["MANUAL_OUTREACH"] = "manualOutreach";
        type2["OTHER"] = "other";
        type2["AGENCY_CREATOR_JOINS"] = "agencyCreatorJoins";
        type2["AGENCY_CREATOR_LEAVES_BY_AGENT"] = "agencyCreatorLeavesByAgent";
        type2["AGENCY_CREATOR_LEAVES_BY_CREATOR"] = "agencyCreatorLeavesByCreator";
        type2["AGENCY_START_DEPLOYMENT"] = "agencyStartDeployment";
        type2["AGENCY_DIGEST"] = "agencyDigest";
        type2["ABUSE"] = "abuse";
        type2["REMINDER_COMPLETE_SETUP"] = "reminderCompleteSetup";
        type2["REMINDER_START_STREAMING"] = "reminderStartStreaming";
        type2["REMINDER_GET_CLICKS"] = "reminderGetClicks";
        type2["REMINDER_GET_ENGAGEMENT"] = "reminderGetEngagement";
        type2["REMINDER_GET_RESULTS"] = "reminderGetResults";
        type2["REMINDER_DONT_FORGET_SETUP"] = "reminderDontForgetSetup";
        type2["REMINDER_GET_EVENTS"] = "reminderGetEvents";
        type2["REMINDER_COMPLETE_SETUP_SEVERE"] = "reminderCompleteSetupSevere";
        type2["REMINDER_START_STREAMING_SEVERE"] = "reminderStartStreamingSevere";
        type2["REMINDER_GET_STARTED"] = "reminderGetStarted";
        type2["NOTIFICATION"] = "notification";
        type2["MARKETING"] = "marketing";
      })(type = EmailLogResponse2.type || (EmailLogResponse2.type = {}));
    })(EmailLogResponse = exports2.EmailLogResponse || (exports2.EmailLogResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/EmailResponse.js
var require_EmailResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/EmailResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EmailResponse = void 0;
    var EmailResponse;
    (function(EmailResponse2) {
      let type;
      (function(type2) {
        type2["DIGEST"] = "digest";
        type2["SPECIAL"] = "special";
        type2["NOTIFY_ME"] = "notifyMe";
        type2["REMINDER"] = "reminder";
        type2["OUTREACH"] = "outreach";
        type2["MANUAL_OUTREACH"] = "manualOutreach";
        type2["OTHER"] = "other";
        type2["AGENCY_CREATOR_JOINS"] = "agencyCreatorJoins";
        type2["AGENCY_CREATOR_LEAVES_BY_AGENT"] = "agencyCreatorLeavesByAgent";
        type2["AGENCY_CREATOR_LEAVES_BY_CREATOR"] = "agencyCreatorLeavesByCreator";
        type2["AGENCY_START_DEPLOYMENT"] = "agencyStartDeployment";
        type2["AGENCY_DIGEST"] = "agencyDigest";
        type2["ABUSE"] = "abuse";
        type2["REMINDER_COMPLETE_SETUP"] = "reminderCompleteSetup";
        type2["REMINDER_START_STREAMING"] = "reminderStartStreaming";
        type2["REMINDER_GET_CLICKS"] = "reminderGetClicks";
        type2["REMINDER_GET_ENGAGEMENT"] = "reminderGetEngagement";
        type2["REMINDER_GET_RESULTS"] = "reminderGetResults";
        type2["REMINDER_DONT_FORGET_SETUP"] = "reminderDontForgetSetup";
        type2["REMINDER_GET_EVENTS"] = "reminderGetEvents";
        type2["REMINDER_COMPLETE_SETUP_SEVERE"] = "reminderCompleteSetupSevere";
        type2["REMINDER_START_STREAMING_SEVERE"] = "reminderStartStreamingSevere";
        type2["REMINDER_GET_STARTED"] = "reminderGetStarted";
        type2["NOTIFICATION"] = "notification";
        type2["MARKETING"] = "marketing";
      })(type = EmailResponse2.type || (EmailResponse2.type = {}));
    })(EmailResponse = exports2.EmailResponse || (exports2.EmailResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/EmailSettingResponse.js
var require_EmailSettingResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/EmailSettingResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EmailSettingResponse = void 0;
    var EmailSettingResponse;
    (function(EmailSettingResponse2) {
      let type;
      (function(type2) {
        type2["DIGEST"] = "digest";
        type2["SPECIAL"] = "special";
        type2["NOTIFY_ME"] = "notifyMe";
        type2["REMINDER"] = "reminder";
        type2["OUTREACH"] = "outreach";
        type2["MANUAL_OUTREACH"] = "manualOutreach";
        type2["OTHER"] = "other";
        type2["AGENCY_CREATOR_JOINS"] = "agencyCreatorJoins";
        type2["AGENCY_CREATOR_LEAVES_BY_AGENT"] = "agencyCreatorLeavesByAgent";
        type2["AGENCY_CREATOR_LEAVES_BY_CREATOR"] = "agencyCreatorLeavesByCreator";
        type2["AGENCY_START_DEPLOYMENT"] = "agencyStartDeployment";
        type2["AGENCY_DIGEST"] = "agencyDigest";
        type2["ABUSE"] = "abuse";
        type2["REMINDER_COMPLETE_SETUP"] = "reminderCompleteSetup";
        type2["REMINDER_START_STREAMING"] = "reminderStartStreaming";
        type2["REMINDER_GET_CLICKS"] = "reminderGetClicks";
        type2["REMINDER_GET_ENGAGEMENT"] = "reminderGetEngagement";
        type2["REMINDER_GET_RESULTS"] = "reminderGetResults";
        type2["REMINDER_DONT_FORGET_SETUP"] = "reminderDontForgetSetup";
        type2["REMINDER_GET_EVENTS"] = "reminderGetEvents";
        type2["REMINDER_COMPLETE_SETUP_SEVERE"] = "reminderCompleteSetupSevere";
        type2["REMINDER_START_STREAMING_SEVERE"] = "reminderStartStreamingSevere";
        type2["REMINDER_GET_STARTED"] = "reminderGetStarted";
        type2["NOTIFICATION"] = "notification";
        type2["MARKETING"] = "marketing";
      })(type = EmailSettingResponse2.type || (EmailSettingResponse2.type = {}));
    })(EmailSettingResponse = exports2.EmailSettingResponse || (exports2.EmailSettingResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/EventCalculation.js
var require_EventCalculation = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/EventCalculation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EventCalculation = void 0;
    var EventCalculation;
    (function(EventCalculation2) {
      let method;
      (function(method2) {
        method2["UNIQUE"] = "unique";
        method2["EVERY"] = "every";
      })(method = EventCalculation2.method || (EventCalculation2.method = {}));
    })(EventCalculation = exports2.EventCalculation || (exports2.EventCalculation = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/EventCalculationResponse.js
var require_EventCalculationResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/EventCalculationResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EventCalculationResponse = void 0;
    var EventCalculationResponse;
    (function(EventCalculationResponse2) {
      let method;
      (function(method2) {
        method2["UNIQUE"] = "unique";
        method2["EVERY"] = "every";
      })(method = EventCalculationResponse2.method || (EventCalculationResponse2.method = {}));
    })(EventCalculationResponse = exports2.EventCalculationResponse || (exports2.EventCalculationResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/EventConfiguration.js
var require_EventConfiguration = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/EventConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EventConfiguration = void 0;
    var EventConfiguration;
    (function(EventConfiguration2) {
      let eventType;
      (function(eventType2) {
        eventType2["PENDING"] = "pending";
        eventType2["FINAL"] = "final";
        eventType2["CANCEL"] = "cancel";
        eventType2["TRACKING"] = "tracking";
      })(eventType = EventConfiguration2.eventType || (EventConfiguration2.eventType = {}));
    })(EventConfiguration = exports2.EventConfiguration || (exports2.EventConfiguration = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/EventConfigurationResponse.js
var require_EventConfigurationResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/EventConfigurationResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EventConfigurationResponse = void 0;
    var EventConfigurationResponse;
    (function(EventConfigurationResponse2) {
      let eventType;
      (function(eventType2) {
        eventType2["PENDING"] = "pending";
        eventType2["FINAL"] = "final";
        eventType2["CANCEL"] = "cancel";
        eventType2["TRACKING"] = "tracking";
      })(eventType = EventConfigurationResponse2.eventType || (EventConfigurationResponse2.eventType = {}));
    })(EventConfigurationResponse = exports2.EventConfigurationResponse || (exports2.EventConfigurationResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/EventHooks.js
var require_EventHooks = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/EventHooks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EventHooks = void 0;
    var EventHooks;
    (function(EventHooks2) {
      let name;
      (function(name2) {
        name2["REPORT_TO_SLACK"] = "report_to_slack";
        name2["CREATE_ACTIVITY"] = "create_activity";
      })(name = EventHooks2.name || (EventHooks2.name = {}));
    })(EventHooks = exports2.EventHooks || (exports2.EventHooks = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/EventHooksResponse.js
var require_EventHooksResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/EventHooksResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EventHooksResponse = void 0;
    var EventHooksResponse;
    (function(EventHooksResponse2) {
      let name;
      (function(name2) {
        name2["REPORT_TO_SLACK"] = "report_to_slack";
        name2["CREATE_ACTIVITY"] = "create_activity";
      })(name = EventHooksResponse2.name || (EventHooksResponse2.name = {}));
    })(EventHooksResponse = exports2.EventHooksResponse || (exports2.EventHooksResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/ExampleVideoData.js
var require_ExampleVideoData = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/ExampleVideoData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ExampleVideoData = void 0;
    var ExampleVideoData;
    (function(ExampleVideoData2) {
      let type;
      (function(type2) {
        type2["YOU_TUBE_VIDEO"] = "youTubeVideo";
        type2["INTERNAL_VIDEO"] = "internalVideo";
      })(type = ExampleVideoData2.type || (ExampleVideoData2.type = {}));
    })(ExampleVideoData = exports2.ExampleVideoData || (exports2.ExampleVideoData = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/FakeChannelDeploymentResponse.js
var require_FakeChannelDeploymentResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/FakeChannelDeploymentResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FakeChannelDeploymentResponse = void 0;
    var FakeChannelDeploymentResponse;
    (function(FakeChannelDeploymentResponse2) {
      let state;
      (function(state2) {
        state2["PENDING"] = "pending";
        state2["OUTREACHING"] = "outreaching";
        state2["OUTREACHED"] = "outreached";
        state2["VIEWED"] = "viewed";
        state2["ACCEPTED"] = "accepted";
        state2["RUNNING"] = "running";
        state2["ADJUSTMENT_APPROVAL"] = "adjustment_approval";
        state2["PAYMENT_PROCESSING"] = "payment_processing";
        state2["PAYMENT_FAILED"] = "payment_failed";
        state2["OUTREACH_TIMEOUT"] = "outreach_timeout";
        state2["OUTREACH_REJECTED"] = "outreach_rejected";
        state2["CANCELED"] = "canceled";
        state2["FAILED_TO_MEET_GOALS"] = "failed_to_meet_goals";
        state2["COMPLETED"] = "completed";
        state2["ABUSE_IDENTIFIED"] = "abuse_identified";
      })(state = FakeChannelDeploymentResponse2.state || (FakeChannelDeploymentResponse2.state = {}));
      let conclusion;
      (function(conclusion2) {
        conclusion2["FRAUD"] = "fraud";
        conclusion2["LEGIT"] = "legit";
      })(conclusion = FakeChannelDeploymentResponse2.conclusion || (FakeChannelDeploymentResponse2.conclusion = {}));
    })(FakeChannelDeploymentResponse = exports2.FakeChannelDeploymentResponse || (exports2.FakeChannelDeploymentResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/FakeChannelResponse.js
var require_FakeChannelResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/FakeChannelResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FakeChannelResponse = void 0;
    var FakeChannelResponse;
    (function(FakeChannelResponse2) {
      let spStanding;
      (function(spStanding2) {
        spStanding2["GOOD"] = "good";
        spStanding2["UNKNOWN"] = "unknown";
        spStanding2["SUSPECTED"] = "suspected";
        spStanding2["BANNED"] = "banned";
      })(spStanding = FakeChannelResponse2.spStanding || (FakeChannelResponse2.spStanding = {}));
    })(FakeChannelResponse = exports2.FakeChannelResponse || (exports2.FakeChannelResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/Field.js
var require_Field = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/Field.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Field = void 0;
    var Field;
    (function(Field2) {
      let type;
      (function(type2) {
        type2["STRING"] = "string";
        type2["ENUM"] = "enum";
        type2["NUMBER"] = "number";
        type2["DATE"] = "date";
        type2["BOOLEAN"] = "boolean";
      })(type = Field2.type || (Field2.type = {}));
    })(Field = exports2.Field || (exports2.Field = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/FileProcessResponse.js
var require_FileProcessResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/FileProcessResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FileProcessResponse = void 0;
    var FileProcessResponse;
    (function(FileProcessResponse2) {
      let handlerType;
      (function(handlerType2) {
        handlerType2["SELECT_CREATORS"] = "select_creators";
        handlerType2["FEATURE_FLAGS"] = "feature_flags";
        handlerType2["CHANNEL_LABELS"] = "channel_labels";
        handlerType2["REPAIR_DEPLOYMENTS"] = "repair_deployments";
        handlerType2["DEPLOYMENTS_FRAUD"] = "deployments_fraud";
        handlerType2["SELECT_CREATORS_PRE_PROCESS"] = "select_creators_pre_process";
        handlerType2["FEATURE_FLAGS_IMPORT_PRE_PROCESS"] = "feature_flags_import_pre_process";
        handlerType2["CHANNEL_LABELS_IMPORT_PRE_PROCESS"] = "channel_labels_import_pre_process";
        handlerType2["ADVERTISER_BLOCKLIST"] = "advertiser_blocklist";
        handlerType2["AGENCY_CREATORS"] = "agency_creators";
        handlerType2["AGENCY_CREATORS_PRE_PROCESS"] = "agency_creators_pre_process";
        handlerType2["EXPERIMENT_APPLY_PRE_PROCESS"] = "experiment_apply_pre_process";
        handlerType2["EXPERIMENT_REMOVE_PRE_PROCESS"] = "experiment_remove_pre_process";
        handlerType2["EXPERIMENT_ROLLOUT_PRE_PROCESS"] = "experiment_rollout_pre_process";
        handlerType2["CREATOR_MANAGERS"] = "creator_managers";
        handlerType2["CREATOR_MANAGERS_PRE_PROCESS"] = "creator_managers_pre_process";
        handlerType2["GIFT_CARDS"] = "gift_cards";
      })(handlerType = FileProcessResponse2.handlerType || (FileProcessResponse2.handlerType = {}));
      let validationStatus;
      (function(validationStatus2) {
        validationStatus2["VALIDATING"] = "validating";
        validationStatus2["VALID"] = "valid";
        validationStatus2["INVALID"] = "invalid";
      })(validationStatus = FileProcessResponse2.validationStatus || (FileProcessResponse2.validationStatus = {}));
    })(FileProcessResponse = exports2.FileProcessResponse || (exports2.FileProcessResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/Filter.js
var require_Filter2 = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/Filter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Filter = void 0;
    var Filter;
    (function(Filter2) {
      let operator;
      (function(operator2) {
        operator2["LT"] = "lt";
        operator2["LTE"] = "lte";
        operator2["EQ"] = "eq";
        operator2["NEQ"] = "neq";
        operator2["GT"] = "gt";
        operator2["GTE"] = "gte";
        operator2["IN"] = "in";
        operator2["IS_EMPTY"] = "isEmpty";
        operator2["NOT_IS_EMPTY"] = "notIsEmpty";
        operator2["CONTAINS"] = "contains";
        operator2["NOT_CONTAINS"] = "notContains";
      })(operator = Filter2.operator || (Filter2.operator = {}));
    })(Filter = exports2.Filter || (exports2.Filter = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/FraudFlag.js
var require_FraudFlag = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/FraudFlag.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FraudFlag = void 0;
    var FraudFlag;
    (function(FraudFlag2) {
      let flag;
      (function(flag2) {
        flag2["EVENT_CCV_RATIO"] = "event_ccv_ratio";
        flag2["DEEPER_EVENT_RATIO"] = "deeper_event_ratio";
        flag2["SPEED"] = "speed";
        flag2["OFFLINE_EVENTS"] = "offline_events";
        flag2["SAME_TIME_EVENTS"] = "same_time_events";
        flag2["EVENTS_CLICKS_RATIO"] = "events_clicks_ratio";
        flag2["EVENTS_UNIQUE_CLICKS_RATIO"] = "events_unique_clicks_ratio";
        flag2["SITE_BLACKLIST"] = "site_blacklist";
        flag2["BLOCKED_INSTALLS"] = "blocked_installs";
        flag2["SAME_IP_INSTALLS"] = "same_ip_installs";
        flag2["EARLY_RETENTION_DROP"] = "early_retention_drop";
        flag2["CLUSTERED_EVENTS_RATIO"] = "clustered_events_ratio";
        flag2["LARGEST_CLUSTER_EVENTS_RATIO"] = "largest_cluster_events_ratio";
        flag2["EARLY_ROAS"] = "early_roas";
        flag2["HF_PURCHASES"] = "hf_purchases";
      })(flag = FraudFlag2.flag || (FraudFlag2.flag = {}));
    })(FraudFlag = exports2.FraudFlag || (exports2.FraudFlag = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/GetOutreachFlowEmailPolicyResponse.js
var require_GetOutreachFlowEmailPolicyResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/GetOutreachFlowEmailPolicyResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetOutreachFlowEmailPolicyResponse = void 0;
    var GetOutreachFlowEmailPolicyResponse;
    (function(GetOutreachFlowEmailPolicyResponse2) {
      let stage;
      (function(stage2) {
        stage2["INITIAL_INVITE"] = "initialInvite";
        stage2["DIDNT_OPEN_OFFER_PAGE"] = "didntOpenOfferPage";
        stage2["OPENED_OFFER_PAGE"] = "openedOfferPage";
        stage2["FINISHED_RUNNING"] = "finishedRunning";
        stage2["RUNNING"] = "running";
      })(stage = GetOutreachFlowEmailPolicyResponse2.stage || (GetOutreachFlowEmailPolicyResponse2.stage = {}));
      let emailDeliveryPlatform;
      (function(emailDeliveryPlatform2) {
        emailDeliveryPlatform2["SENDGRID"] = "sendgrid";
        emailDeliveryPlatform2["MIXMAX"] = "mixmax";
      })(emailDeliveryPlatform = GetOutreachFlowEmailPolicyResponse2.emailDeliveryPlatform || (GetOutreachFlowEmailPolicyResponse2.emailDeliveryPlatform = {}));
      let recipient;
      (function(recipient2) {
        recipient2["DIRECT"] = "direct";
        recipient2["AGENCY"] = "agency";
      })(recipient = GetOutreachFlowEmailPolicyResponse2.recipient || (GetOutreachFlowEmailPolicyResponse2.recipient = {}));
    })(GetOutreachFlowEmailPolicyResponse = exports2.GetOutreachFlowEmailPolicyResponse || (exports2.GetOutreachFlowEmailPolicyResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/GiftCardResponse.js
var require_GiftCardResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/GiftCardResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GiftCardResponse = void 0;
    var GiftCardResponse;
    (function(GiftCardResponse2) {
      let type;
      (function(type2) {
        type2["TWITCH_FR"] = "twitch_fr";
      })(type = GiftCardResponse2.type || (GiftCardResponse2.type = {}));
    })(GiftCardResponse = exports2.GiftCardResponse || (exports2.GiftCardResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/GroupSearchResultItem.js
var require_GroupSearchResultItem = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/GroupSearchResultItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GroupSearchResultItem = void 0;
    var GroupSearchResultItem;
    (function(GroupSearchResultItem2) {
      let status;
      (function(status2) {
        status2["DRAFT"] = "draft";
        status2["ACTIVE"] = "active";
        status2["COMPLETED"] = "completed";
      })(status = GroupSearchResultItem2.status || (GroupSearchResultItem2.status = {}));
    })(GroupSearchResultItem = exports2.GroupSearchResultItem || (exports2.GroupSearchResultItem = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/IncidentResponse.js
var require_IncidentResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/IncidentResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IncidentResponse = void 0;
    var IncidentResponse;
    (function(IncidentResponse2) {
      let type;
      (function(type2) {
        type2["NO_BUDGET_SETUP"] = "no_budget_setup";
        type2["LOW_DAILY_STARTS"] = "low_daily_starts";
        type2["PREDICTED_REVENUE_LOW"] = "predicted_revenue_low";
        type2["OVERPERFORMANCE"] = "overperformance";
      })(type = IncidentResponse2.type || (IncidentResponse2.type = {}));
      let state;
      (function(state2) {
        state2["OPEN"] = "open";
        state2["IN_PROGRESS"] = "in_progress";
        state2["CLOSED"] = "closed";
      })(state = IncidentResponse2.state || (IncidentResponse2.state = {}));
      let priority;
      (function(priority2) {
        priority2["CRITICAL"] = "critical";
        priority2["HIGH"] = "high";
        priority2["MEDIUM"] = "medium";
        priority2["LOW"] = "low";
      })(priority = IncidentResponse2.priority || (IncidentResponse2.priority = {}));
    })(IncidentResponse = exports2.IncidentResponse || (exports2.IncidentResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/InitCreatorsPayload.js
var require_InitCreatorsPayload = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/InitCreatorsPayload.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InitCreatorsPayload = void 0;
    var InitCreatorsPayload;
    (function(InitCreatorsPayload2) {
      let emailType;
      (function(emailType2) {
        emailType2["DIGEST"] = "digest";
        emailType2["SPECIAL"] = "special";
        emailType2["NOTIFY_ME"] = "notifyMe";
        emailType2["REMINDER"] = "reminder";
        emailType2["OUTREACH"] = "outreach";
        emailType2["MANUAL_OUTREACH"] = "manualOutreach";
        emailType2["OTHER"] = "other";
        emailType2["AGENCY_CREATOR_JOINS"] = "agencyCreatorJoins";
        emailType2["AGENCY_CREATOR_LEAVES_BY_AGENT"] = "agencyCreatorLeavesByAgent";
        emailType2["AGENCY_CREATOR_LEAVES_BY_CREATOR"] = "agencyCreatorLeavesByCreator";
        emailType2["AGENCY_START_DEPLOYMENT"] = "agencyStartDeployment";
        emailType2["AGENCY_DIGEST"] = "agencyDigest";
        emailType2["ABUSE"] = "abuse";
        emailType2["REMINDER_COMPLETE_SETUP"] = "reminderCompleteSetup";
        emailType2["REMINDER_START_STREAMING"] = "reminderStartStreaming";
        emailType2["REMINDER_GET_CLICKS"] = "reminderGetClicks";
        emailType2["REMINDER_GET_ENGAGEMENT"] = "reminderGetEngagement";
        emailType2["REMINDER_GET_RESULTS"] = "reminderGetResults";
        emailType2["REMINDER_DONT_FORGET_SETUP"] = "reminderDontForgetSetup";
        emailType2["REMINDER_GET_EVENTS"] = "reminderGetEvents";
        emailType2["REMINDER_COMPLETE_SETUP_SEVERE"] = "reminderCompleteSetupSevere";
        emailType2["REMINDER_START_STREAMING_SEVERE"] = "reminderStartStreamingSevere";
        emailType2["REMINDER_GET_STARTED"] = "reminderGetStarted";
        emailType2["NOTIFICATION"] = "notification";
        emailType2["MARKETING"] = "marketing";
      })(emailType = InitCreatorsPayload2.emailType || (InitCreatorsPayload2.emailType = {}));
      let emailGroup;
      (function(emailGroup2) {
        emailGroup2["SUNDAY_MORNING"] = "sunday_morning";
        emailGroup2["SUNDAY_EVENING"] = "sunday_evening";
        emailGroup2["MONDAY_MORNING"] = "monday_morning";
        emailGroup2["MONDAY_EVENING"] = "monday_evening";
        emailGroup2["TUESDAY_MORNING"] = "tuesday_morning";
        emailGroup2["TUESDAY_EVENING"] = "tuesday_evening";
        emailGroup2["WEDNESDAY_MORNING"] = "wednesday_morning";
        emailGroup2["WEDNESDAY_EVENING"] = "wednesday_evening";
        emailGroup2["THURSDAY_MORNING"] = "thursday_morning";
        emailGroup2["THURSDAY_EVENING"] = "thursday_evening";
        emailGroup2["FRIDAY_MORNING"] = "friday_morning";
        emailGroup2["FRIDAY_EVENING"] = "friday_evening";
        emailGroup2["SATURDAY_MORNING"] = "saturday_morning";
        emailGroup2["SATURDAY_EVENING"] = "saturday_evening";
      })(emailGroup = InitCreatorsPayload2.emailGroup || (InitCreatorsPayload2.emailGroup = {}));
    })(InitCreatorsPayload = exports2.InitCreatorsPayload || (exports2.InitCreatorsPayload = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/JsonDiff.js
var require_JsonDiff = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/JsonDiff.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.JsonDiff = void 0;
    var JsonDiff;
    (function(JsonDiff2) {
      let kind;
      (function(kind2) {
        kind2["N"] = "N";
        kind2["D"] = "D";
        kind2["E"] = "E";
        kind2["A"] = "A";
      })(kind = JsonDiff2.kind || (JsonDiff2.kind = {}));
    })(JsonDiff = exports2.JsonDiff || (exports2.JsonDiff = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/KycSessionResponse.js
var require_KycSessionResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/KycSessionResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.KycSessionResponse = void 0;
    var KycSessionResponse;
    (function(KycSessionResponse2) {
      let provider;
      (function(provider2) {
        provider2["AU10TIX"] = "au10tix";
      })(provider = KycSessionResponse2.provider || (KycSessionResponse2.provider = {}));
      let status;
      (function(status2) {
        status2["PENDING"] = "pending";
        status2["PASSED"] = "passed";
        status2["FAILED"] = "failed";
        status2["INCONCLUSIVE"] = "inconclusive";
        status2["EXPIRED"] = "expired";
      })(status = KycSessionResponse2.status || (KycSessionResponse2.status = {}));
      let failureReason;
      (function(failureReason2) {
        failureReason2["FAILED_BY_PROVIDER"] = "failed_by_provider";
        failureReason2["DUPLICATE"] = "duplicate";
        failureReason2["MANUAL_REVIEW"] = "manual_review";
      })(failureReason = KycSessionResponse2.failureReason || (KycSessionResponse2.failureReason = {}));
    })(KycSessionResponse = exports2.KycSessionResponse || (exports2.KycSessionResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/ManualTemplateResponse.js
var require_ManualTemplateResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/ManualTemplateResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ManualTemplateResponse = void 0;
    var ManualTemplateResponse;
    (function(ManualTemplateResponse2) {
      let recipient;
      (function(recipient2) {
        recipient2["DIRECT"] = "direct";
        recipient2["AGENCY"] = "agency";
      })(recipient = ManualTemplateResponse2.recipient || (ManualTemplateResponse2.recipient = {}));
    })(ManualTemplateResponse = exports2.ManualTemplateResponse || (exports2.ManualTemplateResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/ManualTestEmailPayload.js
var require_ManualTestEmailPayload = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/ManualTestEmailPayload.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ManualTestEmailPayload = void 0;
    var ManualTestEmailPayload;
    (function(ManualTestEmailPayload2) {
      let emailType;
      (function(emailType2) {
        emailType2["DIGEST"] = "digest";
        emailType2["SPECIAL"] = "special";
        emailType2["NOTIFY_ME"] = "notifyMe";
        emailType2["REMINDER"] = "reminder";
        emailType2["OUTREACH"] = "outreach";
        emailType2["MANUAL_OUTREACH"] = "manualOutreach";
        emailType2["OTHER"] = "other";
        emailType2["AGENCY_CREATOR_JOINS"] = "agencyCreatorJoins";
        emailType2["AGENCY_CREATOR_LEAVES_BY_AGENT"] = "agencyCreatorLeavesByAgent";
        emailType2["AGENCY_CREATOR_LEAVES_BY_CREATOR"] = "agencyCreatorLeavesByCreator";
        emailType2["AGENCY_START_DEPLOYMENT"] = "agencyStartDeployment";
        emailType2["AGENCY_DIGEST"] = "agencyDigest";
        emailType2["ABUSE"] = "abuse";
        emailType2["REMINDER_COMPLETE_SETUP"] = "reminderCompleteSetup";
        emailType2["REMINDER_START_STREAMING"] = "reminderStartStreaming";
        emailType2["REMINDER_GET_CLICKS"] = "reminderGetClicks";
        emailType2["REMINDER_GET_ENGAGEMENT"] = "reminderGetEngagement";
        emailType2["REMINDER_GET_RESULTS"] = "reminderGetResults";
        emailType2["REMINDER_DONT_FORGET_SETUP"] = "reminderDontForgetSetup";
        emailType2["REMINDER_GET_EVENTS"] = "reminderGetEvents";
        emailType2["REMINDER_COMPLETE_SETUP_SEVERE"] = "reminderCompleteSetupSevere";
        emailType2["REMINDER_START_STREAMING_SEVERE"] = "reminderStartStreamingSevere";
        emailType2["REMINDER_GET_STARTED"] = "reminderGetStarted";
        emailType2["NOTIFICATION"] = "notification";
        emailType2["MARKETING"] = "marketing";
      })(emailType = ManualTestEmailPayload2.emailType || (ManualTestEmailPayload2.emailType = {}));
    })(ManualTestEmailPayload = exports2.ManualTestEmailPayload || (exports2.ManualTestEmailPayload = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/OfferCongifuration.js
var require_OfferCongifuration = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/OfferCongifuration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.OfferCongifuration = void 0;
    var OfferCongifuration;
    (function(OfferCongifuration2) {
      let device;
      (function(device2) {
        device2["DESKTOP"] = "desktop";
        device2["MOBILE"] = "mobile";
        device2["BOTH"] = "both";
        device2["IOS_ONLY"] = "iosOnly";
        device2["ANDROID_ONLY"] = "androidOnly";
      })(device = OfferCongifuration2.device || (OfferCongifuration2.device = {}));
    })(OfferCongifuration = exports2.OfferCongifuration || (exports2.OfferCongifuration = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/OutreachLogResponse.js
var require_OutreachLogResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/OutreachLogResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.OutreachLogResponse = void 0;
    var OutreachLogResponse;
    (function(OutreachLogResponse2) {
      let method;
      (function(method2) {
        method2["MANUAL"] = "manual";
        method2["AUTOMATIC"] = "automatic";
      })(method = OutreachLogResponse2.method || (OutreachLogResponse2.method = {}));
      let target;
      (function(target2) {
        target2["DIRECT"] = "direct";
        target2["AGENCY"] = "agency";
      })(target = OutreachLogResponse2.target || (OutreachLogResponse2.target = {}));
      let medium;
      (function(medium2) {
        medium2["EMAIL"] = "email";
        medium2["DISCORD"] = "discord";
      })(medium = OutreachLogResponse2.medium || (OutreachLogResponse2.medium = {}));
    })(OutreachLogResponse = exports2.OutreachLogResponse || (exports2.OutreachLogResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/Payout.js
var require_Payout = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/Payout.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Payout = void 0;
    var Payout;
    (function(Payout2) {
      let status;
      (function(status2) {
        status2["UNKNOWN"] = "unknown";
        status2["AWAITING_APPROVAL"] = "awaiting_approval";
        status2["APPROVED"] = "approved";
        status2["REJECTED"] = "rejected";
        status2["PROCESSING"] = "processing";
        status2["PAID"] = "paid";
        status2["FAILED"] = "failed";
      })(status = Payout2.status || (Payout2.status = {}));
    })(Payout = exports2.Payout || (exports2.Payout = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/PrepareAgencyEmailPayload.js
var require_PrepareAgencyEmailPayload = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/PrepareAgencyEmailPayload.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PrepareAgencyEmailPayload = void 0;
    var PrepareAgencyEmailPayload;
    (function(PrepareAgencyEmailPayload2) {
      let emailType;
      (function(emailType2) {
        emailType2["DIGEST"] = "digest";
        emailType2["SPECIAL"] = "special";
        emailType2["NOTIFY_ME"] = "notifyMe";
        emailType2["REMINDER"] = "reminder";
        emailType2["OUTREACH"] = "outreach";
        emailType2["MANUAL_OUTREACH"] = "manualOutreach";
        emailType2["OTHER"] = "other";
        emailType2["AGENCY_CREATOR_JOINS"] = "agencyCreatorJoins";
        emailType2["AGENCY_CREATOR_LEAVES_BY_AGENT"] = "agencyCreatorLeavesByAgent";
        emailType2["AGENCY_CREATOR_LEAVES_BY_CREATOR"] = "agencyCreatorLeavesByCreator";
        emailType2["AGENCY_START_DEPLOYMENT"] = "agencyStartDeployment";
        emailType2["AGENCY_DIGEST"] = "agencyDigest";
        emailType2["ABUSE"] = "abuse";
        emailType2["REMINDER_COMPLETE_SETUP"] = "reminderCompleteSetup";
        emailType2["REMINDER_START_STREAMING"] = "reminderStartStreaming";
        emailType2["REMINDER_GET_CLICKS"] = "reminderGetClicks";
        emailType2["REMINDER_GET_ENGAGEMENT"] = "reminderGetEngagement";
        emailType2["REMINDER_GET_RESULTS"] = "reminderGetResults";
        emailType2["REMINDER_DONT_FORGET_SETUP"] = "reminderDontForgetSetup";
        emailType2["REMINDER_GET_EVENTS"] = "reminderGetEvents";
        emailType2["REMINDER_COMPLETE_SETUP_SEVERE"] = "reminderCompleteSetupSevere";
        emailType2["REMINDER_START_STREAMING_SEVERE"] = "reminderStartStreamingSevere";
        emailType2["REMINDER_GET_STARTED"] = "reminderGetStarted";
        emailType2["NOTIFICATION"] = "notification";
        emailType2["MARKETING"] = "marketing";
      })(emailType = PrepareAgencyEmailPayload2.emailType || (PrepareAgencyEmailPayload2.emailType = {}));
      let digestFrequency;
      (function(digestFrequency2) {
        digestFrequency2["DAILY"] = "daily";
        digestFrequency2["WEEKLY"] = "weekly";
      })(digestFrequency = PrepareAgencyEmailPayload2.digestFrequency || (PrepareAgencyEmailPayload2.digestFrequency = {}));
    })(PrepareAgencyEmailPayload = exports2.PrepareAgencyEmailPayload || (exports2.PrepareAgencyEmailPayload = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/PricingClusterRule.js
var require_PricingClusterRule = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/PricingClusterRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PricingClusterRule = void 0;
    var PricingClusterRule;
    (function(PricingClusterRule2) {
      let field;
      (function(field2) {
        field2["KRONOS_ZERO_EVENT_COUNT"] = "kronos_zero_event_count";
        field2["KRONOS_DEPOSITS_PROB"] = "kronos_deposits_prob";
        field2["KRONOS_ZERO_EVENT_PROB"] = "kronos_zero_event_prob";
        field2["CCV_L30D"] = "ccv_l30d";
        field2["COUNTRY_US"] = "country_us";
        field2["COUNTRY_EN"] = "country_en";
        field2["LANGUAGE_EN"] = "language_en";
        field2["TIER"] = "tier";
        field2["AVG_DPS"] = "avg_dps";
      })(field = PricingClusterRule2.field || (PricingClusterRule2.field = {}));
      let condition;
      (function(condition2) {
        condition2["EQUAL"] = "equal";
        condition2["GREATER_THAN"] = "greater_than";
        condition2["LESS_THAN"] = "less_than";
        condition2["GREATER_THAN_OR_EQUAL"] = "greater_than_or_equal";
        condition2["LESS_THAN_OR_EQUAL"] = "less_than_or_equal";
        condition2["NOT_EQUAL"] = "not_equal";
      })(condition = PricingClusterRule2.condition || (PricingClusterRule2.condition = {}));
    })(PricingClusterRule = exports2.PricingClusterRule || (exports2.PricingClusterRule = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/PublicSponsorshipResponse.js
var require_PublicSponsorshipResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/PublicSponsorshipResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PublicSponsorshipResponse = void 0;
    var PublicSponsorshipResponse;
    (function(PublicSponsorshipResponse2) {
      let state;
      (function(state2) {
        state2["HIDDEN"] = "hidden";
        state2["NEW"] = "new";
        state2["VIEWED"] = "viewed";
        state2["REQUIREMENTS"] = "requirements";
        state2["SETUP"] = "setup";
        state2["READY"] = "ready";
        state2["READY_SOON"] = "ready_soon";
        state2["RUNNING"] = "running";
        state2["PENDING_REVIEW"] = "pending_review";
        state2["PAYMENT_SETUP"] = "payment_setup";
        state2["PAYMENT_SCHEDULED"] = "payment_scheduled";
        state2["COMPLETED"] = "completed";
        state2["EXPIRED"] = "expired";
        state2["REJECTED"] = "rejected";
        state2["CANCELED"] = "canceled";
        state2["FAILED_TO_MEET_GOALS"] = "failed_to_meet_goals";
        state2["READY_FOR_TRACKING"] = "ready_for_tracking";
        state2["APPROVED"] = "approved";
      })(state = PublicSponsorshipResponse2.state || (PublicSponsorshipResponse2.state = {}));
      let platformType;
      (function(platformType2) {
        platformType2["TWITCH"] = "twitch";
        platformType2["YOUTUBE"] = "youtube";
        platformType2["TIKTOK"] = "tiktok";
      })(platformType = PublicSponsorshipResponse2.platformType || (PublicSponsorshipResponse2.platformType = {}));
      let advertiserCluster;
      (function(advertiserCluster2) {
        advertiserCluster2["CASUAL_MOBILE_PARTY_AND_MULTIPLAYER_GAMES"] = "Casual / Mobile / Party and Multiplayer Games";
        advertiserCluster2["FIGHTING_AND_SPORTS_GAMES"] = "Fighting and Sports Games";
        advertiserCluster2["NON_GAMING"] = "Non-Gaming";
        advertiserCluster2["RPGS_AND_STORY_DRIVEN_GAMES"] = "RPGs and Story-Driven Games";
        advertiserCluster2["SHOOTER_GAMES_FPS_TPS_"] = "Shooter Games (FPS/TPS)";
        advertiserCluster2["STRATEGY_AND_TACTICAL_GAMES"] = "Strategy and Tactical Games";
        advertiserCluster2["SURVIVAL_AND_HORROR_GAMES"] = "Survival and Horror Games";
        advertiserCluster2["OTHER"] = "Other";
      })(advertiserCluster = PublicSponsorshipResponse2.advertiserCluster || (PublicSponsorshipResponse2.advertiserCluster = {}));
    })(PublicSponsorshipResponse = exports2.PublicSponsorshipResponse || (exports2.PublicSponsorshipResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/SearchColumnMetadata.js
var require_SearchColumnMetadata = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/SearchColumnMetadata.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SearchColumnMetadata = void 0;
    var SearchColumnMetadata;
    (function(SearchColumnMetadata2) {
      let type;
      (function(type2) {
        type2["STRING"] = "string";
        type2["ENUM"] = "enum";
        type2["NUMBER"] = "number";
        type2["DATE"] = "date";
        type2["BOOLEAN"] = "boolean";
        type2["CURRENCY"] = "currency";
        type2["PERCENT"] = "percent";
        type2["UUID"] = "uuid";
        type2["JSONB"] = "jsonb";
        type2["JSONB_PATH"] = "jsonbPath";
        type2["EXPRESSION"] = "expression";
      })(type = SearchColumnMetadata2.type || (SearchColumnMetadata2.type = {}));
      let filterType;
      (function(filterType2) {
        filterType2["STRING"] = "string";
        filterType2["ENUM"] = "enum";
        filterType2["NUMBER"] = "number";
        filterType2["DATE"] = "date";
        filterType2["BOOLEAN"] = "boolean";
        filterType2["CURRENCY"] = "currency";
        filterType2["PERCENT"] = "percent";
        filterType2["UUID"] = "uuid";
        filterType2["JSONB"] = "jsonb";
        filterType2["JSONB_PATH"] = "jsonbPath";
        filterType2["EXPRESSION"] = "expression";
      })(filterType = SearchColumnMetadata2.filterType || (SearchColumnMetadata2.filterType = {}));
    })(SearchColumnMetadata = exports2.SearchColumnMetadata || (exports2.SearchColumnMetadata = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/SearchFilter.js
var require_SearchFilter = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/SearchFilter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SearchFilter = void 0;
    var SearchFilter;
    (function(SearchFilter2) {
      let operator;
      (function(operator2) {
        operator2["LT"] = "lt";
        operator2["LTE"] = "lte";
        operator2["EQ"] = "eq";
        operator2["NEQ"] = "neq";
        operator2["GT"] = "gt";
        operator2["GTE"] = "gte";
        operator2["IN"] = "in";
        operator2["IS_EMPTY"] = "isEmpty";
        operator2["NOT_IS_EMPTY"] = "notIsEmpty";
        operator2["CONTAINS"] = "contains";
        operator2["JSON_CONTAINS"] = "jsonContains";
        operator2["NOT_CONTAINS"] = "notContains";
      })(operator = SearchFilter2.operator || (SearchFilter2.operator = {}));
    })(SearchFilter = exports2.SearchFilter || (exports2.SearchFilter = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/SearchMappingResponse.js
var require_SearchMappingResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/SearchMappingResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SearchMappingResponse = void 0;
    var SearchMappingResponse;
    (function(SearchMappingResponse2) {
      let index;
      (function(index2) {
        index2["ADVERTISERS"] = "advertisers";
        index2["ACCOUNTS"] = "accounts";
        index2["CAMPAIGNS"] = "campaigns";
        index2["GROUPS"] = "groups";
        index2["DEPLOYMENTS"] = "deployments";
        index2["VIEWERS_DEPLOYMENTS"] = "viewers-deployments";
        index2["VIEWERS_PROFILES"] = "viewers-profiles";
      })(index = SearchMappingResponse2.index || (SearchMappingResponse2.index = {}));
    })(SearchMappingResponse = exports2.SearchMappingResponse || (exports2.SearchMappingResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/SearchResultResponse.js
var require_SearchResultResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/SearchResultResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SearchResultResponse = void 0;
    var SearchResultResponse;
    (function(SearchResultResponse2) {
      let index;
      (function(index2) {
        index2["ADVERTISERS"] = "advertisers";
        index2["ACCOUNTS"] = "accounts";
        index2["CAMPAIGNS"] = "campaigns";
        index2["GROUPS"] = "groups";
        index2["DEPLOYMENTS"] = "deployments";
        index2["VIEWERS_DEPLOYMENTS"] = "viewers-deployments";
        index2["VIEWERS_PROFILES"] = "viewers-profiles";
      })(index = SearchResultResponse2.index || (SearchResultResponse2.index = {}));
    })(SearchResultResponse = exports2.SearchResultResponse || (exports2.SearchResultResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/SearchSortCriterion.js
var require_SearchSortCriterion = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/SearchSortCriterion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SearchSortCriterion = void 0;
    var SearchSortCriterion;
    (function(SearchSortCriterion2) {
      let direction;
      (function(direction2) {
        direction2["ASC"] = "asc";
        direction2["DESC"] = "desc";
      })(direction = SearchSortCriterion2.direction || (SearchSortCriterion2.direction = {}));
    })(SearchSortCriterion = exports2.SearchSortCriterion || (exports2.SearchSortCriterion = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/SearchTermsResponse.js
var require_SearchTermsResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/SearchTermsResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SearchTermsResponse = void 0;
    var SearchTermsResponse;
    (function(SearchTermsResponse2) {
      let index;
      (function(index2) {
        index2["ADVERTISERS"] = "advertisers";
        index2["ACCOUNTS"] = "accounts";
        index2["CAMPAIGNS"] = "campaigns";
        index2["GROUPS"] = "groups";
        index2["DEPLOYMENTS"] = "deployments";
        index2["VIEWERS_DEPLOYMENTS"] = "viewers-deployments";
        index2["VIEWERS_PROFILES"] = "viewers-profiles";
      })(index = SearchTermsResponse2.index || (SearchTermsResponse2.index = {}));
    })(SearchTermsResponse = exports2.SearchTermsResponse || (exports2.SearchTermsResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/SpendReportResponse.js
var require_SpendReportResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/SpendReportResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SpendReportResponse = void 0;
    var SpendReportResponse;
    (function(SpendReportResponse2) {
      let status;
      (function(status2) {
        status2["PENDING"] = "pending";
        status2["RUNNING"] = "running";
        status2["GENERATED"] = "generated";
      })(status = SpendReportResponse2.status || (SpendReportResponse2.status = {}));
    })(SpendReportResponse = exports2.SpendReportResponse || (exports2.SpendReportResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/SponsorshipDeliverableResponse.js
var require_SponsorshipDeliverableResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/SponsorshipDeliverableResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SponsorshipDeliverableResponse = void 0;
    var SponsorshipDeliverableResponse;
    (function(SponsorshipDeliverableResponse2) {
      let type;
      (function(type2) {
        type2["BOT_COMMAND"] = "botCommand";
        type2["BRIEF"] = "brief";
        type2["CONTRACT"] = "contract";
        type2["CREATOR_PAY_PER_EVENT"] = "creatorPayPerEvent";
        type2["LIVE_STREAM"] = "liveStream";
        type2["OVERLAY"] = "overlay";
        type2["PANEL_BANNER"] = "panelBanner";
        type2["PAY_PER_EVENT"] = "payPerEvent";
        type2["PAY_PER_EVENT_BRACKET"] = "payPerEventBracket";
        type2["PAY_PER_EVENT_COUNTRIES"] = "PayPerEventCountries";
        type2["CUSTOM"] = "custom";
        type2["DYNAMIC_DESCRIPTION_WIDGET"] = "dynamicDescriptionWidget";
        type2["TIK_TOK_CREATIVE"] = "tikTokCreative";
        type2["YOU_TUBE_VIDEO"] = "youTubeVideo";
        type2["MARKDOWN_BRIEF"] = "markdownBrief";
        type2["SUB_PER_EVENT"] = "subPerEvent";
      })(type = SponsorshipDeliverableResponse2.type || (SponsorshipDeliverableResponse2.type = {}));
      let status;
      (function(status2) {
        status2["INCOMPLETE"] = "incomplete";
        status2["BLOCKED"] = "blocked";
        status2["READY"] = "ready";
        status2["UNDER_NEGOTIATION"] = "underNegotiation";
        status2["GOAL_COMPLETE"] = "goalComplete";
        status2["GOAL_IN_PROGRESS"] = "goalInProgress";
        status2["MANUAL_OVERRIDE"] = "manualOverride";
        status2["PENDING_REVIEW"] = "pendingReview";
      })(status = SponsorshipDeliverableResponse2.status || (SponsorshipDeliverableResponse2.status = {}));
      let prerequisitesOperator;
      (function(prerequisitesOperator2) {
        prerequisitesOperator2["ALL"] = "all";
        prerequisitesOperator2["ANY"] = "any";
      })(prerequisitesOperator = SponsorshipDeliverableResponse2.prerequisitesOperator || (SponsorshipDeliverableResponse2.prerequisitesOperator = {}));
    })(SponsorshipDeliverableResponse = exports2.SponsorshipDeliverableResponse || (exports2.SponsorshipDeliverableResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/SponsorshipResponse.js
var require_SponsorshipResponse = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/SponsorshipResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SponsorshipResponse = void 0;
    var SponsorshipResponse;
    (function(SponsorshipResponse2) {
      let state;
      (function(state2) {
        state2["HIDDEN"] = "hidden";
        state2["NEW"] = "new";
        state2["VIEWED"] = "viewed";
        state2["REQUIREMENTS"] = "requirements";
        state2["SETUP"] = "setup";
        state2["READY"] = "ready";
        state2["READY_SOON"] = "ready_soon";
        state2["RUNNING"] = "running";
        state2["PENDING_REVIEW"] = "pending_review";
        state2["PAYMENT_SETUP"] = "payment_setup";
        state2["PAYMENT_SCHEDULED"] = "payment_scheduled";
        state2["COMPLETED"] = "completed";
        state2["EXPIRED"] = "expired";
        state2["REJECTED"] = "rejected";
        state2["CANCELED"] = "canceled";
        state2["FAILED_TO_MEET_GOALS"] = "failed_to_meet_goals";
        state2["READY_FOR_TRACKING"] = "ready_for_tracking";
        state2["APPROVED"] = "approved";
      })(state = SponsorshipResponse2.state || (SponsorshipResponse2.state = {}));
      let deploymentState;
      (function(deploymentState2) {
        deploymentState2["PENDING"] = "pending";
        deploymentState2["OUTREACHING"] = "outreaching";
        deploymentState2["OUTREACHED"] = "outreached";
        deploymentState2["VIEWED"] = "viewed";
        deploymentState2["ACCEPTED"] = "accepted";
        deploymentState2["RUNNING"] = "running";
        deploymentState2["ADJUSTMENT_APPROVAL"] = "adjustment_approval";
        deploymentState2["PAYMENT_PROCESSING"] = "payment_processing";
        deploymentState2["PAYMENT_FAILED"] = "payment_failed";
        deploymentState2["OUTREACH_TIMEOUT"] = "outreach_timeout";
        deploymentState2["OUTREACH_REJECTED"] = "outreach_rejected";
        deploymentState2["CANCELED"] = "canceled";
        deploymentState2["FAILED_TO_MEET_GOALS"] = "failed_to_meet_goals";
        deploymentState2["COMPLETED"] = "completed";
        deploymentState2["ABUSE_IDENTIFIED"] = "abuse_identified";
      })(deploymentState = SponsorshipResponse2.deploymentState || (SponsorshipResponse2.deploymentState = {}));
      let version;
      (function(version2) {
        version2["SESP"] = "sesp";
        version2["BOSS"] = "boss";
      })(version = SponsorshipResponse2.version || (SponsorshipResponse2.version = {}));
      let platformType;
      (function(platformType2) {
        platformType2["TWITCH"] = "twitch";
        platformType2["YOUTUBE"] = "youtube";
        platformType2["TIKTOK"] = "tiktok";
      })(platformType = SponsorshipResponse2.platformType || (SponsorshipResponse2.platformType = {}));
      let payoutDestination;
      (function(payoutDestination2) {
        payoutDestination2["DIRECT"] = "direct";
        payoutDestination2["AGENCY"] = "agency";
      })(payoutDestination = SponsorshipResponse2.payoutDestination || (SponsorshipResponse2.payoutDestination = {}));
      let progressReminder;
      (function(progressReminder2) {
        progressReminder2["NONE"] = "none";
        progressReminder2["REMINDER_GET_STARTED"] = "reminderGetStarted";
        progressReminder2["REMINDER_COMPLETE_SETUP"] = "reminderCompleteSetup";
        progressReminder2["REMINDER_START_STREAMING"] = "reminderStartStreaming";
        progressReminder2["REMINDER_GET_CLICKS"] = "reminderGetClicks";
        progressReminder2["REMINDER_GET_ENGAGEMENT"] = "reminderGetEngagement";
        progressReminder2["REMINDER_GET_RESULTS"] = "reminderGetResults";
        progressReminder2["REMINDER_DONT_FORGET_SETUP"] = "reminderDontForgetSetup";
        progressReminder2["REMINDER_GET_EVENTS"] = "reminderGetEvents";
        progressReminder2["REMINDER_COMPLETE_SETUP_SEVERE"] = "reminderCompleteSetupSevere";
        progressReminder2["REMINDER_START_STREAMING_SEVERE"] = "reminderStartStreamingSevere";
        progressReminder2["REMINDER_COMPLETE_SPONSORSHIP"] = "reminderCompleteSponsorship";
        progressReminder2["REMINDER_CPPEUNLOCKED"] = "reminderCPPEUnlocked";
      })(progressReminder = SponsorshipResponse2.progressReminder || (SponsorshipResponse2.progressReminder = {}));
      let advertiserCluster;
      (function(advertiserCluster2) {
        advertiserCluster2["CASUAL_MOBILE_PARTY_AND_MULTIPLAYER_GAMES"] = "Casual / Mobile / Party and Multiplayer Games";
        advertiserCluster2["FIGHTING_AND_SPORTS_GAMES"] = "Fighting and Sports Games";
        advertiserCluster2["NON_GAMING"] = "Non-Gaming";
        advertiserCluster2["RPGS_AND_STORY_DRIVEN_GAMES"] = "RPGs and Story-Driven Games";
        advertiserCluster2["SHOOTER_GAMES_FPS_TPS_"] = "Shooter Games (FPS/TPS)";
        advertiserCluster2["STRATEGY_AND_TACTICAL_GAMES"] = "Strategy and Tactical Games";
        advertiserCluster2["SURVIVAL_AND_HORROR_GAMES"] = "Survival and Horror Games";
        advertiserCluster2["OTHER"] = "Other";
      })(advertiserCluster = SponsorshipResponse2.advertiserCluster || (SponsorshipResponse2.advertiserCluster = {}));
    })(SponsorshipResponse = exports2.SponsorshipResponse || (exports2.SponsorshipResponse = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/StringCustomField.js
var require_StringCustomField = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/StringCustomField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StringCustomField = void 0;
    var StringCustomField;
    (function(StringCustomField2) {
      let fieldType;
      (function(fieldType2) {
        fieldType2["STRING"] = "string";
        fieldType2["INTEGER"] = "integer";
        fieldType2["BOOLEAN"] = "boolean";
      })(fieldType = StringCustomField2.fieldType || (StringCustomField2.fieldType = {}));
    })(StringCustomField = exports2.StringCustomField || (exports2.StringCustomField = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/SubPerEventGoalProgress.js
var require_SubPerEventGoalProgress = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/SubPerEventGoalProgress.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SubPerEventGoalProgress = void 0;
    var SubPerEventGoalProgress;
    (function(SubPerEventGoalProgress2) {
      let redeemState;
      (function(redeemState2) {
        redeemState2["BLOCKED"] = "blocked";
        redeemState2["PENDING_CREATOR"] = "pending_creator";
        redeemState2["REQUESTED"] = "requested";
        redeemState2["COMPLETED"] = "completed";
        redeemState2["QUEUED"] = "queued";
        redeemState2["FAILED"] = "failed";
      })(redeemState = SubPerEventGoalProgress2.redeemState || (SubPerEventGoalProgress2.redeemState = {}));
    })(SubPerEventGoalProgress = exports2.SubPerEventGoalProgress || (exports2.SubPerEventGoalProgress = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/Testimonial.js
var require_Testimonial = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/Testimonial.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Testimonial = void 0;
    var Testimonial;
    (function(Testimonial2) {
      let type;
      (function(type2) {
        type2["TWITCH_VIDEO"] = "twitchVideo";
        type2["INTERNAL_VIDEO"] = "internalVideo";
        type2["TEXT"] = "text";
      })(type = Testimonial2.type || (Testimonial2.type = {}));
    })(Testimonial = exports2.Testimonial || (exports2.Testimonial = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/TikTokCreativeChangeRequest.js
var require_TikTokCreativeChangeRequest = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/TikTokCreativeChangeRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TikTokCreativeChangeRequest = void 0;
    var TikTokCreativeChangeRequest;
    (function(TikTokCreativeChangeRequest2) {
      let reason;
      (function(reason2) {
        reason2["LANGUAGE"] = "language";
        reason2["FORMAT"] = "format";
        reason2["DURATION"] = "duration";
        reason2["DOS"] = "dos";
        reason2["DONTS"] = "donts";
        reason2["FIRM_RESTRICTIONS"] = "firm_restrictions";
        reason2["TONE"] = "tone";
        reason2["STYLE"] = "style";
        reason2["CTA"] = "cta";
        reason2["CTA_TIMING"] = "cta_timing";
        reason2["TALKING_POINTS"] = "talking_points";
        reason2["ASSET_USAGE"] = "asset_usage";
      })(reason = TikTokCreativeChangeRequest2.reason || (TikTokCreativeChangeRequest2.reason = {}));
    })(TikTokCreativeChangeRequest = exports2.TikTokCreativeChangeRequest || (exports2.TikTokCreativeChangeRequest = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/TikTokCreativeStateHistory.js
var require_TikTokCreativeStateHistory = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/TikTokCreativeStateHistory.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TikTokCreativeStateHistory = void 0;
    var TikTokCreativeStateHistory;
    (function(TikTokCreativeStateHistory2) {
      let state;
      (function(state2) {
        state2["AWAITING_FIRST_UPLAOD"] = "awaiting_first_uplaod";
        state2["STREAM_ELEMENTS_REJECTED"] = "stream_elements_rejected";
        state2["STREAM_ELEMENTS_REVIEW"] = "stream_elements_review";
        state2["STREAM_ELEMENTS_REQUESTED"] = "stream_elements_requested";
        state2["ADVERTISER_FLAG"] = "advertiser_flag";
        state2["ADVERTISER_REVIEW"] = "advertiser_review";
        state2["ADVERTISER_REQUESTED"] = "advertiser_requested";
        state2["CREATOR_REJECTED"] = "creator_rejected";
        state2["APPROVED"] = "approved";
        state2["UPLOADING"] = "uploading";
        state2["UPLOADED"] = "uploaded";
      })(state = TikTokCreativeStateHistory2.state || (TikTokCreativeStateHistory2.state = {}));
    })(TikTokCreativeStateHistory = exports2.TikTokCreativeStateHistory || (exports2.TikTokCreativeStateHistory = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/TikTokDeployment.js
var require_TikTokDeployment = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/TikTokDeployment.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TikTokDeployment = void 0;
    var TikTokDeployment;
    (function(TikTokDeployment2) {
      let state;
      (function(state2) {
        state2["PENDING"] = "pending";
        state2["OUTREACHING"] = "outreaching";
        state2["OUTREACHED"] = "outreached";
        state2["VIEWED"] = "viewed";
        state2["ACCEPTED"] = "accepted";
        state2["RUNNING"] = "running";
        state2["ADJUSTMENT_APPROVAL"] = "adjustment_approval";
        state2["PAYMENT_PROCESSING"] = "payment_processing";
        state2["PAYMENT_FAILED"] = "payment_failed";
        state2["OUTREACH_TIMEOUT"] = "outreach_timeout";
        state2["OUTREACH_REJECTED"] = "outreach_rejected";
        state2["CANCELED"] = "canceled";
        state2["FAILED_TO_MEET_GOALS"] = "failed_to_meet_goals";
        state2["COMPLETED"] = "completed";
        state2["ABUSE_IDENTIFIED"] = "abuse_identified";
      })(state = TikTokDeployment2.state || (TikTokDeployment2.state = {}));
    })(TikTokDeployment = exports2.TikTokDeployment || (exports2.TikTokDeployment = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/TikTokVideo.js
var require_TikTokVideo = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/TikTokVideo.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TikTokVideo = void 0;
    var TikTokVideo;
    (function(TikTokVideo2) {
      let type;
      (function(type2) {
        type2["WITH_MUSIC"] = "with_music";
        type2["WITHOUT_MUSIC"] = "without_music";
        type2["RAW"] = "raw";
      })(type = TikTokVideo2.type || (TikTokVideo2.type = {}));
    })(TikTokVideo = exports2.TikTokVideo || (exports2.TikTokVideo = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/TimelineEntry.js
var require_TimelineEntry = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/TimelineEntry.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TimelineEntry = void 0;
    var TimelineEntry;
    (function(TimelineEntry2) {
      let type;
      (function(type2) {
        type2["AUTO"] = "Auto";
        type2["MANUAL"] = "Manual";
        type2["CUSTOM"] = "Custom";
        type2["COMMENT"] = "Comment";
        type2["NOTE"] = "Note";
        type2["NOTE_COMMENT"] = "NoteComment";
        type2["DEPLOYMENT_STATE_CHANGED"] = "DeploymentStateChanged";
        type2["DEPLOYMENT_CONFIGURATION_CHANGED"] = "DeploymentConfigurationChanged";
        type2["DEPLOYMENT_DELIVERABLE_CONFIGURATION_CHANGED"] = "DeploymentDeliverableConfigurationChanged";
        type2["DEPLOYMENT_DELIVERABLE_CHANGED"] = "DeploymentDeliverableChanged";
        type2["DEPLOYMENT_OUTREACH"] = "DeploymentOutreach";
      })(type = TimelineEntry2.type || (TimelineEntry2.type = {}));
    })(TimelineEntry = exports2.TimelineEntry || (exports2.TimelineEntry = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/TimelineFieldsDeliverableMapping.js
var require_TimelineFieldsDeliverableMapping = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/TimelineFieldsDeliverableMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TimelineFieldsDeliverableMapping = void 0;
    var TimelineFieldsDeliverableMapping;
    (function(TimelineFieldsDeliverableMapping2) {
      let deliverableType;
      (function(deliverableType2) {
        deliverableType2["BOT_COMMAND"] = "botCommand";
        deliverableType2["BRIEF"] = "brief";
        deliverableType2["CONTRACT"] = "contract";
        deliverableType2["CREATOR_PAY_PER_EVENT"] = "creatorPayPerEvent";
        deliverableType2["LIVE_STREAM"] = "liveStream";
        deliverableType2["OVERLAY"] = "overlay";
        deliverableType2["PANEL_BANNER"] = "panelBanner";
        deliverableType2["PAY_PER_EVENT"] = "payPerEvent";
        deliverableType2["PAY_PER_EVENT_BRACKET"] = "payPerEventBracket";
        deliverableType2["PAY_PER_EVENT_COUNTRIES"] = "PayPerEventCountries";
        deliverableType2["CUSTOM"] = "custom";
        deliverableType2["DYNAMIC_DESCRIPTION_WIDGET"] = "dynamicDescriptionWidget";
        deliverableType2["TIK_TOK_CREATIVE"] = "tikTokCreative";
        deliverableType2["YOU_TUBE_VIDEO"] = "youTubeVideo";
        deliverableType2["MARKDOWN_BRIEF"] = "markdownBrief";
        deliverableType2["SUB_PER_EVENT"] = "subPerEvent";
      })(deliverableType = TimelineFieldsDeliverableMapping2.deliverableType || (TimelineFieldsDeliverableMapping2.deliverableType = {}));
    })(TimelineFieldsDeliverableMapping = exports2.TimelineFieldsDeliverableMapping || (exports2.TimelineFieldsDeliverableMapping = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/TimelineFieldsMapping.js
var require_TimelineFieldsMapping = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/TimelineFieldsMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TimelineFieldsMapping = void 0;
    var TimelineFieldsMapping;
    (function(TimelineFieldsMapping2) {
      let auditType;
      (function(auditType2) {
        auditType2["AUTO"] = "Auto";
        auditType2["MANUAL"] = "Manual";
        auditType2["CUSTOM"] = "Custom";
        auditType2["COMMENT"] = "Comment";
        auditType2["NOTE"] = "Note";
        auditType2["NOTE_COMMENT"] = "NoteComment";
        auditType2["DEPLOYMENT_STATE_CHANGED"] = "DeploymentStateChanged";
        auditType2["DEPLOYMENT_CONFIGURATION_CHANGED"] = "DeploymentConfigurationChanged";
        auditType2["DEPLOYMENT_DELIVERABLE_CONFIGURATION_CHANGED"] = "DeploymentDeliverableConfigurationChanged";
        auditType2["DEPLOYMENT_DELIVERABLE_CHANGED"] = "DeploymentDeliverableChanged";
        auditType2["DEPLOYMENT_OUTREACH"] = "DeploymentOutreach";
      })(auditType = TimelineFieldsMapping2.auditType || (TimelineFieldsMapping2.auditType = {}));
    })(TimelineFieldsMapping = exports2.TimelineFieldsMapping || (exports2.TimelineFieldsMapping = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/TriggerFields.js
var require_TriggerFields = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/TriggerFields.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TriggerFields = void 0;
    var TriggerFields;
    (function(TriggerFields2) {
      let trigger;
      (function(trigger2) {
        trigger2["DEPLOYMENT_UPDATE"] = "deploymentUpdate";
        trigger2["BOT_COMMAND_UPDATE"] = "botCommandUpdate";
        trigger2["BRIEF_UPDATE"] = "briefUpdate";
        trigger2["CONTRACT_UPDATE"] = "contractUpdate";
        trigger2["CREATOR_PAY_PER_EVENT_UPDATE"] = "creatorPayPerEventUpdate";
        trigger2["LIVE_STREAM_UPDATE"] = "liveStreamUpdate";
        trigger2["OVERLAY_UPDATE"] = "overlayUpdate";
        trigger2["PANEL_BANNER_UPDATE"] = "panelBannerUpdate";
        trigger2["PAY_PER_EVENT_UPDATE"] = "payPerEventUpdate";
        trigger2["PAY_PER_EVENT_BRACKET_UPDATE"] = "payPerEventBracketUpdate";
        trigger2["TIK_TOK_CREATIVE_UPDATE"] = "tikTokCreativeUpdate";
        trigger2["YOU_TUBE_VIDEO_UPDATE"] = "youTubeVideoUpdate";
        trigger2["MARKDOWN_BRIEF_UPDATE"] = "markdownBriefUpdate";
      })(trigger = TriggerFields2.trigger || (TriggerFields2.trigger = {}));
    })(TriggerFields = exports2.TriggerFields || (exports2.TriggerFields = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/UpdateFakeChannelPayload.js
var require_UpdateFakeChannelPayload = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/UpdateFakeChannelPayload.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateFakeChannelPayload = void 0;
    var UpdateFakeChannelPayload;
    (function(UpdateFakeChannelPayload2) {
      let spStanding;
      (function(spStanding2) {
        spStanding2["GOOD"] = "good";
        spStanding2["UNKNOWN"] = "unknown";
        spStanding2["SUSPECTED"] = "suspected";
        spStanding2["BANNED"] = "banned";
      })(spStanding = UpdateFakeChannelPayload2.spStanding || (UpdateFakeChannelPayload2.spStanding = {}));
    })(UpdateFakeChannelPayload = exports2.UpdateFakeChannelPayload || (exports2.UpdateFakeChannelPayload = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/UpdateOutreachEmailPolicyPayload.js
var require_UpdateOutreachEmailPolicyPayload = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/UpdateOutreachEmailPolicyPayload.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateOutreachEmailPolicyPayload = void 0;
    var UpdateOutreachEmailPolicyPayload;
    (function(UpdateOutreachEmailPolicyPayload2) {
      let stage;
      (function(stage2) {
        stage2["INITIAL_INVITE"] = "initialInvite";
        stage2["DIDNT_OPEN_OFFER_PAGE"] = "didntOpenOfferPage";
        stage2["OPENED_OFFER_PAGE"] = "openedOfferPage";
        stage2["FINISHED_RUNNING"] = "finishedRunning";
        stage2["RUNNING"] = "running";
      })(stage = UpdateOutreachEmailPolicyPayload2.stage || (UpdateOutreachEmailPolicyPayload2.stage = {}));
      let emailDeliveryPlatform;
      (function(emailDeliveryPlatform2) {
        emailDeliveryPlatform2["SENDGRID"] = "sendgrid";
        emailDeliveryPlatform2["MIXMAX"] = "mixmax";
      })(emailDeliveryPlatform = UpdateOutreachEmailPolicyPayload2.emailDeliveryPlatform || (UpdateOutreachEmailPolicyPayload2.emailDeliveryPlatform = {}));
      let language;
      (function(language2) {
        language2["EN"] = "en";
        language2["ES"] = "es";
        language2["RU"] = "ru";
        language2["DE"] = "de";
        language2["FR"] = "fr";
        language2["PT"] = "pt";
        language2["KO"] = "ko";
        language2["IT"] = "it";
        language2["TR"] = "tr";
        language2["PL"] = "pl";
        language2["PT_BR"] = "pt-BR";
      })(language = UpdateOutreachEmailPolicyPayload2.language || (UpdateOutreachEmailPolicyPayload2.language = {}));
      let recipient;
      (function(recipient2) {
        recipient2["DIRECT"] = "direct";
        recipient2["AGENCY"] = "agency";
      })(recipient = UpdateOutreachEmailPolicyPayload2.recipient || (UpdateOutreachEmailPolicyPayload2.recipient = {}));
    })(UpdateOutreachEmailPolicyPayload = exports2.UpdateOutreachEmailPolicyPayload || (exports2.UpdateOutreachEmailPolicyPayload = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/UtmPayload.js
var require_UtmPayload = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/UtmPayload.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UtmPayload = void 0;
    var UtmPayload;
    (function(UtmPayload2) {
      let action;
      (function(action2) {
        action2["START"] = "start";
        action2["VIEW"] = "view";
        action2["START_INTEREST"] = "start_interest";
        action2["VIEW_PROGRESS"] = "view_progress";
        action2["NOTIFY_ME"] = "notify_me";
        action2["SEND_EMAIL"] = "send_email";
        action2["EMAIL_OPEN"] = "email_open";
        action2["EMAIL_CLICK"] = "email_click";
        action2["TWITCH_REDIRECT"] = "twitch_redirect";
        action2["TWITCH_REDIRECT_FAILURE"] = "twitch_redirect_failure";
      })(action = UtmPayload2.action || (UtmPayload2.action = {}));
    })(UtmPayload = exports2.UtmPayload || (exports2.UtmPayload = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/VideoAsset.js
var require_VideoAsset = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/VideoAsset.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.VideoAsset = void 0;
    var VideoAsset;
    (function(VideoAsset2) {
      let type;
      (function(type2) {
        type2["YOU_TUBE_VIDEO"] = "youTubeVideo";
        type2["INTERNAL_VIDEO"] = "internalVideo";
        type2["TWITCH_VIDEO"] = "twitchVideo";
      })(type = VideoAsset2.type || (VideoAsset2.type = {}));
    })(VideoAsset = exports2.VideoAsset || (exports2.VideoAsset = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/WorkflowEngineDeploymentOutreach.js
var require_WorkflowEngineDeploymentOutreach = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/WorkflowEngineDeploymentOutreach.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WorkflowEngineDeploymentOutreach = void 0;
    var WorkflowEngineDeploymentOutreach;
    (function(WorkflowEngineDeploymentOutreach2) {
      let method;
      (function(method2) {
        method2["MANUAL"] = "manual";
        method2["AUTOMATIC"] = "automatic";
      })(method = WorkflowEngineDeploymentOutreach2.method || (WorkflowEngineDeploymentOutreach2.method = {}));
      let language;
      (function(language2) {
        language2["EN"] = "en";
        language2["ES"] = "es";
        language2["RU"] = "ru";
        language2["DE"] = "de";
        language2["FR"] = "fr";
        language2["PT"] = "pt";
        language2["KO"] = "ko";
        language2["IT"] = "it";
        language2["TR"] = "tr";
        language2["PL"] = "pl";
        language2["PT_BR"] = "pt-BR";
      })(language = WorkflowEngineDeploymentOutreach2.language || (WorkflowEngineDeploymentOutreach2.language = {}));
      let target;
      (function(target2) {
        target2["DIRECT"] = "direct";
        target2["AGENCY"] = "agency";
      })(target = WorkflowEngineDeploymentOutreach2.target || (WorkflowEngineDeploymentOutreach2.target = {}));
      let medium;
      (function(medium2) {
        medium2["EMAIL"] = "email";
        medium2["DISCORD"] = "discord";
      })(medium = WorkflowEngineDeploymentOutreach2.medium || (WorkflowEngineDeploymentOutreach2.medium = {}));
    })(WorkflowEngineDeploymentOutreach = exports2.WorkflowEngineDeploymentOutreach || (exports2.WorkflowEngineDeploymentOutreach = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/WorkflowStep.js
var require_WorkflowStep = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/WorkflowStep.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WorkflowStep = void 0;
    var WorkflowStep;
    (function(WorkflowStep2) {
      let type;
      (function(type2) {
        type2["CONDITION"] = "condition";
        type2["ACTION"] = "action";
        type2["DELAY"] = "delay";
      })(type = WorkflowStep2.type || (WorkflowStep2.type = {}));
    })(WorkflowStep = exports2.WorkflowStep || (exports2.WorkflowStep = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/WorkflowStepAction.js
var require_WorkflowStepAction = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/WorkflowStepAction.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WorkflowStepAction = void 0;
    var WorkflowStepAction;
    (function(WorkflowStepAction2) {
      let type;
      (function(type2) {
        type2["OUTREACH_SEND_GRID"] = "outreachSendGrid";
        type2["OUTREACH_MIX_MAX"] = "outreachMixMax";
        type2["CREATE_NOTIFICATION"] = "createNotification";
        type2["SEND_SLACK_MESSAGE"] = "sendSlackMessage";
        type2["SEND_EMAIL_REMINDER"] = "sendEmailReminder";
        type2["SEND_EMAIL_REMINDER_SEVERE"] = "sendEmailReminderSevere";
        type2["DETECT_ABUSE"] = "detectAbuse";
        type2["SEND_POST_START_EMAIL"] = "sendPostStartEmail";
        type2["UPDATE_SUB_PER_EVENT_STATUS"] = "updateSubPerEventStatus";
      })(type = WorkflowStepAction2.type || (WorkflowStepAction2.type = {}));
    })(WorkflowStepAction = exports2.WorkflowStepAction || (exports2.WorkflowStepAction = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/WorkflowStepDelay.js
var require_WorkflowStepDelay = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/WorkflowStepDelay.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WorkflowStepDelay = void 0;
    var WorkflowStepDelay;
    (function(WorkflowStepDelay2) {
      let type;
      (function(type2) {
        type2["FIXED"] = "fixed";
        type2["DEPLOYMENT_MIDDLE"] = "deploymentMiddle";
      })(type = WorkflowStepDelay2.type || (WorkflowStepDelay2.type = {}));
    })(WorkflowStepDelay = exports2.WorkflowStepDelay || (exports2.WorkflowStepDelay = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/WorkflowTemplateConfiguration.js
var require_WorkflowTemplateConfiguration = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/WorkflowTemplateConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WorkflowTemplateConfiguration = void 0;
    var WorkflowTemplateConfiguration;
    (function(WorkflowTemplateConfiguration2) {
      let paymentEligibility;
      (function(paymentEligibility2) {
        paymentEligibility2["AUTOMATIC"] = "automatic";
        paymentEligibility2["MANUAL"] = "manual";
      })(paymentEligibility = WorkflowTemplateConfiguration2.paymentEligibility || (WorkflowTemplateConfiguration2.paymentEligibility = {}));
    })(WorkflowTemplateConfiguration = exports2.WorkflowTemplateConfiguration || (exports2.WorkflowTemplateConfiguration = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/models/WorkflowTrigger.js
var require_WorkflowTrigger = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/models/WorkflowTrigger.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WorkflowTrigger = void 0;
    var WorkflowTrigger;
    (function(WorkflowTrigger2) {
      let operation;
      (function(operation2) {
        operation2["DEPLOYMENT_UPDATE"] = "deploymentUpdate";
        operation2["BOT_COMMAND_UPDATE"] = "botCommandUpdate";
        operation2["BRIEF_UPDATE"] = "briefUpdate";
        operation2["CONTRACT_UPDATE"] = "contractUpdate";
        operation2["CREATOR_PAY_PER_EVENT_UPDATE"] = "creatorPayPerEventUpdate";
        operation2["LIVE_STREAM_UPDATE"] = "liveStreamUpdate";
        operation2["OVERLAY_UPDATE"] = "overlayUpdate";
        operation2["PANEL_BANNER_UPDATE"] = "panelBannerUpdate";
        operation2["PAY_PER_EVENT_UPDATE"] = "payPerEventUpdate";
        operation2["PAY_PER_EVENT_BRACKET_UPDATE"] = "payPerEventBracketUpdate";
        operation2["TIK_TOK_CREATIVE_UPDATE"] = "tikTokCreativeUpdate";
        operation2["YOU_TUBE_VIDEO_UPDATE"] = "youTubeVideoUpdate";
        operation2["MARKDOWN_BRIEF_UPDATE"] = "markdownBriefUpdate";
      })(operation = WorkflowTrigger2.operation || (WorkflowTrigger2.operation = {}));
    })(WorkflowTrigger = exports2.WorkflowTrigger || (exports2.WorkflowTrigger = {}));
  }
});

// node_modules/@streamelements/mad-men-axios-sdk/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/@streamelements/mad-men-axios-sdk/lib/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeploymentStateChanged = exports2.DeploymentResponse = exports2.DeploymentOutreach = exports2.DeploymentFraudResponse = exports2.DeploymentDeliverableChanged = exports2.DeploymentConfigurationChanged = exports2.DeploymentAdvertiserEventResponse = exports2.DeliverableSearchResultItem = exports2.DeliverableResponse = exports2.DeliverablePreviewResponse = exports2.DeliverableOverrideParam = exports2.CustomField = exports2.CustomColumn = exports2.CreatorIntentResponse = exports2.CreatorIntentCreateInput = exports2.CreateOutreachEmailPolicyPayload = exports2.CreateIncidentPayload = exports2.CreateGiftCardPayload = exports2.CreateEmailPayload = exports2.ContractDeliverableOverride = exports2.CampaignSearchResultItem = exports2.CampaignResponse = exports2.CampaignGroupResponse = exports2.CampaignGroupRelationResponse = exports2.CampaignGroupEligibilityResponse = exports2.CampaignDeliverableParam = exports2.CampaignBudgetResponse = exports2.CampaignBudgetParam = exports2.CampaignBudgetOverviewResponse = exports2.CampaignBudgetGoal = exports2.BulkUpdateDeploymentsData = exports2.BulkUpdateDeploymentsAbuseData = exports2.BulkActionSearchPayload = exports2.BulkActionResponse = exports2.BulkActionEntryResponse = exports2.BlockingReason = exports2.AuditLogResponse = exports2.AgencySponsorshipsFilter = exports2.AgencyQueryParams = exports2.AgencyEmailPreferences = exports2.AgencyCreatorResponse = exports2.AdvertiserResponse = exports2.AddGroupDeliverableBody = exports2.AccountResponse = exports2.OpenAPI = exports2.CancelError = exports2.CancelablePromise = exports2.BaseHttpRequest = exports2.ApiError = exports2.Sponsorships = void 0;
    exports2.TimelineEntry = exports2.TikTokVideo = exports2.TikTokDeployment = exports2.TikTokCreativeStateHistory = exports2.TikTokCreativeChangeRequest = exports2.Testimonial = exports2.SubPerEventGoalProgress = exports2.StringCustomField = exports2.SponsorshipResponse = exports2.SponsorshipDeliverableResponse = exports2.SpendReportResponse = exports2.SearchTermsResponse = exports2.SearchSortCriterion = exports2.SearchResultResponse = exports2.SearchMappingResponse = exports2.SearchFilter = exports2.SearchColumnMetadata = exports2.PublicSponsorshipResponse = exports2.PricingClusterRule = exports2.PrepareAgencyEmailPayload = exports2.Payout = exports2.OutreachLogResponse = exports2.OfferCongifuration = exports2.ManualTestEmailPayload = exports2.ManualTemplateResponse = exports2.KycSessionResponse = exports2.JsonDiff = exports2.InitCreatorsPayload = exports2.IncidentResponse = exports2.GroupSearchResultItem = exports2.GiftCardResponse = exports2.GetOutreachFlowEmailPolicyResponse = exports2.FraudFlag = exports2.Filter = exports2.FileProcessResponse = exports2.Field = exports2.FakeChannelResponse = exports2.FakeChannelDeploymentResponse = exports2.ExampleVideoData = exports2.EventHooksResponse = exports2.EventHooks = exports2.EventConfigurationResponse = exports2.EventConfiguration = exports2.EventCalculationResponse = exports2.EventCalculation = exports2.EmailSettingResponse = exports2.EmailResponse = exports2.EmailLogResponse = exports2.EmailFailuresSegmentation = exports2.DeploymentUtmResponse = void 0;
    exports2.GroupsEligibilityService = exports2.GroupsService = exports2.GiftCardsService = exports2.FraudService = exports2.FileProcessService = exports2.FeaturesSettingsService = exports2.ExternalEventsService = exports2.ExperimentsService = exports2.EmailsService = exports2.EarningsService = exports2.DeploymentsFraudService = exports2.DeploymentsEligibilityService = exports2.DeploymentsDeliverablesService = exports2.DeploymentsAdvertiserEventsService = exports2.DeploymentsService = exports2.DeliverableTrackingService = exports2.DeliverablesService = exports2.CreatorsService = exports2.ConfigService = exports2.CampaignsStatsService = exports2.CampaignsExperimentsService = exports2.CampaignsService = exports2.CampaignPricingClustersService = exports2.CampaignGroupsRelationsService = exports2.CampaignBudgetsRegionalCpiService = exports2.CampaignBudgetsService = exports2.BulkActionsService = exports2.AuthService = exports2.AuditLogService = exports2.Au10TixService = exports2.AttributionService = exports2.AgenciesService = exports2.AdvertisersRegionService = exports2.AdvertisersBrandSafetyService = exports2.AdvertisersService = exports2.ActionsService = exports2.AccountsService = exports2.WorkflowTrigger = exports2.WorkflowTemplateConfiguration = exports2.WorkflowStepDelay = exports2.WorkflowStepAction = exports2.WorkflowStep = exports2.WorkflowEngineDeploymentOutreach = exports2.VideoAsset = exports2.UtmPayload = exports2.UpdateOutreachEmailPolicyPayload = exports2.UpdateFakeChannelPayload = exports2.TriggerFields = exports2.TimelineFieldsMapping = exports2.TimelineFieldsDeliverableMapping = void 0;
    exports2.WorkflowAutomationService = exports2.ViewerService = exports2.TypesService = exports2.TwitchService = exports2.TimelineService = exports2.TikTokAdvertiserService = exports2.StatsService = exports2.SponsorshipsPreviewService = exports2.SponsorshipsService = exports2.SpendReportsService = exports2.ShareService = exports2.SendGridService = exports2.SearchService = exports2.PromoCodesService = exports2.PromoCodeListsService = exports2.PredictionsService = exports2.OverviewService = exports2.OutreachInfoService = exports2.OutreachService = exports2.NotesService = exports2.NoteCommentsService = exports2.MissingEventsService = exports2.ManualFlowService = exports2.ManagersService = exports2.LiveStreamsService = exports2.KycService = exports2.InternalOutreachService = exports2.InternalService = exports2.InfinityService = exports2.IncidentsService = exports2.I18NService = exports2.HellofreshService = exports2.HealthService = exports2.GroupsManualEligibilityService = void 0;
    var Sponsorships_1 = require_Sponsorships();
    Object.defineProperty(exports2, "Sponsorships", { enumerable: true, get: function() {
      return Sponsorships_1.Sponsorships;
    } });
    var ApiError_1 = require_ApiError2();
    Object.defineProperty(exports2, "ApiError", { enumerable: true, get: function() {
      return ApiError_1.ApiError;
    } });
    var BaseHttpRequest_1 = require_BaseHttpRequest2();
    Object.defineProperty(exports2, "BaseHttpRequest", { enumerable: true, get: function() {
      return BaseHttpRequest_1.BaseHttpRequest;
    } });
    var CancelablePromise_1 = require_CancelablePromise2();
    Object.defineProperty(exports2, "CancelablePromise", { enumerable: true, get: function() {
      return CancelablePromise_1.CancelablePromise;
    } });
    Object.defineProperty(exports2, "CancelError", { enumerable: true, get: function() {
      return CancelablePromise_1.CancelError;
    } });
    var OpenAPI_1 = require_OpenAPI2();
    Object.defineProperty(exports2, "OpenAPI", { enumerable: true, get: function() {
      return OpenAPI_1.OpenAPI;
    } });
    var AccountResponse_1 = require_AccountResponse();
    Object.defineProperty(exports2, "AccountResponse", { enumerable: true, get: function() {
      return AccountResponse_1.AccountResponse;
    } });
    var AddGroupDeliverableBody_1 = require_AddGroupDeliverableBody();
    Object.defineProperty(exports2, "AddGroupDeliverableBody", { enumerable: true, get: function() {
      return AddGroupDeliverableBody_1.AddGroupDeliverableBody;
    } });
    var AdvertiserResponse_1 = require_AdvertiserResponse();
    Object.defineProperty(exports2, "AdvertiserResponse", { enumerable: true, get: function() {
      return AdvertiserResponse_1.AdvertiserResponse;
    } });
    var AgencyCreatorResponse_1 = require_AgencyCreatorResponse();
    Object.defineProperty(exports2, "AgencyCreatorResponse", { enumerable: true, get: function() {
      return AgencyCreatorResponse_1.AgencyCreatorResponse;
    } });
    var AgencyEmailPreferences_1 = require_AgencyEmailPreferences();
    Object.defineProperty(exports2, "AgencyEmailPreferences", { enumerable: true, get: function() {
      return AgencyEmailPreferences_1.AgencyEmailPreferences;
    } });
    var AgencyQueryParams_1 = require_AgencyQueryParams();
    Object.defineProperty(exports2, "AgencyQueryParams", { enumerable: true, get: function() {
      return AgencyQueryParams_1.AgencyQueryParams;
    } });
    var AgencySponsorshipsFilter_1 = require_AgencySponsorshipsFilter();
    Object.defineProperty(exports2, "AgencySponsorshipsFilter", { enumerable: true, get: function() {
      return AgencySponsorshipsFilter_1.AgencySponsorshipsFilter;
    } });
    var AuditLogResponse_1 = require_AuditLogResponse2();
    Object.defineProperty(exports2, "AuditLogResponse", { enumerable: true, get: function() {
      return AuditLogResponse_1.AuditLogResponse;
    } });
    var BlockingReason_1 = require_BlockingReason();
    Object.defineProperty(exports2, "BlockingReason", { enumerable: true, get: function() {
      return BlockingReason_1.BlockingReason;
    } });
    var BulkActionEntryResponse_1 = require_BulkActionEntryResponse();
    Object.defineProperty(exports2, "BulkActionEntryResponse", { enumerable: true, get: function() {
      return BulkActionEntryResponse_1.BulkActionEntryResponse;
    } });
    var BulkActionResponse_1 = require_BulkActionResponse();
    Object.defineProperty(exports2, "BulkActionResponse", { enumerable: true, get: function() {
      return BulkActionResponse_1.BulkActionResponse;
    } });
    var BulkActionSearchPayload_1 = require_BulkActionSearchPayload();
    Object.defineProperty(exports2, "BulkActionSearchPayload", { enumerable: true, get: function() {
      return BulkActionSearchPayload_1.BulkActionSearchPayload;
    } });
    var BulkUpdateDeploymentsAbuseData_1 = require_BulkUpdateDeploymentsAbuseData();
    Object.defineProperty(exports2, "BulkUpdateDeploymentsAbuseData", { enumerable: true, get: function() {
      return BulkUpdateDeploymentsAbuseData_1.BulkUpdateDeploymentsAbuseData;
    } });
    var BulkUpdateDeploymentsData_1 = require_BulkUpdateDeploymentsData();
    Object.defineProperty(exports2, "BulkUpdateDeploymentsData", { enumerable: true, get: function() {
      return BulkUpdateDeploymentsData_1.BulkUpdateDeploymentsData;
    } });
    var CampaignBudgetGoal_1 = require_CampaignBudgetGoal();
    Object.defineProperty(exports2, "CampaignBudgetGoal", { enumerable: true, get: function() {
      return CampaignBudgetGoal_1.CampaignBudgetGoal;
    } });
    var CampaignBudgetOverviewResponse_1 = require_CampaignBudgetOverviewResponse();
    Object.defineProperty(exports2, "CampaignBudgetOverviewResponse", { enumerable: true, get: function() {
      return CampaignBudgetOverviewResponse_1.CampaignBudgetOverviewResponse;
    } });
    var CampaignBudgetParam_1 = require_CampaignBudgetParam();
    Object.defineProperty(exports2, "CampaignBudgetParam", { enumerable: true, get: function() {
      return CampaignBudgetParam_1.CampaignBudgetParam;
    } });
    var CampaignBudgetResponse_1 = require_CampaignBudgetResponse();
    Object.defineProperty(exports2, "CampaignBudgetResponse", { enumerable: true, get: function() {
      return CampaignBudgetResponse_1.CampaignBudgetResponse;
    } });
    var CampaignDeliverableParam_1 = require_CampaignDeliverableParam();
    Object.defineProperty(exports2, "CampaignDeliverableParam", { enumerable: true, get: function() {
      return CampaignDeliverableParam_1.CampaignDeliverableParam;
    } });
    var CampaignGroupEligibilityResponse_1 = require_CampaignGroupEligibilityResponse();
    Object.defineProperty(exports2, "CampaignGroupEligibilityResponse", { enumerable: true, get: function() {
      return CampaignGroupEligibilityResponse_1.CampaignGroupEligibilityResponse;
    } });
    var CampaignGroupRelationResponse_1 = require_CampaignGroupRelationResponse();
    Object.defineProperty(exports2, "CampaignGroupRelationResponse", { enumerable: true, get: function() {
      return CampaignGroupRelationResponse_1.CampaignGroupRelationResponse;
    } });
    var CampaignGroupResponse_1 = require_CampaignGroupResponse();
    Object.defineProperty(exports2, "CampaignGroupResponse", { enumerable: true, get: function() {
      return CampaignGroupResponse_1.CampaignGroupResponse;
    } });
    var CampaignResponse_1 = require_CampaignResponse();
    Object.defineProperty(exports2, "CampaignResponse", { enumerable: true, get: function() {
      return CampaignResponse_1.CampaignResponse;
    } });
    var CampaignSearchResultItem_1 = require_CampaignSearchResultItem();
    Object.defineProperty(exports2, "CampaignSearchResultItem", { enumerable: true, get: function() {
      return CampaignSearchResultItem_1.CampaignSearchResultItem;
    } });
    var ContractDeliverableOverride_1 = require_ContractDeliverableOverride();
    Object.defineProperty(exports2, "ContractDeliverableOverride", { enumerable: true, get: function() {
      return ContractDeliverableOverride_1.ContractDeliverableOverride;
    } });
    var CreateEmailPayload_1 = require_CreateEmailPayload();
    Object.defineProperty(exports2, "CreateEmailPayload", { enumerable: true, get: function() {
      return CreateEmailPayload_1.CreateEmailPayload;
    } });
    var CreateGiftCardPayload_1 = require_CreateGiftCardPayload();
    Object.defineProperty(exports2, "CreateGiftCardPayload", { enumerable: true, get: function() {
      return CreateGiftCardPayload_1.CreateGiftCardPayload;
    } });
    var CreateIncidentPayload_1 = require_CreateIncidentPayload();
    Object.defineProperty(exports2, "CreateIncidentPayload", { enumerable: true, get: function() {
      return CreateIncidentPayload_1.CreateIncidentPayload;
    } });
    var CreateOutreachEmailPolicyPayload_1 = require_CreateOutreachEmailPolicyPayload();
    Object.defineProperty(exports2, "CreateOutreachEmailPolicyPayload", { enumerable: true, get: function() {
      return CreateOutreachEmailPolicyPayload_1.CreateOutreachEmailPolicyPayload;
    } });
    var CreatorIntentCreateInput_1 = require_CreatorIntentCreateInput();
    Object.defineProperty(exports2, "CreatorIntentCreateInput", { enumerable: true, get: function() {
      return CreatorIntentCreateInput_1.CreatorIntentCreateInput;
    } });
    var CreatorIntentResponse_1 = require_CreatorIntentResponse();
    Object.defineProperty(exports2, "CreatorIntentResponse", { enumerable: true, get: function() {
      return CreatorIntentResponse_1.CreatorIntentResponse;
    } });
    var CustomColumn_1 = require_CustomColumn();
    Object.defineProperty(exports2, "CustomColumn", { enumerable: true, get: function() {
      return CustomColumn_1.CustomColumn;
    } });
    var CustomField_1 = require_CustomField();
    Object.defineProperty(exports2, "CustomField", { enumerable: true, get: function() {
      return CustomField_1.CustomField;
    } });
    var DeliverableOverrideParam_1 = require_DeliverableOverrideParam();
    Object.defineProperty(exports2, "DeliverableOverrideParam", { enumerable: true, get: function() {
      return DeliverableOverrideParam_1.DeliverableOverrideParam;
    } });
    var DeliverablePreviewResponse_1 = require_DeliverablePreviewResponse();
    Object.defineProperty(exports2, "DeliverablePreviewResponse", { enumerable: true, get: function() {
      return DeliverablePreviewResponse_1.DeliverablePreviewResponse;
    } });
    var DeliverableResponse_1 = require_DeliverableResponse();
    Object.defineProperty(exports2, "DeliverableResponse", { enumerable: true, get: function() {
      return DeliverableResponse_1.DeliverableResponse;
    } });
    var DeliverableSearchResultItem_1 = require_DeliverableSearchResultItem();
    Object.defineProperty(exports2, "DeliverableSearchResultItem", { enumerable: true, get: function() {
      return DeliverableSearchResultItem_1.DeliverableSearchResultItem;
    } });
    var DeploymentAdvertiserEventResponse_1 = require_DeploymentAdvertiserEventResponse();
    Object.defineProperty(exports2, "DeploymentAdvertiserEventResponse", { enumerable: true, get: function() {
      return DeploymentAdvertiserEventResponse_1.DeploymentAdvertiserEventResponse;
    } });
    var DeploymentConfigurationChanged_1 = require_DeploymentConfigurationChanged();
    Object.defineProperty(exports2, "DeploymentConfigurationChanged", { enumerable: true, get: function() {
      return DeploymentConfigurationChanged_1.DeploymentConfigurationChanged;
    } });
    var DeploymentDeliverableChanged_1 = require_DeploymentDeliverableChanged();
    Object.defineProperty(exports2, "DeploymentDeliverableChanged", { enumerable: true, get: function() {
      return DeploymentDeliverableChanged_1.DeploymentDeliverableChanged;
    } });
    var DeploymentFraudResponse_1 = require_DeploymentFraudResponse();
    Object.defineProperty(exports2, "DeploymentFraudResponse", { enumerable: true, get: function() {
      return DeploymentFraudResponse_1.DeploymentFraudResponse;
    } });
    var DeploymentOutreach_1 = require_DeploymentOutreach();
    Object.defineProperty(exports2, "DeploymentOutreach", { enumerable: true, get: function() {
      return DeploymentOutreach_1.DeploymentOutreach;
    } });
    var DeploymentResponse_1 = require_DeploymentResponse();
    Object.defineProperty(exports2, "DeploymentResponse", { enumerable: true, get: function() {
      return DeploymentResponse_1.DeploymentResponse;
    } });
    var DeploymentStateChanged_1 = require_DeploymentStateChanged();
    Object.defineProperty(exports2, "DeploymentStateChanged", { enumerable: true, get: function() {
      return DeploymentStateChanged_1.DeploymentStateChanged;
    } });
    var DeploymentUtmResponse_1 = require_DeploymentUtmResponse();
    Object.defineProperty(exports2, "DeploymentUtmResponse", { enumerable: true, get: function() {
      return DeploymentUtmResponse_1.DeploymentUtmResponse;
    } });
    var EmailFailuresSegmentation_1 = require_EmailFailuresSegmentation();
    Object.defineProperty(exports2, "EmailFailuresSegmentation", { enumerable: true, get: function() {
      return EmailFailuresSegmentation_1.EmailFailuresSegmentation;
    } });
    var EmailLogResponse_1 = require_EmailLogResponse();
    Object.defineProperty(exports2, "EmailLogResponse", { enumerable: true, get: function() {
      return EmailLogResponse_1.EmailLogResponse;
    } });
    var EmailResponse_1 = require_EmailResponse();
    Object.defineProperty(exports2, "EmailResponse", { enumerable: true, get: function() {
      return EmailResponse_1.EmailResponse;
    } });
    var EmailSettingResponse_1 = require_EmailSettingResponse();
    Object.defineProperty(exports2, "EmailSettingResponse", { enumerable: true, get: function() {
      return EmailSettingResponse_1.EmailSettingResponse;
    } });
    var EventCalculation_1 = require_EventCalculation();
    Object.defineProperty(exports2, "EventCalculation", { enumerable: true, get: function() {
      return EventCalculation_1.EventCalculation;
    } });
    var EventCalculationResponse_1 = require_EventCalculationResponse();
    Object.defineProperty(exports2, "EventCalculationResponse", { enumerable: true, get: function() {
      return EventCalculationResponse_1.EventCalculationResponse;
    } });
    var EventConfiguration_1 = require_EventConfiguration();
    Object.defineProperty(exports2, "EventConfiguration", { enumerable: true, get: function() {
      return EventConfiguration_1.EventConfiguration;
    } });
    var EventConfigurationResponse_1 = require_EventConfigurationResponse();
    Object.defineProperty(exports2, "EventConfigurationResponse", { enumerable: true, get: function() {
      return EventConfigurationResponse_1.EventConfigurationResponse;
    } });
    var EventHooks_1 = require_EventHooks();
    Object.defineProperty(exports2, "EventHooks", { enumerable: true, get: function() {
      return EventHooks_1.EventHooks;
    } });
    var EventHooksResponse_1 = require_EventHooksResponse();
    Object.defineProperty(exports2, "EventHooksResponse", { enumerable: true, get: function() {
      return EventHooksResponse_1.EventHooksResponse;
    } });
    var ExampleVideoData_1 = require_ExampleVideoData();
    Object.defineProperty(exports2, "ExampleVideoData", { enumerable: true, get: function() {
      return ExampleVideoData_1.ExampleVideoData;
    } });
    var FakeChannelDeploymentResponse_1 = require_FakeChannelDeploymentResponse();
    Object.defineProperty(exports2, "FakeChannelDeploymentResponse", { enumerable: true, get: function() {
      return FakeChannelDeploymentResponse_1.FakeChannelDeploymentResponse;
    } });
    var FakeChannelResponse_1 = require_FakeChannelResponse();
    Object.defineProperty(exports2, "FakeChannelResponse", { enumerable: true, get: function() {
      return FakeChannelResponse_1.FakeChannelResponse;
    } });
    var Field_1 = require_Field();
    Object.defineProperty(exports2, "Field", { enumerable: true, get: function() {
      return Field_1.Field;
    } });
    var FileProcessResponse_1 = require_FileProcessResponse();
    Object.defineProperty(exports2, "FileProcessResponse", { enumerable: true, get: function() {
      return FileProcessResponse_1.FileProcessResponse;
    } });
    var Filter_1 = require_Filter2();
    Object.defineProperty(exports2, "Filter", { enumerable: true, get: function() {
      return Filter_1.Filter;
    } });
    var FraudFlag_1 = require_FraudFlag();
    Object.defineProperty(exports2, "FraudFlag", { enumerable: true, get: function() {
      return FraudFlag_1.FraudFlag;
    } });
    var GetOutreachFlowEmailPolicyResponse_1 = require_GetOutreachFlowEmailPolicyResponse();
    Object.defineProperty(exports2, "GetOutreachFlowEmailPolicyResponse", { enumerable: true, get: function() {
      return GetOutreachFlowEmailPolicyResponse_1.GetOutreachFlowEmailPolicyResponse;
    } });
    var GiftCardResponse_1 = require_GiftCardResponse();
    Object.defineProperty(exports2, "GiftCardResponse", { enumerable: true, get: function() {
      return GiftCardResponse_1.GiftCardResponse;
    } });
    var GroupSearchResultItem_1 = require_GroupSearchResultItem();
    Object.defineProperty(exports2, "GroupSearchResultItem", { enumerable: true, get: function() {
      return GroupSearchResultItem_1.GroupSearchResultItem;
    } });
    var IncidentResponse_1 = require_IncidentResponse();
    Object.defineProperty(exports2, "IncidentResponse", { enumerable: true, get: function() {
      return IncidentResponse_1.IncidentResponse;
    } });
    var InitCreatorsPayload_1 = require_InitCreatorsPayload();
    Object.defineProperty(exports2, "InitCreatorsPayload", { enumerable: true, get: function() {
      return InitCreatorsPayload_1.InitCreatorsPayload;
    } });
    var JsonDiff_1 = require_JsonDiff();
    Object.defineProperty(exports2, "JsonDiff", { enumerable: true, get: function() {
      return JsonDiff_1.JsonDiff;
    } });
    var KycSessionResponse_1 = require_KycSessionResponse();
    Object.defineProperty(exports2, "KycSessionResponse", { enumerable: true, get: function() {
      return KycSessionResponse_1.KycSessionResponse;
    } });
    var ManualTemplateResponse_1 = require_ManualTemplateResponse();
    Object.defineProperty(exports2, "ManualTemplateResponse", { enumerable: true, get: function() {
      return ManualTemplateResponse_1.ManualTemplateResponse;
    } });
    var ManualTestEmailPayload_1 = require_ManualTestEmailPayload();
    Object.defineProperty(exports2, "ManualTestEmailPayload", { enumerable: true, get: function() {
      return ManualTestEmailPayload_1.ManualTestEmailPayload;
    } });
    var OfferCongifuration_1 = require_OfferCongifuration();
    Object.defineProperty(exports2, "OfferCongifuration", { enumerable: true, get: function() {
      return OfferCongifuration_1.OfferCongifuration;
    } });
    var OutreachLogResponse_1 = require_OutreachLogResponse();
    Object.defineProperty(exports2, "OutreachLogResponse", { enumerable: true, get: function() {
      return OutreachLogResponse_1.OutreachLogResponse;
    } });
    var Payout_1 = require_Payout();
    Object.defineProperty(exports2, "Payout", { enumerable: true, get: function() {
      return Payout_1.Payout;
    } });
    var PrepareAgencyEmailPayload_1 = require_PrepareAgencyEmailPayload();
    Object.defineProperty(exports2, "PrepareAgencyEmailPayload", { enumerable: true, get: function() {
      return PrepareAgencyEmailPayload_1.PrepareAgencyEmailPayload;
    } });
    var PricingClusterRule_1 = require_PricingClusterRule();
    Object.defineProperty(exports2, "PricingClusterRule", { enumerable: true, get: function() {
      return PricingClusterRule_1.PricingClusterRule;
    } });
    var PublicSponsorshipResponse_1 = require_PublicSponsorshipResponse();
    Object.defineProperty(exports2, "PublicSponsorshipResponse", { enumerable: true, get: function() {
      return PublicSponsorshipResponse_1.PublicSponsorshipResponse;
    } });
    var SearchColumnMetadata_1 = require_SearchColumnMetadata();
    Object.defineProperty(exports2, "SearchColumnMetadata", { enumerable: true, get: function() {
      return SearchColumnMetadata_1.SearchColumnMetadata;
    } });
    var SearchFilter_1 = require_SearchFilter();
    Object.defineProperty(exports2, "SearchFilter", { enumerable: true, get: function() {
      return SearchFilter_1.SearchFilter;
    } });
    var SearchMappingResponse_1 = require_SearchMappingResponse();
    Object.defineProperty(exports2, "SearchMappingResponse", { enumerable: true, get: function() {
      return SearchMappingResponse_1.SearchMappingResponse;
    } });
    var SearchResultResponse_1 = require_SearchResultResponse();
    Object.defineProperty(exports2, "SearchResultResponse", { enumerable: true, get: function() {
      return SearchResultResponse_1.SearchResultResponse;
    } });
    var SearchSortCriterion_1 = require_SearchSortCriterion();
    Object.defineProperty(exports2, "SearchSortCriterion", { enumerable: true, get: function() {
      return SearchSortCriterion_1.SearchSortCriterion;
    } });
    var SearchTermsResponse_1 = require_SearchTermsResponse();
    Object.defineProperty(exports2, "SearchTermsResponse", { enumerable: true, get: function() {
      return SearchTermsResponse_1.SearchTermsResponse;
    } });
    var SpendReportResponse_1 = require_SpendReportResponse();
    Object.defineProperty(exports2, "SpendReportResponse", { enumerable: true, get: function() {
      return SpendReportResponse_1.SpendReportResponse;
    } });
    var SponsorshipDeliverableResponse_1 = require_SponsorshipDeliverableResponse();
    Object.defineProperty(exports2, "SponsorshipDeliverableResponse", { enumerable: true, get: function() {
      return SponsorshipDeliverableResponse_1.SponsorshipDeliverableResponse;
    } });
    var SponsorshipResponse_1 = require_SponsorshipResponse();
    Object.defineProperty(exports2, "SponsorshipResponse", { enumerable: true, get: function() {
      return SponsorshipResponse_1.SponsorshipResponse;
    } });
    var StringCustomField_1 = require_StringCustomField();
    Object.defineProperty(exports2, "StringCustomField", { enumerable: true, get: function() {
      return StringCustomField_1.StringCustomField;
    } });
    var SubPerEventGoalProgress_1 = require_SubPerEventGoalProgress();
    Object.defineProperty(exports2, "SubPerEventGoalProgress", { enumerable: true, get: function() {
      return SubPerEventGoalProgress_1.SubPerEventGoalProgress;
    } });
    var Testimonial_1 = require_Testimonial();
    Object.defineProperty(exports2, "Testimonial", { enumerable: true, get: function() {
      return Testimonial_1.Testimonial;
    } });
    var TikTokCreativeChangeRequest_1 = require_TikTokCreativeChangeRequest();
    Object.defineProperty(exports2, "TikTokCreativeChangeRequest", { enumerable: true, get: function() {
      return TikTokCreativeChangeRequest_1.TikTokCreativeChangeRequest;
    } });
    var TikTokCreativeStateHistory_1 = require_TikTokCreativeStateHistory();
    Object.defineProperty(exports2, "TikTokCreativeStateHistory", { enumerable: true, get: function() {
      return TikTokCreativeStateHistory_1.TikTokCreativeStateHistory;
    } });
    var TikTokDeployment_1 = require_TikTokDeployment();
    Object.defineProperty(exports2, "TikTokDeployment", { enumerable: true, get: function() {
      return TikTokDeployment_1.TikTokDeployment;
    } });
    var TikTokVideo_1 = require_TikTokVideo();
    Object.defineProperty(exports2, "TikTokVideo", { enumerable: true, get: function() {
      return TikTokVideo_1.TikTokVideo;
    } });
    var TimelineEntry_1 = require_TimelineEntry();
    Object.defineProperty(exports2, "TimelineEntry", { enumerable: true, get: function() {
      return TimelineEntry_1.TimelineEntry;
    } });
    var TimelineFieldsDeliverableMapping_1 = require_TimelineFieldsDeliverableMapping();
    Object.defineProperty(exports2, "TimelineFieldsDeliverableMapping", { enumerable: true, get: function() {
      return TimelineFieldsDeliverableMapping_1.TimelineFieldsDeliverableMapping;
    } });
    var TimelineFieldsMapping_1 = require_TimelineFieldsMapping();
    Object.defineProperty(exports2, "TimelineFieldsMapping", { enumerable: true, get: function() {
      return TimelineFieldsMapping_1.TimelineFieldsMapping;
    } });
    var TriggerFields_1 = require_TriggerFields();
    Object.defineProperty(exports2, "TriggerFields", { enumerable: true, get: function() {
      return TriggerFields_1.TriggerFields;
    } });
    var UpdateFakeChannelPayload_1 = require_UpdateFakeChannelPayload();
    Object.defineProperty(exports2, "UpdateFakeChannelPayload", { enumerable: true, get: function() {
      return UpdateFakeChannelPayload_1.UpdateFakeChannelPayload;
    } });
    var UpdateOutreachEmailPolicyPayload_1 = require_UpdateOutreachEmailPolicyPayload();
    Object.defineProperty(exports2, "UpdateOutreachEmailPolicyPayload", { enumerable: true, get: function() {
      return UpdateOutreachEmailPolicyPayload_1.UpdateOutreachEmailPolicyPayload;
    } });
    var UtmPayload_1 = require_UtmPayload();
    Object.defineProperty(exports2, "UtmPayload", { enumerable: true, get: function() {
      return UtmPayload_1.UtmPayload;
    } });
    var VideoAsset_1 = require_VideoAsset();
    Object.defineProperty(exports2, "VideoAsset", { enumerable: true, get: function() {
      return VideoAsset_1.VideoAsset;
    } });
    var WorkflowEngineDeploymentOutreach_1 = require_WorkflowEngineDeploymentOutreach();
    Object.defineProperty(exports2, "WorkflowEngineDeploymentOutreach", { enumerable: true, get: function() {
      return WorkflowEngineDeploymentOutreach_1.WorkflowEngineDeploymentOutreach;
    } });
    var WorkflowStep_1 = require_WorkflowStep();
    Object.defineProperty(exports2, "WorkflowStep", { enumerable: true, get: function() {
      return WorkflowStep_1.WorkflowStep;
    } });
    var WorkflowStepAction_1 = require_WorkflowStepAction();
    Object.defineProperty(exports2, "WorkflowStepAction", { enumerable: true, get: function() {
      return WorkflowStepAction_1.WorkflowStepAction;
    } });
    var WorkflowStepDelay_1 = require_WorkflowStepDelay();
    Object.defineProperty(exports2, "WorkflowStepDelay", { enumerable: true, get: function() {
      return WorkflowStepDelay_1.WorkflowStepDelay;
    } });
    var WorkflowTemplateConfiguration_1 = require_WorkflowTemplateConfiguration();
    Object.defineProperty(exports2, "WorkflowTemplateConfiguration", { enumerable: true, get: function() {
      return WorkflowTemplateConfiguration_1.WorkflowTemplateConfiguration;
    } });
    var WorkflowTrigger_1 = require_WorkflowTrigger();
    Object.defineProperty(exports2, "WorkflowTrigger", { enumerable: true, get: function() {
      return WorkflowTrigger_1.WorkflowTrigger;
    } });
    var AccountsService_1 = require_AccountsService();
    Object.defineProperty(exports2, "AccountsService", { enumerable: true, get: function() {
      return AccountsService_1.AccountsService;
    } });
    var ActionsService_1 = require_ActionsService();
    Object.defineProperty(exports2, "ActionsService", { enumerable: true, get: function() {
      return ActionsService_1.ActionsService;
    } });
    var AdvertisersService_1 = require_AdvertisersService();
    Object.defineProperty(exports2, "AdvertisersService", { enumerable: true, get: function() {
      return AdvertisersService_1.AdvertisersService;
    } });
    var AdvertisersBrandSafetyService_1 = require_AdvertisersBrandSafetyService();
    Object.defineProperty(exports2, "AdvertisersBrandSafetyService", { enumerable: true, get: function() {
      return AdvertisersBrandSafetyService_1.AdvertisersBrandSafetyService;
    } });
    var AdvertisersRegionService_1 = require_AdvertisersRegionService();
    Object.defineProperty(exports2, "AdvertisersRegionService", { enumerable: true, get: function() {
      return AdvertisersRegionService_1.AdvertisersRegionService;
    } });
    var AgenciesService_1 = require_AgenciesService2();
    Object.defineProperty(exports2, "AgenciesService", { enumerable: true, get: function() {
      return AgenciesService_1.AgenciesService;
    } });
    var AttributionService_1 = require_AttributionService();
    Object.defineProperty(exports2, "AttributionService", { enumerable: true, get: function() {
      return AttributionService_1.AttributionService;
    } });
    var Au10TixService_1 = require_Au10TixService();
    Object.defineProperty(exports2, "Au10TixService", { enumerable: true, get: function() {
      return Au10TixService_1.Au10TixService;
    } });
    var AuditLogService_1 = require_AuditLogService();
    Object.defineProperty(exports2, "AuditLogService", { enumerable: true, get: function() {
      return AuditLogService_1.AuditLogService;
    } });
    var AuthService_1 = require_AuthService();
    Object.defineProperty(exports2, "AuthService", { enumerable: true, get: function() {
      return AuthService_1.AuthService;
    } });
    var BulkActionsService_1 = require_BulkActionsService();
    Object.defineProperty(exports2, "BulkActionsService", { enumerable: true, get: function() {
      return BulkActionsService_1.BulkActionsService;
    } });
    var CampaignBudgetsService_1 = require_CampaignBudgetsService();
    Object.defineProperty(exports2, "CampaignBudgetsService", { enumerable: true, get: function() {
      return CampaignBudgetsService_1.CampaignBudgetsService;
    } });
    var CampaignBudgetsRegionalCpiService_1 = require_CampaignBudgetsRegionalCpiService();
    Object.defineProperty(exports2, "CampaignBudgetsRegionalCpiService", { enumerable: true, get: function() {
      return CampaignBudgetsRegionalCpiService_1.CampaignBudgetsRegionalCpiService;
    } });
    var CampaignGroupsRelationsService_1 = require_CampaignGroupsRelationsService();
    Object.defineProperty(exports2, "CampaignGroupsRelationsService", { enumerable: true, get: function() {
      return CampaignGroupsRelationsService_1.CampaignGroupsRelationsService;
    } });
    var CampaignPricingClustersService_1 = require_CampaignPricingClustersService();
    Object.defineProperty(exports2, "CampaignPricingClustersService", { enumerable: true, get: function() {
      return CampaignPricingClustersService_1.CampaignPricingClustersService;
    } });
    var CampaignsService_1 = require_CampaignsService();
    Object.defineProperty(exports2, "CampaignsService", { enumerable: true, get: function() {
      return CampaignsService_1.CampaignsService;
    } });
    var CampaignsExperimentsService_1 = require_CampaignsExperimentsService();
    Object.defineProperty(exports2, "CampaignsExperimentsService", { enumerable: true, get: function() {
      return CampaignsExperimentsService_1.CampaignsExperimentsService;
    } });
    var CampaignsStatsService_1 = require_CampaignsStatsService();
    Object.defineProperty(exports2, "CampaignsStatsService", { enumerable: true, get: function() {
      return CampaignsStatsService_1.CampaignsStatsService;
    } });
    var ConfigService_1 = require_ConfigService();
    Object.defineProperty(exports2, "ConfigService", { enumerable: true, get: function() {
      return ConfigService_1.ConfigService;
    } });
    var CreatorsService_1 = require_CreatorsService2();
    Object.defineProperty(exports2, "CreatorsService", { enumerable: true, get: function() {
      return CreatorsService_1.CreatorsService;
    } });
    var DeliverablesService_1 = require_DeliverablesService();
    Object.defineProperty(exports2, "DeliverablesService", { enumerable: true, get: function() {
      return DeliverablesService_1.DeliverablesService;
    } });
    var DeliverableTrackingService_1 = require_DeliverableTrackingService();
    Object.defineProperty(exports2, "DeliverableTrackingService", { enumerable: true, get: function() {
      return DeliverableTrackingService_1.DeliverableTrackingService;
    } });
    var DeploymentsService_1 = require_DeploymentsService();
    Object.defineProperty(exports2, "DeploymentsService", { enumerable: true, get: function() {
      return DeploymentsService_1.DeploymentsService;
    } });
    var DeploymentsAdvertiserEventsService_1 = require_DeploymentsAdvertiserEventsService();
    Object.defineProperty(exports2, "DeploymentsAdvertiserEventsService", { enumerable: true, get: function() {
      return DeploymentsAdvertiserEventsService_1.DeploymentsAdvertiserEventsService;
    } });
    var DeploymentsDeliverablesService_1 = require_DeploymentsDeliverablesService();
    Object.defineProperty(exports2, "DeploymentsDeliverablesService", { enumerable: true, get: function() {
      return DeploymentsDeliverablesService_1.DeploymentsDeliverablesService;
    } });
    var DeploymentsEligibilityService_1 = require_DeploymentsEligibilityService();
    Object.defineProperty(exports2, "DeploymentsEligibilityService", { enumerable: true, get: function() {
      return DeploymentsEligibilityService_1.DeploymentsEligibilityService;
    } });
    var DeploymentsFraudService_1 = require_DeploymentsFraudService();
    Object.defineProperty(exports2, "DeploymentsFraudService", { enumerable: true, get: function() {
      return DeploymentsFraudService_1.DeploymentsFraudService;
    } });
    var EarningsService_1 = require_EarningsService();
    Object.defineProperty(exports2, "EarningsService", { enumerable: true, get: function() {
      return EarningsService_1.EarningsService;
    } });
    var EmailsService_1 = require_EmailsService();
    Object.defineProperty(exports2, "EmailsService", { enumerable: true, get: function() {
      return EmailsService_1.EmailsService;
    } });
    var ExperimentsService_1 = require_ExperimentsService();
    Object.defineProperty(exports2, "ExperimentsService", { enumerable: true, get: function() {
      return ExperimentsService_1.ExperimentsService;
    } });
    var ExternalEventsService_1 = require_ExternalEventsService();
    Object.defineProperty(exports2, "ExternalEventsService", { enumerable: true, get: function() {
      return ExternalEventsService_1.ExternalEventsService;
    } });
    var FeaturesSettingsService_1 = require_FeaturesSettingsService();
    Object.defineProperty(exports2, "FeaturesSettingsService", { enumerable: true, get: function() {
      return FeaturesSettingsService_1.FeaturesSettingsService;
    } });
    var FileProcessService_1 = require_FileProcessService();
    Object.defineProperty(exports2, "FileProcessService", { enumerable: true, get: function() {
      return FileProcessService_1.FileProcessService;
    } });
    var FraudService_1 = require_FraudService();
    Object.defineProperty(exports2, "FraudService", { enumerable: true, get: function() {
      return FraudService_1.FraudService;
    } });
    var GiftCardsService_1 = require_GiftCardsService();
    Object.defineProperty(exports2, "GiftCardsService", { enumerable: true, get: function() {
      return GiftCardsService_1.GiftCardsService;
    } });
    var GroupsService_1 = require_GroupsService();
    Object.defineProperty(exports2, "GroupsService", { enumerable: true, get: function() {
      return GroupsService_1.GroupsService;
    } });
    var GroupsEligibilityService_1 = require_GroupsEligibilityService();
    Object.defineProperty(exports2, "GroupsEligibilityService", { enumerable: true, get: function() {
      return GroupsEligibilityService_1.GroupsEligibilityService;
    } });
    var GroupsManualEligibilityService_1 = require_GroupsManualEligibilityService();
    Object.defineProperty(exports2, "GroupsManualEligibilityService", { enumerable: true, get: function() {
      return GroupsManualEligibilityService_1.GroupsManualEligibilityService;
    } });
    var HealthService_1 = require_HealthService2();
    Object.defineProperty(exports2, "HealthService", { enumerable: true, get: function() {
      return HealthService_1.HealthService;
    } });
    var HellofreshService_1 = require_HellofreshService();
    Object.defineProperty(exports2, "HellofreshService", { enumerable: true, get: function() {
      return HellofreshService_1.HellofreshService;
    } });
    var I18NService_1 = require_I18NService();
    Object.defineProperty(exports2, "I18NService", { enumerable: true, get: function() {
      return I18NService_1.I18NService;
    } });
    var IncidentsService_1 = require_IncidentsService();
    Object.defineProperty(exports2, "IncidentsService", { enumerable: true, get: function() {
      return IncidentsService_1.IncidentsService;
    } });
    var InfinityService_1 = require_InfinityService();
    Object.defineProperty(exports2, "InfinityService", { enumerable: true, get: function() {
      return InfinityService_1.InfinityService;
    } });
    var InternalService_1 = require_InternalService();
    Object.defineProperty(exports2, "InternalService", { enumerable: true, get: function() {
      return InternalService_1.InternalService;
    } });
    var InternalOutreachService_1 = require_InternalOutreachService();
    Object.defineProperty(exports2, "InternalOutreachService", { enumerable: true, get: function() {
      return InternalOutreachService_1.InternalOutreachService;
    } });
    var KycService_1 = require_KycService();
    Object.defineProperty(exports2, "KycService", { enumerable: true, get: function() {
      return KycService_1.KycService;
    } });
    var LiveStreamsService_1 = require_LiveStreamsService();
    Object.defineProperty(exports2, "LiveStreamsService", { enumerable: true, get: function() {
      return LiveStreamsService_1.LiveStreamsService;
    } });
    var ManagersService_1 = require_ManagersService2();
    Object.defineProperty(exports2, "ManagersService", { enumerable: true, get: function() {
      return ManagersService_1.ManagersService;
    } });
    var ManualFlowService_1 = require_ManualFlowService();
    Object.defineProperty(exports2, "ManualFlowService", { enumerable: true, get: function() {
      return ManualFlowService_1.ManualFlowService;
    } });
    var MissingEventsService_1 = require_MissingEventsService();
    Object.defineProperty(exports2, "MissingEventsService", { enumerable: true, get: function() {
      return MissingEventsService_1.MissingEventsService;
    } });
    var NoteCommentsService_1 = require_NoteCommentsService();
    Object.defineProperty(exports2, "NoteCommentsService", { enumerable: true, get: function() {
      return NoteCommentsService_1.NoteCommentsService;
    } });
    var NotesService_1 = require_NotesService2();
    Object.defineProperty(exports2, "NotesService", { enumerable: true, get: function() {
      return NotesService_1.NotesService;
    } });
    var OutreachService_1 = require_OutreachService();
    Object.defineProperty(exports2, "OutreachService", { enumerable: true, get: function() {
      return OutreachService_1.OutreachService;
    } });
    var OutreachInfoService_1 = require_OutreachInfoService();
    Object.defineProperty(exports2, "OutreachInfoService", { enumerable: true, get: function() {
      return OutreachInfoService_1.OutreachInfoService;
    } });
    var OverviewService_1 = require_OverviewService();
    Object.defineProperty(exports2, "OverviewService", { enumerable: true, get: function() {
      return OverviewService_1.OverviewService;
    } });
    var PredictionsService_1 = require_PredictionsService();
    Object.defineProperty(exports2, "PredictionsService", { enumerable: true, get: function() {
      return PredictionsService_1.PredictionsService;
    } });
    var PromoCodeListsService_1 = require_PromoCodeListsService();
    Object.defineProperty(exports2, "PromoCodeListsService", { enumerable: true, get: function() {
      return PromoCodeListsService_1.PromoCodeListsService;
    } });
    var PromoCodesService_1 = require_PromoCodesService();
    Object.defineProperty(exports2, "PromoCodesService", { enumerable: true, get: function() {
      return PromoCodesService_1.PromoCodesService;
    } });
    var SearchService_1 = require_SearchService();
    Object.defineProperty(exports2, "SearchService", { enumerable: true, get: function() {
      return SearchService_1.SearchService;
    } });
    var SendGridService_1 = require_SendGridService();
    Object.defineProperty(exports2, "SendGridService", { enumerable: true, get: function() {
      return SendGridService_1.SendGridService;
    } });
    var ShareService_1 = require_ShareService();
    Object.defineProperty(exports2, "ShareService", { enumerable: true, get: function() {
      return ShareService_1.ShareService;
    } });
    var SpendReportsService_1 = require_SpendReportsService();
    Object.defineProperty(exports2, "SpendReportsService", { enumerable: true, get: function() {
      return SpendReportsService_1.SpendReportsService;
    } });
    var SponsorshipsService_1 = require_SponsorshipsService();
    Object.defineProperty(exports2, "SponsorshipsService", { enumerable: true, get: function() {
      return SponsorshipsService_1.SponsorshipsService;
    } });
    var SponsorshipsPreviewService_1 = require_SponsorshipsPreviewService();
    Object.defineProperty(exports2, "SponsorshipsPreviewService", { enumerable: true, get: function() {
      return SponsorshipsPreviewService_1.SponsorshipsPreviewService;
    } });
    var StatsService_1 = require_StatsService();
    Object.defineProperty(exports2, "StatsService", { enumerable: true, get: function() {
      return StatsService_1.StatsService;
    } });
    var TikTokAdvertiserService_1 = require_TikTokAdvertiserService();
    Object.defineProperty(exports2, "TikTokAdvertiserService", { enumerable: true, get: function() {
      return TikTokAdvertiserService_1.TikTokAdvertiserService;
    } });
    var TimelineService_1 = require_TimelineService();
    Object.defineProperty(exports2, "TimelineService", { enumerable: true, get: function() {
      return TimelineService_1.TimelineService;
    } });
    var TwitchService_1 = require_TwitchService();
    Object.defineProperty(exports2, "TwitchService", { enumerable: true, get: function() {
      return TwitchService_1.TwitchService;
    } });
    var TypesService_1 = require_TypesService();
    Object.defineProperty(exports2, "TypesService", { enumerable: true, get: function() {
      return TypesService_1.TypesService;
    } });
    var ViewerService_1 = require_ViewerService();
    Object.defineProperty(exports2, "ViewerService", { enumerable: true, get: function() {
      return ViewerService_1.ViewerService;
    } });
    var WorkflowAutomationService_1 = require_WorkflowAutomationService();
    Object.defineProperty(exports2, "WorkflowAutomationService", { enumerable: true, get: function() {
      return WorkflowAutomationService_1.WorkflowAutomationService;
    } });
  }
});

// src/viewers-search.tsx
var viewers_search_exports = {};
__export(viewers_search_exports, {
  default: () => Command
});
module.exports = __toCommonJS(viewers_search_exports);
var import_api3 = require("@raycast/api");
var import_react = require("react");

// src/components/Metadata.tsx
var import_api = require("@raycast/api");

// src/lib/utils.tsx
var getRandomColor = () => {
  return `#${Math.floor(Math.random() * 16777215).toString(16)}`;
};
var getPlatformIconSource = (platform) => {
  switch (platform) {
    case "twitch":
      return "twitch-purple-icon.png";
    case "youtube":
      return {
        light: "youtube_social_squircle_white.png",
        dark: "youtube_social_squircle_dark.png"
      };
    default:
      return "https://cdn.streamelements.com/assets/logos/SE_Favicon.png";
  }
};

// src/components/Metadata.tsx
var import_jsx_runtime = require("react/jsx-runtime");
function ViewerMetadata(viewer) {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_api.List.Item.Detail.Metadata, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_api.List.Item.Detail.Metadata.Label, { title: "Username", text: viewer.username || "N/A" }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_api.List.Item.Detail.Metadata.Label, { title: "User ID", text: viewer.id || viewer.userId || "N/A" }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_api.List.Item.Detail.Metadata.Label,
      {
        title: "Platform",
        text: viewer.platform || "N/A",
        icon: viewer.platform ? { source: getPlatformIconSource(viewer.platform) } : void 0
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_api.List.Item.Detail.Metadata.Label, { title: "Platform ID", text: viewer.platformId || "N/A" }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_api.List.Item.Detail.Metadata.Separator, {}),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_api.List.Item.Detail.Metadata.Label, { title: "Email", text: viewer.email || "N/A" }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_api.List.Item.Detail.Metadata.Label, { title: "Full Name", text: viewer.fullName || "N/A" }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_api.List.Item.Detail.Metadata.Label, { title: "Country", text: viewer.country || "N/A" }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_api.List.Item.Detail.Metadata.Separator, {}),
    viewer.kycStatus && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_api.List.Item.Detail.Metadata.Label, { title: "KYC Status", text: viewer.kycStatus }),
    viewer.kycVerified !== void 0 && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_api.List.Item.Detail.Metadata.Label, { title: "KYC Verified", text: viewer.kycVerified ? "Yes" : "No" }),
    viewer.remainingKycAttempts !== void 0 && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_api.List.Item.Detail.Metadata.Label, { title: "Remaining KYC Attempts", text: viewer.remainingKycAttempts.toString() }),
    viewer.birthdate && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_api.List.Item.Detail.Metadata.Label, { title: "Birthdate", text: viewer.birthdate }),
    viewer.emailVerified !== void 0 && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_api.List.Item.Detail.Metadata.Label, { title: "Email Verified", icon: viewer.emailVerified ? import_api.Icon.Check : import_api.Icon.Multiply }),
    viewer.isOnboarded !== void 0 && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_api.List.Item.Detail.Metadata.Label,
      {
        title: "Onboarded",
        icon: viewer.isOnboarded ? import_api.Icon.Check : import_api.Icon.Multiply
      }
    ),
    viewer.createdAt && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_api.List.Item.Detail.Metadata.Label, { title: "Created At", text: new Date(viewer.createdAt).toLocaleDateString() }),
    viewer.updatedAt && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_api.List.Item.Detail.Metadata.Label, { title: "Updated At", text: new Date(viewer.updatedAt).toLocaleDateString() }),
    viewer.stats?.ips && viewer.stats.ips.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_api.List.Item.Detail.Metadata.Separator, {}),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_api.List.Item.Detail.Metadata.TagList, { title: "IP Addresses", children: viewer.stats.ips.map((ip) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_api.List.Item.Detail.Metadata.TagList.Item, { text: ip, color: getRandomColor() }, ip)) }),
      viewer.stats.invalidIpChecks !== void 0 && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_api.List.Item.Detail.Metadata.Label, { title: "Invalid IP Checks", text: viewer.stats.invalidIpChecks.toString() }),
      viewer.stats.matchingProfilesByIp !== void 0 && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_api.List.Item.Detail.Metadata.Label, { title: "Matching Profiles by IP", text: viewer.stats.matchingProfilesByIp.toString() })
    ] })
  ] });
}

// src/lib/boss.tsx
var import_crm_api_axios_sdk = __toESM(require_lib());
var import_mad_men_axios_sdk = __toESM(require_lib3());
var import_api2 = require("@raycast/api");
function getViewerURL(userId) {
  return `https://boss.streamelements.com/viewers/${userId}`;
}
function getViewerJourneyURL(userId) {
  return `https://boss.streamelements.com/viewers/${userId}/journey`;
}
function newSponsorships() {
  const preferences = (0, import_api2.getPreferenceValues)();
  import_mad_men_axios_sdk.OpenAPI.BASE = preferences["mad-men-api-base-url"];
  import_mad_men_axios_sdk.OpenAPI.TOKEN = preferences["gatekeeper-jwt"];
  return new import_mad_men_axios_sdk.Sponsorships(import_mad_men_axios_sdk.OpenAPI);
}

// src/lib/search.tsx
var getViewerSearchQuery = (searchTerm, size = 30) => ({
  from: 0,
  size,
  sort: [],
  query: {
    bool: {
      must: [
        {
          bool: {
            should: [
              {
                query_string: {
                  query: `username:${searchTerm}*`,
                  boost: 10
                }
              },
              {
                query_string: {
                  query: `email:${searchTerm}*`,
                  boost: 8
                }
              },
              {
                query_string: {
                  query: `id:"${searchTerm}"`,
                  boost: 8
                }
              },
              {
                query_string: {
                  query: `provider:"${searchTerm}"`,
                  boost: 5
                }
              },
              {
                query_string: {
                  query: `providerId:"${searchTerm}"`,
                  boost: 6
                }
              },
              {
                query_string: {
                  query: `platform:"${searchTerm}"`,
                  boost: 7
                }
              },
              {
                query_string: {
                  query: `platformId:"${searchTerm}"`,
                  boost: 8
                }
              },
              {
                query_string: {
                  query: `fullName:${searchTerm}*`,
                  boost: 6
                }
              }
            ]
          }
        }
      ]
    }
  },
  index: "viewers-profiles"
});

// src/viewers-search.tsx
var import_jsx_runtime2 = require("react/jsx-runtime");
var sponsorships = newSponsorships();
function Command() {
  const [searchResults, setSearchResults] = (0, import_react.useState)([]);
  const [isLoading, setIsLoading] = (0, import_react.useState)(true);
  const [searchText, setSearchText] = (0, import_react.useState)("");
  const [debouncedSearchText, setDebouncedSearchText] = (0, import_react.useState)("");
  const debounceTime = 500;
  (0, import_react.useEffect)(() => {
    const timer = setTimeout(() => {
      setDebouncedSearchText(searchText);
    }, debounceTime);
    return () => clearTimeout(timer);
  }, [searchText]);
  (0, import_react.useEffect)(() => {
    async function fetchViewers() {
      try {
        if (!debouncedSearchText) {
          setSearchResults([]);
          setIsLoading(false);
          return;
        }
        const searchQuery = getViewerSearchQuery(debouncedSearchText, 30);
        const response = await sponsorships.search.search({
          index: searchQuery.index,
          query: searchQuery.query,
          from: searchQuery.from,
          size: searchQuery.size,
          sort: searchQuery.sort
        });
        const viewers = response.hits?.hits?.map((hit) => ({
          ...hit._source,
          _id: hit._id
        })) || [];
        setSearchResults(viewers);
      } catch (error) {
        console.error("Error fetching viewers:", error);
        setSearchResults([]);
      } finally {
        setIsLoading(false);
      }
    }
    fetchViewers();
  }, [debouncedSearchText]);
  const getViewerDisplayName = (viewer) => {
    return viewer.username || viewer.fullName || viewer.id || "Unknown Viewer";
  };
  const getViewerSubtitle = (viewer) => {
    const parts = [];
    if (viewer.platform) parts.push(viewer.platform);
    if (viewer.platformId) parts.push(`ID: ${viewer.platformId}`);
    if (viewer.email) parts.push(viewer.email);
    return parts.join(" \u2022 ");
  };
  const getViewerIcon = (viewer) => {
    if (viewer.avatarUrl) {
      return {
        source: viewer.avatarUrl,
        mask: import_api3.Image.Mask.Circle,
        fallback: "https://cdn.streamelements.com/assets/logos/SE_Favicon.png"
      };
    }
    return import_api3.Icon.Person;
  };
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_api3.List, { isLoading, isShowingDetail: true, onSearchTextChange: setSearchText, children: searchResults.map((viewer) => /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
    import_api3.List.Item,
    {
      icon: getViewerIcon(viewer),
      title: getViewerDisplayName(viewer),
      subtitle: getViewerSubtitle(viewer),
      detail: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_api3.List.Item.Detail, { metadata: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(ViewerMetadata, { ...viewer }) }),
      actions: /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(import_api3.ActionPanel, { children: [
        (viewer.id || viewer._id) && /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_api3.Action.OpenInBrowser, { title: "Open in Boss", url: getViewerURL(viewer.id || viewer._id || "") }),
        viewer._id && /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
          import_api3.Action.OpenInBrowser,
          {
            title: "Open Journey in Boss",
            url: getViewerJourneyURL(viewer._id || viewer.id || ""),
            icon: import_api3.Icon.Clock
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_api3.Action.CopyToClipboard, { title: "Copy User Id", content: viewer.id || viewer._id || "" }),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_api3.Action.CopyToClipboard, { title: "Copy Username", content: viewer.username || "" }),
        viewer.platform && /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_api3.Action.CopyToClipboard, { title: "Copy Platform", content: viewer.platform }),
        viewer.platformId && /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_api3.Action.CopyToClipboard, { title: "Copy Platform Id", content: viewer.platformId }),
        viewer.kycStatus && /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_api3.Action.CopyToClipboard, { title: "Copy Kyc Status", content: viewer.kycStatus }),
        viewer.email && /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_api3.Action.OpenInBrowser, { title: "Send Email", url: `mailto:${viewer.email}`, icon: import_api3.Icon.Envelope })
      ] })
    },
    viewer._id || viewer.id
  )) });
}
/*! Bundled license information:

mime-db/index.js:
  (*!
   * mime-db
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015-2022 Douglas Christopher Wilson
   * MIT Licensed
   *)

mime-types/index.js:
  (*!
   * mime-types
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)
*/
//# sourceMappingURL=data:application/json;base64,
