{
  "version": 3,
  "sources": ["../src/date-to-timestamp.tsx", "../src/utils.ts"],
  "sourcesContent": ["import {\n  showToast,\n  ActionPanel,\n  Icon,\n  Form,\n  Action,\n  Clipboard,\n  Toast,\n} from '@raycast/api';\nimport {\n  DateValidationError,\n  getTimestamp,\n  toDate,\n  validateDateInput,\n} from './utils';\n\ninterface Form {\n  year: string;\n  month: string;\n  day: string;\n  hours: string;\n  minutes: string;\n  seconds: string;\n}\n\nexport default function main() {\n  return (\n    <Form\n      actions={\n        <ActionPanel>\n          <ConvertAction />\n        </ActionPanel>\n      }\n    >\n      <Form.TextField id=\"year\" title=\"Year\" />\n      <Form.TextField id=\"month\" title=\"Month\" />\n      <Form.TextField id=\"day\" title=\"Day\" />\n      <Form.TextField id=\"hours\" title=\"Hours\" />\n      <Form.TextField id=\"minutes\" title=\"Minutes\" />\n      <Form.TextField id=\"seconds\" title=\"Seconds\" />\n    </Form>\n  );\n}\n\nfunction ConvertAction() {\n  async function handleSubmit(values: Form) {\n    const { year, month, day, hours, minutes, seconds } = values;\n\n    const yearNumber = parseInt(year || '0');\n    const monthNumber = parseInt(month || '0');\n    const dayNumber = parseInt(day || '0');\n    const hoursNumber = parseInt(hours || '0');\n    const minutesNumber = parseInt(minutes || '0');\n    const secondsNumber = parseInt(seconds || '0');\n\n    const validatationError = validateDateInput(\n      yearNumber,\n      monthNumber,\n      dayNumber,\n      hoursNumber,\n      minutesNumber,\n      secondsNumber,\n    );\n\n    if (validatationError) {\n      const title = getValidationErrorText(validatationError);\n      showToast({\n        style: Toast.Style.Failure,\n        title,\n      });\n      return;\n    }\n\n    const date = toDate(\n      yearNumber,\n      monthNumber,\n      dayNumber,\n      hoursNumber,\n      minutesNumber,\n      secondsNumber,\n    );\n    const timestamp = getTimestamp(date);\n\n    Clipboard.copy(timestamp.toString());\n    showToast({\n      style: Toast.Style.Success,\n      title: 'Copied to clipboard',\n    });\n  }\n\n  return (\n    <Action.SubmitForm\n      icon={Icon.Checkmark}\n      title=\"Convert\"\n      onSubmit={handleSubmit}\n    />\n  );\n}\n\nfunction getValidationErrorText(validatationError: DateValidationError) {\n  const { error, field } = validatationError;\n\n  let errorText = '';\n  switch (error) {\n    case 'not-a-number':\n      errorText = 'Not a number';\n      break;\n    case 'negative':\n      errorText = 'Negative value';\n      break;\n    case 'out-of-bounds':\n      errorText = 'The value is too high';\n      break;\n    default:\n      errorText = 'Unknown error';\n      break;\n  }\n\n  let fieldText = '';\n  switch (field) {\n    case 'year':\n      fieldText = 'Year';\n      break;\n    case 'month':\n      fieldText = 'Month';\n      break;\n    case 'day':\n      fieldText = 'Day';\n      break;\n    case 'hours':\n      fieldText = 'Hours';\n      break;\n    case 'minutes':\n      fieldText = 'Minutes';\n      break;\n    case 'seconds':\n      fieldText = 'Seconds';\n      break;\n  }\n\n  return `${errorText}: \"${fieldText}\"`;\n}\n", "import { getPreferenceValues } from '@raycast/api';\n\ntype TimestampFormat = 'seconds' | 'milliseconds';\n\ninterface Preferences {\n  format: TimestampFormat;\n  isUTC: boolean;\n}\n\ninterface Difference {\n  value: number;\n  unit: Intl.RelativeTimeFormatUnit;\n}\n\nexport interface DateValidationError {\n  field: 'year' | 'month' | 'day' | 'hours' | 'minutes' | 'seconds';\n  error: 'not-a-number' | 'negative' | 'out-of-bounds';\n}\n\nfunction getMultiplier(): number {\n  const { format } = getPreferenceValues<Preferences>();\n  const multiplierMap: Record<TimestampFormat, number> = {\n    seconds: 1000,\n    milliseconds: 1,\n  };\n  const multiplier = multiplierMap[format];\n  return multiplier;\n}\n\nexport function getCurrentTimestamp(): number {\n  const multiplier = getMultiplier();\n  const timestamp = Math.floor(Date.now() / multiplier);\n  return timestamp;\n}\n\nexport function getTimestamp(date: Date): number {\n  const multiplier = getMultiplier();\n  return Math.floor(date.getTime() / multiplier);\n}\n\nexport function getDate(timestamp: number): Date {\n  const isMilliseconds = String(timestamp).length >= 13;\n\n  if (isMilliseconds) {\n    return new Date(timestamp);\n  } else {\n    return new Date(timestamp * 1000);\n  }\n}\n\nexport function toDateString(date: Date): string {\n  const { isUTC } = getPreferenceValues<Preferences>();\n\n  const formatConfig: Intl.DateTimeFormatOptions = {\n    day: 'numeric',\n    month: 'short',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n    timeZoneName: 'short',\n  };\n\n  const timeZone = isUTC ? 'UTC' : undefined;\n\n  const dateString = date.toLocaleDateString('en-US', {\n    ...formatConfig,\n    timeZone,\n  });\n\n  return dateString;\n}\n\nexport function toDate(\n  year: number,\n  month: number,\n  day: number,\n  hours: number,\n  minutes: number,\n  seconds: number,\n) {\n  const { isUTC } = getPreferenceValues<Preferences>();\n  const date = new Date(year, month - 1, day, hours, minutes, seconds);\n\n  if (isUTC) {\n    const localTime = date.getTime();\n    const offset = date.getTimezoneOffset();\n    const time = localTime - 60 * 1000 * offset;\n    const correctedDate = new Date(time);\n    return correctedDate;\n  }\n\n  return date;\n}\n\nexport function getRelativeTime(oldDate: Date, newDate: Date): string {\n  const { value, unit } = getDifference(oldDate.getTime(), newDate.getTime());\n  const formatter = new Intl.RelativeTimeFormat('en-US', { style: 'narrow' });\n  const relativeTime = formatter.format(value, unit);\n  return relativeTime;\n}\n\nexport function validateDateInput(\n  year: number,\n  month: number,\n  day: number,\n  hours: number,\n  minutes: number,\n  seconds: number,\n): DateValidationError | null {\n  if (isNaN(year)) {\n    return {\n      field: 'year',\n      error: 'not-a-number',\n    };\n  }\n  if (isNaN(month)) {\n    return {\n      field: 'month',\n      error: 'not-a-number',\n    };\n  }\n  if (isNaN(day)) {\n    return {\n      field: 'day',\n      error: 'not-a-number',\n    };\n  }\n  if (isNaN(hours)) {\n    return {\n      field: 'hours',\n      error: 'not-a-number',\n    };\n  }\n  if (isNaN(minutes)) {\n    return {\n      field: 'minutes',\n      error: 'not-a-number',\n    };\n  }\n  if (isNaN(seconds)) {\n    return {\n      field: 'seconds',\n      error: 'not-a-number',\n    };\n  }\n\n  if (year < 0) {\n    return {\n      field: 'year',\n      error: 'negative',\n    };\n  }\n  if (month < 0) {\n    return {\n      field: 'month',\n      error: 'negative',\n    };\n  }\n  if (day < 0) {\n    return {\n      field: 'day',\n      error: 'negative',\n    };\n  }\n  if (hours < 0) {\n    return {\n      field: 'hours',\n      error: 'negative',\n    };\n  }\n  if (minutes < 0) {\n    return {\n      field: 'minutes',\n      error: 'negative',\n    };\n  }\n  if (seconds < 0) {\n    return {\n      field: 'seconds',\n      error: 'negative',\n    };\n  }\n\n  if (month > 12) {\n    return {\n      field: 'month',\n      error: 'out-of-bounds',\n    };\n  }\n  if (day > 31) {\n    return {\n      field: 'day',\n      error: 'out-of-bounds',\n    };\n  }\n  if (hours >= 24) {\n    return {\n      field: 'hours',\n      error: 'out-of-bounds',\n    };\n  }\n  if (minutes >= 60) {\n    return {\n      field: 'minutes',\n      error: 'out-of-bounds',\n    };\n  }\n  if (seconds >= 60) {\n    return {\n      field: 'seconds',\n      error: 'out-of-bounds',\n    };\n  }\n\n  return null;\n}\n\nfunction getDifference(oldTimestamp: number, newTimestamp: number): Difference {\n  const diff = Math.floor((oldTimestamp - newTimestamp) / 1000);\n  const diffAbs = Math.abs(diff);\n  if (diffAbs < 60) {\n    return {\n      value: diff,\n      unit: 'second',\n    };\n  } else if (diffAbs < 60 * 60) {\n    return {\n      value: Math.round(diff / 60),\n      unit: 'minute',\n    };\n  } else if (diffAbs < 24 * 60 * 60) {\n    return {\n      value: Math.round(diff / (60 * 60)),\n      unit: 'hour',\n    };\n  } else if (diffAbs < 30 * 24 * 60 * 60) {\n    return {\n      value: Math.round(diff / (24 * 60 * 60)),\n      unit: 'day',\n    };\n  } else if (diffAbs < 365 * 24 * 60 * 60) {\n    return {\n      value: Math.round(diff / (30 * 24 * 60 * 60)),\n      unit: 'month',\n    };\n  } else {\n    return {\n      value: Math.round(diff / (365 * 24 * 60 * 60)),\n      unit: 'year',\n    };\n  }\n}\n"],
  "mappings": "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",
  "names": ["date_to_timestamp_exports", "__export", "main", "__toCommonJS", "import_api", "import_api", "getMultiplier", "format", "getTimestamp", "date", "multiplier", "getMultiplier", "toDate", "year", "month", "day", "hours", "minutes", "seconds", "isUTC", "date", "localTime", "offset", "time", "validateDateInput", "year", "month", "day", "hours", "minutes", "seconds", "import_jsx_runtime", "main", "ConvertAction", "handleSubmit", "values", "year", "month", "day", "hours", "minutes", "seconds", "yearNumber", "monthNumber", "dayNumber", "hoursNumber", "minutesNumber", "secondsNumber", "validatationError", "validateDateInput", "title", "getValidationErrorText", "date", "toDate", "timestamp", "getTimestamp", "error", "field", "errorText", "fieldText"]
}
