{
  "version": 3,
  "sources": ["../src/current-timestamp.tsx", "../src/utils.ts"],
  "sourcesContent": ["import { Clipboard, showHUD } from '@raycast/api';\n\nimport { getCurrentTimestamp } from './utils';\n\nexport default async function main() {\n  const timestamp = getCurrentTimestamp();\n  Clipboard.copy(timestamp.toString());\n  await showHUD('Copied to clipboard');\n  return null;\n}\n", "import { getPreferenceValues } from '@raycast/api';\n\ntype TimestampFormat = 'seconds' | 'milliseconds';\n\ninterface Preferences {\n  format: TimestampFormat;\n  isUTC: boolean;\n}\n\ninterface Difference {\n  value: number;\n  unit: Intl.RelativeTimeFormatUnit;\n}\n\nexport interface DateValidationError {\n  field: 'year' | 'month' | 'day' | 'hours' | 'minutes' | 'seconds';\n  error: 'not-a-number' | 'negative' | 'out-of-bounds';\n}\n\nfunction getMultiplier(): number {\n  const { format } = getPreferenceValues<Preferences>();\n  const multiplierMap: Record<TimestampFormat, number> = {\n    seconds: 1000,\n    milliseconds: 1,\n  };\n  const multiplier = multiplierMap[format];\n  return multiplier;\n}\n\nexport function getCurrentTimestamp(): number {\n  const multiplier = getMultiplier();\n  const timestamp = Math.floor(Date.now() / multiplier);\n  return timestamp;\n}\n\nexport function getTimestamp(date: Date): number {\n  const multiplier = getMultiplier();\n  return Math.floor(date.getTime() / multiplier);\n}\n\nexport function getDate(timestamp: number): Date {\n  const isMilliseconds = String(timestamp).length >= 13;\n\n  if (isMilliseconds) {\n    return new Date(timestamp);\n  } else {\n    return new Date(timestamp * 1000);\n  }\n}\n\nexport function toDateString(date: Date): string {\n  const { isUTC } = getPreferenceValues<Preferences>();\n\n  const formatConfig: Intl.DateTimeFormatOptions = {\n    day: 'numeric',\n    month: 'short',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n    timeZoneName: 'short',\n  };\n\n  const timeZone = isUTC ? 'UTC' : undefined;\n\n  const dateString = date.toLocaleDateString('en-US', {\n    ...formatConfig,\n    timeZone,\n  });\n\n  return dateString;\n}\n\nexport function toDate(\n  year: number,\n  month: number,\n  day: number,\n  hours: number,\n  minutes: number,\n  seconds: number,\n) {\n  const { isUTC } = getPreferenceValues<Preferences>();\n  const date = new Date(year, month - 1, day, hours, minutes, seconds);\n\n  if (isUTC) {\n    const localTime = date.getTime();\n    const offset = date.getTimezoneOffset();\n    const time = localTime - 60 * 1000 * offset;\n    const correctedDate = new Date(time);\n    return correctedDate;\n  }\n\n  return date;\n}\n\nexport function getRelativeTime(oldDate: Date, newDate: Date): string {\n  const { value, unit } = getDifference(oldDate.getTime(), newDate.getTime());\n  const formatter = new Intl.RelativeTimeFormat('en-US', { style: 'narrow' });\n  const relativeTime = formatter.format(value, unit);\n  return relativeTime;\n}\n\nexport function validateDateInput(\n  year: number,\n  month: number,\n  day: number,\n  hours: number,\n  minutes: number,\n  seconds: number,\n): DateValidationError | null {\n  if (isNaN(year)) {\n    return {\n      field: 'year',\n      error: 'not-a-number',\n    };\n  }\n  if (isNaN(month)) {\n    return {\n      field: 'month',\n      error: 'not-a-number',\n    };\n  }\n  if (isNaN(day)) {\n    return {\n      field: 'day',\n      error: 'not-a-number',\n    };\n  }\n  if (isNaN(hours)) {\n    return {\n      field: 'hours',\n      error: 'not-a-number',\n    };\n  }\n  if (isNaN(minutes)) {\n    return {\n      field: 'minutes',\n      error: 'not-a-number',\n    };\n  }\n  if (isNaN(seconds)) {\n    return {\n      field: 'seconds',\n      error: 'not-a-number',\n    };\n  }\n\n  if (year < 0) {\n    return {\n      field: 'year',\n      error: 'negative',\n    };\n  }\n  if (month < 0) {\n    return {\n      field: 'month',\n      error: 'negative',\n    };\n  }\n  if (day < 0) {\n    return {\n      field: 'day',\n      error: 'negative',\n    };\n  }\n  if (hours < 0) {\n    return {\n      field: 'hours',\n      error: 'negative',\n    };\n  }\n  if (minutes < 0) {\n    return {\n      field: 'minutes',\n      error: 'negative',\n    };\n  }\n  if (seconds < 0) {\n    return {\n      field: 'seconds',\n      error: 'negative',\n    };\n  }\n\n  if (month > 12) {\n    return {\n      field: 'month',\n      error: 'out-of-bounds',\n    };\n  }\n  if (day > 31) {\n    return {\n      field: 'day',\n      error: 'out-of-bounds',\n    };\n  }\n  if (hours >= 24) {\n    return {\n      field: 'hours',\n      error: 'out-of-bounds',\n    };\n  }\n  if (minutes >= 60) {\n    return {\n      field: 'minutes',\n      error: 'out-of-bounds',\n    };\n  }\n  if (seconds >= 60) {\n    return {\n      field: 'seconds',\n      error: 'out-of-bounds',\n    };\n  }\n\n  return null;\n}\n\nfunction getDifference(oldTimestamp: number, newTimestamp: number): Difference {\n  const diff = Math.floor((oldTimestamp - newTimestamp) / 1000);\n  const diffAbs = Math.abs(diff);\n  if (diffAbs < 60) {\n    return {\n      value: diff,\n      unit: 'second',\n    };\n  } else if (diffAbs < 60 * 60) {\n    return {\n      value: Math.round(diff / 60),\n      unit: 'minute',\n    };\n  } else if (diffAbs < 24 * 60 * 60) {\n    return {\n      value: Math.round(diff / (60 * 60)),\n      unit: 'hour',\n    };\n  } else if (diffAbs < 30 * 24 * 60 * 60) {\n    return {\n      value: Math.round(diff / (24 * 60 * 60)),\n      unit: 'day',\n    };\n  } else if (diffAbs < 365 * 24 * 60 * 60) {\n    return {\n      value: Math.round(diff / (30 * 24 * 60 * 60)),\n      unit: 'month',\n    };\n  } else {\n    return {\n      value: Math.round(diff / (365 * 24 * 60 * 60)),\n      unit: 'year',\n    };\n  }\n}\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAmC,wBCAnC,IAAAC,EAAoC,wBAmBpC,SAASC,GAAwB,CAC/B,GAAM,CAAE,OAAAC,CAAO,KAAI,uBAAiC,EAMpD,MALuD,CACrD,QAAS,IACT,aAAc,CAChB,EACiCA,CAAM,CAEzC,CAEO,SAASC,GAA8B,CAC5C,IAAMC,EAAaH,EAAc,EAEjC,OADkB,KAAK,MAAM,KAAK,IAAI,EAAIG,CAAU,CAEtD,CD7BA,eAAOC,GAA8B,CACnC,IAAMC,EAAYC,EAAoB,EACtC,mBAAU,KAAKD,EAAU,SAAS,CAAC,EACnC,QAAM,WAAQ,qBAAqB,EAC5B,IACT",
  "names": ["current_timestamp_exports", "__export", "main", "__toCommonJS", "import_api", "import_api", "getMultiplier", "format", "getCurrentTimestamp", "multiplier", "main", "timestamp", "getCurrentTimestamp"]
}
