{
  "version": 3,
  "sources": ["../src/timestamp-to-date.tsx", "../src/utils.ts"],
  "sourcesContent": ["import {\n  showToast,\n  ActionPanel,\n  Icon,\n  Form,\n  Action,\n  Toast,\n} from '@raycast/api';\nimport {\n  getCurrentTimestamp,\n  getDate,\n  getRelativeTime,\n  toDateString,\n} from './utils';\n\ninterface Form {\n  timestamp: string;\n}\n\nexport default function main() {\n  return (\n    <Form\n      actions={\n        <ActionPanel>\n          <ConvertAction />\n        </ActionPanel>\n      }\n    >\n      <Form.TextField id=\"timestamp\" title=\"Timestamp\" />\n    </Form>\n  );\n}\n\nfunction ConvertAction() {\n  async function handleSubmit(values: Form) {\n    const { timestamp } = values;\n    if (timestamp.length === 0) {\n      showToast({\n        style: Toast.Style.Failure,\n        title: 'Empty input',\n      });\n      return;\n    }\n    const value = parseInt(timestamp);\n    if (isNaN(value)) {\n      showToast({\n        style: Toast.Style.Failure,\n        title: 'Invalid value',\n      });\n      return;\n    }\n    if (value < 0) {\n      showToast({\n        style: Toast.Style.Failure,\n        title: 'Negative value',\n      });\n      return;\n    }\n    if (value > 8640000000000) {\n      showToast({\n        style: Toast.Style.Failure,\n        title: 'The value is too high',\n      });\n      return;\n    }\n    const date = getDate(value);\n    const dateString = toDateString(date);\n\n    const now = getDate(getCurrentTimestamp());\n    const relative = getRelativeTime(date, now);\n\n    const text = `${dateString} (${relative})`;\n\n    showToast({\n      style: Toast.Style.Success,\n      title: text,\n    });\n  }\n\n  return (\n    <Action.SubmitForm\n      icon={Icon.Checkmark}\n      title=\"Convert\"\n      onSubmit={handleSubmit}\n    />\n  );\n}\n", "import { getPreferenceValues } from '@raycast/api';\n\ntype TimestampFormat = 'seconds' | 'milliseconds';\n\ninterface Preferences {\n  format: TimestampFormat;\n  isUTC: boolean;\n}\n\ninterface Difference {\n  value: number;\n  unit: Intl.RelativeTimeFormatUnit;\n}\n\nexport interface DateValidationError {\n  field: 'year' | 'month' | 'day' | 'hours' | 'minutes' | 'seconds';\n  error: 'not-a-number' | 'negative' | 'out-of-bounds';\n}\n\nfunction getMultiplier(): number {\n  const { format } = getPreferenceValues<Preferences>();\n  const multiplierMap: Record<TimestampFormat, number> = {\n    seconds: 1000,\n    milliseconds: 1,\n  };\n  const multiplier = multiplierMap[format];\n  return multiplier;\n}\n\nexport function getCurrentTimestamp(): number {\n  const multiplier = getMultiplier();\n  const timestamp = Math.floor(Date.now() / multiplier);\n  return timestamp;\n}\n\nexport function getTimestamp(date: Date): number {\n  const multiplier = getMultiplier();\n  return Math.floor(date.getTime() / multiplier);\n}\n\nexport function getDate(timestamp: number): Date {\n  const isMilliseconds = String(timestamp).length >= 13;\n\n  if (isMilliseconds) {\n    return new Date(timestamp);\n  } else {\n    return new Date(timestamp * 1000);\n  }\n}\n\nexport function toDateString(date: Date): string {\n  const { isUTC } = getPreferenceValues<Preferences>();\n\n  const formatConfig: Intl.DateTimeFormatOptions = {\n    day: 'numeric',\n    month: 'short',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n    timeZoneName: 'short',\n  };\n\n  const timeZone = isUTC ? 'UTC' : undefined;\n\n  const dateString = date.toLocaleDateString('en-US', {\n    ...formatConfig,\n    timeZone,\n  });\n\n  return dateString;\n}\n\nexport function toDate(\n  year: number,\n  month: number,\n  day: number,\n  hours: number,\n  minutes: number,\n  seconds: number,\n) {\n  const { isUTC } = getPreferenceValues<Preferences>();\n  const date = new Date(year, month - 1, day, hours, minutes, seconds);\n\n  if (isUTC) {\n    const localTime = date.getTime();\n    const offset = date.getTimezoneOffset();\n    const time = localTime - 60 * 1000 * offset;\n    const correctedDate = new Date(time);\n    return correctedDate;\n  }\n\n  return date;\n}\n\nexport function getRelativeTime(oldDate: Date, newDate: Date): string {\n  const { value, unit } = getDifference(oldDate.getTime(), newDate.getTime());\n  const formatter = new Intl.RelativeTimeFormat('en-US', { style: 'narrow' });\n  const relativeTime = formatter.format(value, unit);\n  return relativeTime;\n}\n\nexport function validateDateInput(\n  year: number,\n  month: number,\n  day: number,\n  hours: number,\n  minutes: number,\n  seconds: number,\n): DateValidationError | null {\n  if (isNaN(year)) {\n    return {\n      field: 'year',\n      error: 'not-a-number',\n    };\n  }\n  if (isNaN(month)) {\n    return {\n      field: 'month',\n      error: 'not-a-number',\n    };\n  }\n  if (isNaN(day)) {\n    return {\n      field: 'day',\n      error: 'not-a-number',\n    };\n  }\n  if (isNaN(hours)) {\n    return {\n      field: 'hours',\n      error: 'not-a-number',\n    };\n  }\n  if (isNaN(minutes)) {\n    return {\n      field: 'minutes',\n      error: 'not-a-number',\n    };\n  }\n  if (isNaN(seconds)) {\n    return {\n      field: 'seconds',\n      error: 'not-a-number',\n    };\n  }\n\n  if (year < 0) {\n    return {\n      field: 'year',\n      error: 'negative',\n    };\n  }\n  if (month < 0) {\n    return {\n      field: 'month',\n      error: 'negative',\n    };\n  }\n  if (day < 0) {\n    return {\n      field: 'day',\n      error: 'negative',\n    };\n  }\n  if (hours < 0) {\n    return {\n      field: 'hours',\n      error: 'negative',\n    };\n  }\n  if (minutes < 0) {\n    return {\n      field: 'minutes',\n      error: 'negative',\n    };\n  }\n  if (seconds < 0) {\n    return {\n      field: 'seconds',\n      error: 'negative',\n    };\n  }\n\n  if (month > 12) {\n    return {\n      field: 'month',\n      error: 'out-of-bounds',\n    };\n  }\n  if (day > 31) {\n    return {\n      field: 'day',\n      error: 'out-of-bounds',\n    };\n  }\n  if (hours >= 24) {\n    return {\n      field: 'hours',\n      error: 'out-of-bounds',\n    };\n  }\n  if (minutes >= 60) {\n    return {\n      field: 'minutes',\n      error: 'out-of-bounds',\n    };\n  }\n  if (seconds >= 60) {\n    return {\n      field: 'seconds',\n      error: 'out-of-bounds',\n    };\n  }\n\n  return null;\n}\n\nfunction getDifference(oldTimestamp: number, newTimestamp: number): Difference {\n  const diff = Math.floor((oldTimestamp - newTimestamp) / 1000);\n  const diffAbs = Math.abs(diff);\n  if (diffAbs < 60) {\n    return {\n      value: diff,\n      unit: 'second',\n    };\n  } else if (diffAbs < 60 * 60) {\n    return {\n      value: Math.round(diff / 60),\n      unit: 'minute',\n    };\n  } else if (diffAbs < 24 * 60 * 60) {\n    return {\n      value: Math.round(diff / (60 * 60)),\n      unit: 'hour',\n    };\n  } else if (diffAbs < 30 * 24 * 60 * 60) {\n    return {\n      value: Math.round(diff / (24 * 60 * 60)),\n      unit: 'day',\n    };\n  } else if (diffAbs < 365 * 24 * 60 * 60) {\n    return {\n      value: Math.round(diff / (30 * 24 * 60 * 60)),\n      unit: 'month',\n    };\n  } else {\n    return {\n      value: Math.round(diff / (365 * 24 * 60 * 60)),\n      unit: 'year',\n    };\n  }\n}\n"],
  "mappings": "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",
  "names": ["timestamp_to_date_exports", "__export", "main", "__toCommonJS", "import_api", "import_api", "getMultiplier", "format", "getCurrentTimestamp", "multiplier", "getDate", "timestamp", "toDateString", "date", "isUTC", "formatConfig", "timeZone", "getRelativeTime", "oldDate", "newDate", "value", "unit", "getDifference", "getDifference", "oldTimestamp", "newTimestamp", "diff", "diffAbs", "import_jsx_runtime", "main", "ConvertAction", "handleSubmit", "values", "timestamp", "value", "date", "getDate", "dateString", "toDateString", "now", "getCurrentTimestamp", "relative", "getRelativeTime", "text"]
}
