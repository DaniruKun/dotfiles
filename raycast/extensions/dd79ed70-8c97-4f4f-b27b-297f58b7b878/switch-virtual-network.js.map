{
  "version": 3,
  "sources": ["../src/switch-virtual-network.tsx", "../src/lib.ts"],
  "sourcesContent": ["import { Action, ActionPanel, List, PopToRootType, Toast, showHUD, showToast } from \"@raycast/api\";\nimport { useEffect, useState } from \"react\";\nimport { VirtualNetwork, getVirtualNetworks, switchVirtualNetwork } from \"./lib\";\n\nconst ListItem = ({\n  virtualNetwork,\n  onSwitchVirtualNetwork,\n}: {\n  virtualNetwork: VirtualNetwork;\n  onSwitchVirtualNetwork: (id: string) => void;\n}) => {\n  const accessories = [];\n  if (virtualNetwork.active) {\n    accessories.push({ text: \"Active\" });\n  }\n  if (virtualNetwork.default) {\n    accessories.push({ text: \"Default\" });\n  }\n\n  return (\n    <List.Item\n      key={virtualNetwork.id}\n      id={virtualNetwork.id}\n      title={virtualNetwork.name}\n      subtitle={virtualNetwork.description}\n      actions={\n        <ActionPanel title=\"Actions\">\n          <Action onAction={() => onSwitchVirtualNetwork(virtualNetwork.id)} title=\"Switch\" />\n        </ActionPanel>\n      }\n      accessories={accessories}\n    />\n  );\n};\n\nexport default () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [items, setItems] = useState<VirtualNetwork[]>([]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getVirtualNetworks()\n      .then((res) => setItems(res))\n      .then(() => setIsLoading(false));\n  }, []);\n\n  const onSwitchVirtualNetwork = async (id: string) => {\n    const result = await switchVirtualNetwork(id);\n    if (result) {\n      await showHUD(\"Switched Virtual Network\", {\n        clearRootSearch: true,\n        popToRootType: PopToRootType.Immediate,\n      });\n    } else {\n      await showToast({\n        style: Toast.Style.Failure,\n        title: \"Failed to switch Virtual Network\",\n      });\n    }\n  };\n  if (!isLoading && items.length === 0) {\n    return (\n      <List searchBarPlaceholder=\"Search Virtual Networks\" isLoading={isLoading}>\n        <List.EmptyView title=\"No Virtual Networks found\" />;\n      </List>\n    );\n  }\n\n  return (\n    <List searchBarPlaceholder=\"Search Virtual Networks\" isLoading={isLoading}>\n      {items.map((item: VirtualNetwork) => (\n        <ListItem key={item.id} virtualNetwork={item} onSwitchVirtualNetwork={onSwitchVirtualNetwork} />\n      ))}\n    </List>\n  );\n};\n", "import { getPreferenceValues } from \"@raycast/api\";\nimport { exec } from \"child_process\";\nimport util from \"util\";\nconst execPromise = util.promisify(exec);\n\nconst preferences: { wrapCliPath: string } = getPreferenceValues();\nconst DEFAULT_WRAP_CLI_PATH = \"/Applications/Cloudflare WARP.app/Contents/Resources/warp-cli\";\nconst wrapCliCmd = preferences.wrapCliPath ?? DEFAULT_WRAP_CLI_PATH;\n\nexport async function execCommand<T>(cmd: string): Promise<T> {\n  const { stdout } = await execPromise(`\"${wrapCliCmd}\" -j ${cmd}`);\n  return JSON.parse(stdout);\n}\n\nexport async function connectToWarp(): Promise<boolean> {\n  try {\n    const { status } = await execCommand<{ status: string }>(\"connect\");\n    if (status === \"Success\") {\n      return true;\n    }\n    throw new Error(\"Failed to connect\");\n  } catch (e) {\n    console.error(e);\n    return false;\n  }\n}\n\nexport async function disconnectFromWarp(): Promise<boolean> {\n  try {\n    const { status } = await execCommand<{ status: string }>(\"disconnect\");\n    if (status === \"Success\") {\n      return true;\n    }\n    throw new Error(\"Failed to connect\");\n  } catch (e) {\n    console.error(e);\n    return false;\n  }\n}\n\nexport enum ConnectionStatus {\n  Connected = \"connected\",\n  Disconnected = \"disconnected\",\n  Unknown = \"unknown\",\n}\nexport type StatusResult = {\n  status: ConnectionStatus;\n  disconnectReason: string;\n};\nexport async function getWarpStatus(): Promise<StatusResult> {\n  const { status, reason } = await execCommand<{ status: string; reason?: string }>(\"status\");\n  if (status === \"Disconnected\") {\n    return { status: ConnectionStatus.Disconnected, disconnectReason: reason ?? \"unknown\" };\n  }\n  if (status === \"Connected\") {\n    return { status: ConnectionStatus.Connected, disconnectReason: \"\" };\n  }\n  return { status: ConnectionStatus.Unknown, disconnectReason: \"unknown\" };\n}\n\nexport type VirtualNetwork = {\n  id: string;\n  name: string;\n  description: string;\n  default: boolean;\n  active: boolean;\n};\n\ntype VNetResult = {\n  active_vnet_id: string;\n  virtual_networks: {\n    id: string;\n    name: string;\n    description: string;\n    default: boolean;\n  }[];\n};\nexport async function getVirtualNetworks(): Promise<VirtualNetwork[]> {\n  const { active_vnet_id: activeVnetId, virtual_networks: virtualNetwork } = await execCommand<VNetResult>(\"vnet\");\n  const networks = virtualNetwork.map((network) => {\n    return {\n      id: network.id,\n      name: network.name,\n      description: network.description,\n      default: network.default,\n      active: network.id === activeVnetId,\n    };\n  });\n\n  return networks;\n}\n\nexport async function switchVirtualNetwork(id: string): Promise<boolean> {\n  try {\n    const disconnected = await disconnectFromWarp();\n    if (!disconnected) {\n      throw new Error(\"Failed to disconnect\");\n    }\n    const { status } = await execCommand<{ status: string }>(`vnet ${id}`);\n    if (status !== \"Success\") {\n      throw new Error(\"Failed to switch network\");\n    }\n    const connectStatus = await connectToWarp();\n    if (!connectStatus) {\n      throw new Error(\"Failed to connect\");\n    }\n    return true;\n  } catch (e) {\n    console.error(e);\n    return false;\n  }\n}\n"],
  "mappings": "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",
  "names": ["switch_virtual_network_exports", "__export", "switch_virtual_network_default", "__toCommonJS", "import_api", "import_react", "import_api", "import_child_process", "import_util", "execPromise", "util", "preferences", "DEFAULT_WRAP_CLI_PATH", "wrapCliCmd", "execCommand", "cmd", "stdout", "connectToWarp", "status", "e", "disconnectFromWarp", "getVirtualNetworks", "activeVnetId", "virtualNetwork", "execCommand", "network", "switchVirtualNetwork", "id", "disconnectFromWarp", "status", "connectToWarp", "import_jsx_runtime", "ListItem", "virtualNetwork", "onSwitchVirtualNetwork", "accessories", "switch_virtual_network_default", "isLoading", "setIsLoading", "items", "setItems", "getVirtualNetworks", "res", "id", "switchVirtualNetwork", "item"]
}
