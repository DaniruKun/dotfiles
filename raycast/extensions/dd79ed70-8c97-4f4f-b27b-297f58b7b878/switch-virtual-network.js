"use strict";var g=Object.create;var u=Object.defineProperty;var k=Object.getOwnPropertyDescriptor;var V=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,S=Object.prototype.hasOwnProperty;var N=(t,e)=>{for(var n in e)u(t,n,{get:e[n],enumerable:!0})},d=(t,e,n,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let i of V(e))!S.call(t,i)&&i!==n&&u(t,i,{get:()=>e[i],enumerable:!(r=k(e,i))||r.enumerable});return t};var P=(t,e,n)=>(n=t!=null?g(y(t)):{},d(e||!t||!t.__esModule?u(n,"default",{value:t,enumerable:!0}):n,t)),x=t=>d(u({},"__esModule",{value:!0}),t);var E={};N(E,{default:()=>_});module.exports=x(E);var o=require("@raycast/api"),c=require("react");var w=require("@raycast/api"),p=require("child_process"),f=P(require("util")),R=f.default.promisify(p.exec),C=(0,w.getPreferenceValues)(),v="/Applications/Cloudflare WARP.app/Contents/Resources/warp-cli",A=C.wrapCliPath??v;async function l(t){let{stdout:e}=await R(`"${A}" -j ${t}`);return JSON.parse(e)}async function T(){try{let{status:t}=await l("connect");if(t==="Success")return!0;throw new Error("Failed to connect")}catch(t){return console.error(t),!1}}async function L(){try{let{status:t}=await l("disconnect");if(t==="Success")return!0;throw new Error("Failed to connect")}catch(t){return console.error(t),!1}}async function m(){let{active_vnet_id:t,virtual_networks:e}=await l("vnet");return e.map(r=>({id:r.id,name:r.name,description:r.description,default:r.default,active:r.id===t}))}async function h(t){try{if(!await L())throw new Error("Failed to disconnect");let{status:n}=await l(`vnet ${t}`);if(n!=="Success")throw new Error("Failed to switch network");if(!await T())throw new Error("Failed to connect");return!0}catch(e){return console.error(e),!1}}var s=require("react/jsx-runtime"),F=({virtualNetwork:t,onSwitchVirtualNetwork:e})=>{let n=[];return t.active&&n.push({text:"Active"}),t.default&&n.push({text:"Default"}),(0,s.jsx)(o.List.Item,{id:t.id,title:t.name,subtitle:t.description,actions:(0,s.jsx)(o.ActionPanel,{title:"Actions",children:(0,s.jsx)(o.Action,{onAction:()=>e(t.id),title:"Switch"})}),accessories:n},t.id)},_=()=>{let[t,e]=(0,c.useState)(!0),[n,r]=(0,c.useState)([]);(0,c.useEffect)(()=>{e(!0),m().then(a=>r(a)).then(()=>e(!1))},[]);let i=async a=>{await h(a)?await(0,o.showHUD)("Switched Virtual Network",{clearRootSearch:!0,popToRootType:o.PopToRootType.Immediate}):await(0,o.showToast)({style:o.Toast.Style.Failure,title:"Failed to switch Virtual Network"})};return!t&&n.length===0?(0,s.jsxs)(o.List,{searchBarPlaceholder:"Search Virtual Networks",isLoading:t,children:[(0,s.jsx)(o.List.EmptyView,{title:"No Virtual Networks found"}),";"]}):(0,s.jsx)(o.List,{searchBarPlaceholder:"Search Virtual Networks",isLoading:t,children:n.map(a=>(0,s.jsx)(F,{virtualNetwork:a,onSwitchVirtualNetwork:i},a.id))})};
